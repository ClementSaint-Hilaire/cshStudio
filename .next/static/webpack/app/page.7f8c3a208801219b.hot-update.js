"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/Animations/ImageTrail.tsx":
/*!***************************************!*\
  !*** ./src/Animations/ImageTrail.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ImageTrail; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_spring_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/web */ \"(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nclass ImageTrailVariant1 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) {\n            this.zIndexVal = 1;\n        }\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            scale: 1,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"power3\",\n            opacity: 0,\n            scale: 0.2\n        }, 0.4);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        const handlePointerMove = (ev)=>{\n            const rect = this.container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = this.container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant2 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) {\n            this.zIndexVal = 1;\n        }\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            scale: 0,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1,\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0).fromTo(img.DOM.inner, {\n            scale: 2.8,\n            filter: \"brightness(250%)\"\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1,\n            filter: \"brightness(100%)\"\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"power2\",\n            opacity: 0,\n            scale: 0.2\n        }, 0.45);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant3 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) {\n            this.zIndexVal = 1;\n        }\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            scale: 0,\n            zIndex: this.zIndexVal,\n            xPercent: 0,\n            yPercent: 0,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1,\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0).fromTo(img.DOM.inner, {\n            scale: 1.2\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1\n        }, 0).to(img.DOM.el, {\n            duration: 0.6,\n            ease: \"power2\",\n            opacity: 0,\n            scale: 0.2,\n            xPercent: ()=>gsap.utils.random(-30, 30),\n            yPercent: -200\n        }, 0.6);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant4 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (this.isIdle && this.zIndexVal !== 1) this.zIndexVal = 1;\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        let dx = this.mousePos.x - this.cacheMousePos.x;\n        let dy = this.mousePos.y - this.cacheMousePos.y;\n        let distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance !== 0) {\n            dx /= distance;\n            dy /= distance;\n        }\n        dx *= distance / 100;\n        dy *= distance / 100;\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            scale: 0,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1,\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0).fromTo(img.DOM.inner, {\n            scale: 2,\n            filter: \"brightness(\".concat(Math.max(400 * distance / 100, 100), \"%) contrast(\").concat(Math.max(400 * distance / 100, 100), \"%)\")\n        }, {\n            duration: 0.4,\n            ease: \"power1\",\n            scale: 1,\n            filter: \"brightness(100%) contrast(100%)\"\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"power3\",\n            opacity: 0\n        }, 0.4).to(img.DOM.el, {\n            duration: 1.5,\n            ease: \"power4\",\n            x: \"+=\".concat(dx * 110),\n            y: \"+=\".concat(dy * 110)\n        }, 0.05);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant5 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (this.isIdle && this.zIndexVal !== 1) this.zIndexVal = 1;\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        let dx = this.mousePos.x - this.cacheMousePos.x;\n        let dy = this.mousePos.y - this.cacheMousePos.y;\n        let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n        if (angle < 0) angle += 360;\n        if (angle > 90 && angle <= 270) angle += 180;\n        const isMovingClockwise = angle >= this.lastAngle;\n        this.lastAngle = angle;\n        let startAngle = isMovingClockwise ? angle - 10 : angle + 10;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance !== 0) {\n            dx /= distance;\n            dy /= distance;\n        }\n        dx *= distance / 150;\n        dy *= distance / 150;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            filter: \"brightness(80%)\",\n            scale: 0.1,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2,\n            rotation: startAngle\n        }, {\n            duration: 1,\n            ease: \"power2\",\n            scale: 1,\n            filter: \"brightness(100%)\",\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2 + dx * 70,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2 + dy * 70,\n            rotation: this.lastAngle\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"expo\",\n            opacity: 0\n        }, 0.5).to(img.DOM.el, {\n            duration: 1.5,\n            ease: \"power4\",\n            x: \"+=\".concat(dx * 120),\n            y: \"+=\".concat(dy * 120)\n        }, 0.05);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) this.isIdle = true;\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastAngle = 0;\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant6 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.3);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.3);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) {\n            this.zIndexVal = 1;\n        }\n        requestAnimationFrame(()=>this.render());\n    }\n    mapSpeedToSize(speed, minSize, maxSize) {\n        const maxSpeed = 200;\n        return minSize + (maxSize - minSize) * Math.min(speed / maxSpeed, 1);\n    }\n    mapSpeedToBrightness(speed, minB, maxB) {\n        const maxSpeed = 70;\n        return minB + (maxB - minB) * Math.min(speed / maxSpeed, 1);\n    }\n    mapSpeedToBlur(speed, minBlur, maxBlur) {\n        const maxSpeed = 90;\n        return minBlur + (maxBlur - minBlur) * Math.min(speed / maxSpeed, 1);\n    }\n    mapSpeedToGrayscale(speed, minG, maxG) {\n        const maxSpeed = 90;\n        return minG + (maxG - minG) * Math.min(speed / maxSpeed, 1);\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        const dx = this.mousePos.x - this.cacheMousePos.x;\n        const dy = this.mousePos.y - this.cacheMousePos.y;\n        const speed = Math.sqrt(dx * dx + dy * dy);\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        const scaleFactor = this.mapSpeedToSize(speed, 0.3, 2);\n        const brightnessValue = this.mapSpeedToBrightness(speed, 0, 1.3);\n        const blurValue = this.mapSpeedToBlur(speed, 20, 0);\n        const grayscaleValue = this.mapSpeedToGrayscale(speed, 600, 0);\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            opacity: 1,\n            scale: 0,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.8,\n            ease: \"power3\",\n            scale: scaleFactor,\n            filter: \"grayscale(\".concat(grayscaleValue * 100, \"%) brightness(\").concat(brightnessValue * 100, \"%) blur(\").concat(blurValue, \"px)\"),\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0).fromTo(img.DOM.inner, {\n            scale: 2\n        }, {\n            duration: 0.8,\n            ease: \"power3\",\n            scale: 1\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"power3.in\",\n            opacity: 0,\n            scale: 0.2\n        }, 0.45);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nfunction getNewPosition(position, offset, arr) {\n    const realOffset = Math.abs(offset) % arr.length;\n    if (position - realOffset >= 0) {\n        return position - realOffset;\n    } else {\n        return arr.length - (realOffset - position);\n    }\n}\nclass ImageTrailVariant7 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.3);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.3);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) this.zIndexVal = 1;\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        ++this.visibleImagesCount;\n        gsap.killTweensOf(img.DOM.el);\n        const scaleValue = gsap.utils.random(0.5, 1.6);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).fromTo(img.DOM.el, {\n            scale: scaleValue - Math.max(gsap.utils.random(0.2, 0.6), 0),\n            rotationZ: 0,\n            opacity: 1,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2\n        }, {\n            duration: 0.4,\n            ease: \"power3\",\n            scale: scaleValue,\n            rotationZ: gsap.utils.random(-3, 3),\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2\n        }, 0);\n        if (this.visibleImagesCount >= this.visibleImagesTotal) {\n            const lastInQueue = getNewPosition(this.imgPosition, this.visibleImagesTotal, this.images);\n            const oldImg = this.images[lastInQueue];\n            gsap.to(oldImg.DOM.el, {\n                duration: 0.4,\n                ease: \"power4\",\n                opacity: 0,\n                scale: 1.3,\n                onComplete: ()=>{\n                    if (this.activeImagesCount === 0) {\n                        this.isIdle = true;\n                    }\n                }\n            });\n        }\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.visibleImagesCount = 0;\n        this.visibleImagesTotal = 9;\n        this.visibleImagesTotal = Math.min(this.visibleImagesTotal, this.imagesTotal - 1);\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nclass ImageTrailVariant8 {\n    render() {\n        const distance = getMouseDistance(this.mousePos, this.lastMousePos);\n        this.cacheMousePos.x = lerp(this.cacheMousePos.x, this.mousePos.x, 0.1);\n        this.cacheMousePos.y = lerp(this.cacheMousePos.y, this.mousePos.y, 0.1);\n        if (distance > this.threshold) {\n            this.showNextImage();\n            this.lastMousePos = {\n                ...this.mousePos\n            };\n        }\n        if (this.isIdle && this.zIndexVal !== 1) {\n            this.zIndexVal = 1;\n        }\n        requestAnimationFrame(()=>this.render());\n    }\n    showNextImage() {\n        var _img_rect, _img_rect1, _img_rect2, _img_rect3;\n        const rect = this.container.getBoundingClientRect();\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n        const relX = this.mousePos.x - centerX;\n        const relY = this.mousePos.y - centerY;\n        this.rotation.x = -(relY / centerY) * 30;\n        this.rotation.y = relX / centerX * 30;\n        this.cachedRotation = {\n            ...this.rotation\n        };\n        const distanceFromCenter = Math.sqrt(relX * relX + relY * relY);\n        const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);\n        const proportion = distanceFromCenter / maxDistance;\n        this.zValue = proportion * 1200 - 600;\n        this.cachedZValue = this.zValue;\n        const normalizedZ = (this.zValue + 600) / 1200;\n        const brightness = 0.2 + normalizedZ * 2.3;\n        ++this.zIndexVal;\n        this.imgPosition = this.imgPosition < this.imagesTotal - 1 ? this.imgPosition + 1 : 0;\n        const img = this.images[this.imgPosition];\n        gsap.killTweensOf(img.DOM.el);\n        var _img_rect_width, _img_rect_height, _img_rect_width1, _img_rect_height1;\n        gsap.timeline({\n            onStart: ()=>this.onImageActivated(),\n            onComplete: ()=>this.onImageDeactivated()\n        }).set(this.DOM.el, {\n            perspective: 1000\n        }, 0).fromTo(img.DOM.el, {\n            opacity: 1,\n            z: 0,\n            scale: 1 + this.cachedZValue / 1000,\n            zIndex: this.zIndexVal,\n            x: this.cacheMousePos.x - ((_img_rect_width = (_img_rect = img.rect) === null || _img_rect === void 0 ? void 0 : _img_rect.width) !== null && _img_rect_width !== void 0 ? _img_rect_width : 0) / 2,\n            y: this.cacheMousePos.y - ((_img_rect_height = (_img_rect1 = img.rect) === null || _img_rect1 === void 0 ? void 0 : _img_rect1.height) !== null && _img_rect_height !== void 0 ? _img_rect_height : 0) / 2,\n            rotationX: this.cachedRotation.x,\n            rotationY: this.cachedRotation.y,\n            filter: \"brightness(\".concat(brightness, \")\")\n        }, {\n            duration: 1,\n            ease: \"expo\",\n            scale: 1 + this.zValue / 1000,\n            x: this.mousePos.x - ((_img_rect_width1 = (_img_rect2 = img.rect) === null || _img_rect2 === void 0 ? void 0 : _img_rect2.width) !== null && _img_rect_width1 !== void 0 ? _img_rect_width1 : 0) / 2,\n            y: this.mousePos.y - ((_img_rect_height1 = (_img_rect3 = img.rect) === null || _img_rect3 === void 0 ? void 0 : _img_rect3.height) !== null && _img_rect_height1 !== void 0 ? _img_rect_height1 : 0) / 2,\n            rotationX: this.rotation.x,\n            rotationY: this.rotation.y\n        }, 0).to(img.DOM.el, {\n            duration: 0.4,\n            ease: \"power2\",\n            opacity: 0,\n            z: -800\n        }, 0.3);\n    }\n    onImageActivated() {\n        this.activeImagesCount++;\n        this.isIdle = false;\n    }\n    onImageDeactivated() {\n        this.activeImagesCount--;\n        if (this.activeImagesCount === 0) {\n            this.isIdle = true;\n        }\n    }\n    constructor(container){\n        this.container = container;\n        this.DOM = {\n            el: container\n        };\n        this.images = Array.from(container.querySelectorAll(\".content__img\")).map((img)=>new ImageItem(img));\n        this.imagesTotal = this.images.length;\n        this.imgPosition = 0;\n        this.zIndexVal = 1;\n        this.activeImagesCount = 0;\n        this.isIdle = true;\n        this.threshold = 80;\n        this.mousePos = {\n            x: 0,\n            y: 0\n        };\n        this.lastMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.cacheMousePos = {\n            x: 0,\n            y: 0\n        };\n        this.rotation = {\n            x: 0,\n            y: 0\n        };\n        this.cachedRotation = {\n            x: 0,\n            y: 0\n        };\n        this.zValue = 0;\n        this.cachedZValue = 0;\n        const handlePointerMove = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n        };\n        container.addEventListener(\"mousemove\", handlePointerMove);\n        container.addEventListener(\"touchmove\", handlePointerMove);\n        const initRender = (ev)=>{\n            const rect = container.getBoundingClientRect();\n            this.mousePos = getLocalPointerPos(ev, rect);\n            this.cacheMousePos = {\n                ...this.mousePos\n            };\n            requestAnimationFrame(()=>this.render());\n            container.removeEventListener(\"mousemove\", initRender);\n            container.removeEventListener(\"touchmove\", initRender);\n        };\n        container.addEventListener(\"mousemove\", initRender);\n        container.addEventListener(\"touchmove\", initRender);\n    }\n}\nconst variantMap = {\n    1: ImageTrailVariant1,\n    2: ImageTrailVariant2,\n    3: ImageTrailVariant3,\n    4: ImageTrailVariant4,\n    5: ImageTrailVariant5,\n    6: ImageTrailVariant6,\n    7: ImageTrailVariant7,\n    8: ImageTrailVariant8\n};\nfunction ImageTrail(param) {\n    let { items = [], variant = 1 } = param;\n    _s();\n    var _s1 = $RefreshSig$();\n    const [mousePos, setMousePos] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        x: 0,\n        y: 0\n    });\n    const [isHovered, setIsHovered] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const handleMouseMove = (e)=>{\n        if (!containerRef.current) return;\n        const rect = containerRef.current.getBoundingClientRect();\n        setMousePos({\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full relative z-[100] rounded-lg bg-transparent overflow-visible\",\n        ref: containerRef,\n        onMouseMove: handleMouseMove,\n        onMouseEnter: ()=>setIsHovered(true),\n        onMouseLeave: ()=>setIsHovered(false),\n        children: items.map(_s1((url, i)=>{\n            _s1();\n            const springs = (0,_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring)({\n                from: {\n                    opacity: 0,\n                    scale: 0.8,\n                    x: mousePos.x - 150,\n                    y: mousePos.y - 150\n                },\n                to: {\n                    opacity: isHovered ? 1 : 0,\n                    scale: isHovered ? 1 : 0.8,\n                    x: mousePos.x - 150 + i * 20,\n                    y: mousePos.y - 150 + i * 20\n                },\n                config: {\n                    ..._react_spring_web__WEBPACK_IMPORTED_MODULE_2__.config.gentle,\n                    tension: 200,\n                    friction: 20\n                },\n                delay: i * 100\n            });\n            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.animated.div, {\n                style: springs,\n                className: \"content__img w-[300px] aspect-square rounded-[20px] absolute overflow-hidden shadow-xl\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"content__img-inner bg-center bg-cover w-[calc(100%+40px)] h-[calc(100%+40px)] absolute top-[-20px] left-[-20px]\",\n                    style: {\n                        backgroundImage: \"url(\".concat(url, \")\")\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/ImageTrail.tsx\",\n                    lineNumber: 1215,\n                    columnNumber: 13\n                }, this)\n            }, i, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/ImageTrail.tsx\",\n                lineNumber: 1210,\n                columnNumber: 11\n            }, this);\n        }, \"D+2hZypMOzjSxBghpadlcMd42dw=\", false, function() {\n            return [\n                _react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring\n            ];\n        }))\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/ImageTrail.tsx\",\n        lineNumber: 1184,\n        columnNumber: 5\n    }, this);\n}\n_s(ImageTrail, \"pRnd/Q71wBI7y3+oKixU03KPIw0=\");\n_c = ImageTrail;\nvar _c;\n$RefreshReg$(_c, \"ImageTrail\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/Animations/ImageTrail.tsx\n"));

/***/ })

});