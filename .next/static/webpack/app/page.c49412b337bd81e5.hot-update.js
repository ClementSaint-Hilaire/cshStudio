"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/Animations/AnimatedContent.tsx":
/*!********************************************!*\
  !*** ./src/Animations/AnimatedContent.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_spring_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/web */ \"(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\");\n\nvar _s = $RefreshSig$();\n\n\nconst AnimatedContent = (param)=>{\n    let { children, distance = 100, direction = \"vertical\", reverse = false, config = {\n        tension: 50,\n        friction: 25\n    }, initialOpacity = 0, animateOpacity = true, scale = 1, threshold = 0.1, delay = 0 } = param;\n    _s();\n    const [inView, setInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const element = ref.current;\n        if (!element) return;\n        const observer = new IntersectionObserver((param)=>{\n            let [entry] = param;\n            if (entry.isIntersecting) {\n                observer.unobserve(element);\n                setTimeout(()=>{\n                    setInView(true);\n                }, delay);\n            }\n        }, {\n            threshold\n        });\n        observer.observe(element);\n        return ()=>observer.disconnect();\n    }, [\n        threshold,\n        delay\n    ]);\n    const directions = {\n        vertical: \"Y\",\n        horizontal: \"X\"\n    };\n    const springProps = (0,_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring)({\n        from: {\n            transform: \"translate\".concat(directions[direction], \"(\").concat(reverse ? \"-\".concat(distance, \"px\") : \"\".concat(distance, \"px\"), \") scale(\").concat(scale, \")\"),\n            opacity: animateOpacity ? initialOpacity : 1\n        },\n        to: inView ? {\n            transform: \"translate\".concat(directions[direction], \"(0px) scale(1)\"),\n            opacity: 1\n        } : undefined,\n        config\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.animated.div, {\n        ref: ref,\n        style: springProps,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/AnimatedContent.tsx\",\n        lineNumber: 75,\n        columnNumber: 5\n    }, undefined);\n};\n_s(AnimatedContent, \"EMXQA33323jPruWQyA88T+hT+zo=\", false, function() {\n    return [\n        _react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring\n    ];\n});\n_c = AnimatedContent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (AnimatedContent);\nvar _c;\n$RefreshReg$(_c, \"AnimatedContent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9BbmltYXRpb25zL0FuaW1hdGVkQ29udGVudC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErRDtBQUNPO0FBZXRFLE1BQU1LLGtCQUFrRDtRQUFDLEVBQ3ZEQyxRQUFRLEVBQ1JDLFdBQVcsR0FBRyxFQUNkQyxZQUFZLFVBQVUsRUFDdEJDLFVBQVUsS0FBSyxFQUNmQyxTQUFTO1FBQUVDLFNBQVM7UUFBSUMsVUFBVTtJQUFHLENBQUMsRUFDdENDLGlCQUFpQixDQUFDLEVBQ2xCQyxpQkFBaUIsSUFBSSxFQUNyQkMsUUFBUSxDQUFDLEVBQ1RDLFlBQVksR0FBRyxFQUNmQyxRQUFRLENBQUMsRUFDVjs7SUFDQyxNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR2pCLCtDQUFRQSxDQUFDO0lBQ3JDLE1BQU1rQixNQUFNcEIsNkNBQU1BLENBQXdCO0lBRTFDQyxnREFBU0EsQ0FBQztRQUNSLE1BQU1vQixVQUFVRCxJQUFJRSxPQUFPO1FBQzNCLElBQUksQ0FBQ0QsU0FBUztRQUVkLE1BQU1FLFdBQVcsSUFBSUMscUJBQ25CO2dCQUFDLENBQUNDLE1BQU07WUFDTixJQUFJQSxNQUFNQyxjQUFjLEVBQUU7Z0JBQ3hCSCxTQUFTSSxTQUFTLENBQUNOO2dCQUNuQk8sV0FBVztvQkFDVFQsVUFBVTtnQkFDWixHQUFHRjtZQUNMO1FBQ0YsR0FDQTtZQUFFRDtRQUFVO1FBR2RPLFNBQVNNLE9BQU8sQ0FBQ1I7UUFFakIsT0FBTyxJQUFNRSxTQUFTTyxVQUFVO0lBQ2xDLEdBQUc7UUFBQ2Q7UUFBV0M7S0FBTTtJQUVyQixNQUFNYyxhQUF3RDtRQUM1REMsVUFBVTtRQUNWQyxZQUFZO0lBQ2Q7SUFFQSxNQUFNQyxjQUFjL0IsNERBQVNBLENBQUM7UUFDNUJnQyxNQUFNO1lBQ0pDLFdBQVcsWUFDVDNCLE9BRHFCc0IsVUFBVSxDQUFDdkIsVUFBVSxFQUFDLEtBRWxDTyxPQURUTixVQUFVLElBQWEsT0FBVEYsVUFBUyxRQUFNLEdBQVksT0FBVEEsVUFBUyxPQUMxQyxZQUFnQixPQUFOUSxPQUFNO1lBQ2pCc0IsU0FBU3ZCLGlCQUFpQkQsaUJBQWlCO1FBQzdDO1FBQ0F5QixJQUFJcEIsU0FDQTtZQUNFa0IsV0FBVyxZQUFrQyxPQUF0QkwsVUFBVSxDQUFDdkIsVUFBVSxFQUFDO1lBQzdDNkIsU0FBUztRQUNYLElBQ0FFO1FBQ0o3QjtJQUNGO0lBRUEscUJBQ0UsOERBQUNOLHVEQUFRQSxDQUFDb0MsR0FBRztRQUFDcEIsS0FBS0E7UUFBS3FCLE9BQU9QO2tCQUM1QjVCOzs7Ozs7QUFHUDtHQTlETUQ7O1FBeUNnQkYsd0RBQVNBOzs7S0F6Q3pCRTtBQWdFTiwrREFBZUEsZUFBZUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvQW5pbWF0aW9ucy9BbmltYXRlZENvbnRlbnQudHN4PzFiNjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNwcmluZywgYW5pbWF0ZWQsIFNwcmluZ0NvbmZpZyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3dlYlwiO1xuXG5pbnRlcmZhY2UgQW5pbWF0ZWRDb250ZW50UHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBkaXN0YW5jZT86IG51bWJlcjtcbiAgZGlyZWN0aW9uPzogXCJ2ZXJ0aWNhbFwiIHwgXCJob3Jpem9udGFsXCI7XG4gIHJldmVyc2U/OiBib29sZWFuO1xuICBjb25maWc/OiBTcHJpbmdDb25maWc7XG4gIGluaXRpYWxPcGFjaXR5PzogbnVtYmVyO1xuICBhbmltYXRlT3BhY2l0eT86IGJvb2xlYW47XG4gIHNjYWxlPzogbnVtYmVyO1xuICB0aHJlc2hvbGQ/OiBudW1iZXI7XG4gIGRlbGF5PzogbnVtYmVyO1xufVxuXG5jb25zdCBBbmltYXRlZENvbnRlbnQ6IFJlYWN0LkZDPEFuaW1hdGVkQ29udGVudFByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICBkaXN0YW5jZSA9IDEwMCxcbiAgZGlyZWN0aW9uID0gXCJ2ZXJ0aWNhbFwiLFxuICByZXZlcnNlID0gZmFsc2UsXG4gIGNvbmZpZyA9IHsgdGVuc2lvbjogNTAsIGZyaWN0aW9uOiAyNSB9LFxuICBpbml0aWFsT3BhY2l0eSA9IDAsXG4gIGFuaW1hdGVPcGFjaXR5ID0gdHJ1ZSxcbiAgc2NhbGUgPSAxLFxuICB0aHJlc2hvbGQgPSAwLjEsXG4gIGRlbGF5ID0gMCxcbn0pID0+IHtcbiAgY29uc3QgW2luVmlldywgc2V0SW5WaWV3XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50IHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm47XG5cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcbiAgICAgIChbZW50cnldKSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNldEluVmlldyh0cnVlKTtcbiAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IHRocmVzaG9sZCB9XG4gICAgKTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9LCBbdGhyZXNob2xkLCBkZWxheV0pO1xuXG4gIGNvbnN0IGRpcmVjdGlvbnM6IFJlY29yZDxcInZlcnRpY2FsXCIgfCBcImhvcml6b250YWxcIiwgc3RyaW5nPiA9IHtcbiAgICB2ZXJ0aWNhbDogXCJZXCIsXG4gICAgaG9yaXpvbnRhbDogXCJYXCIsXG4gIH07XG5cbiAgY29uc3Qgc3ByaW5nUHJvcHMgPSB1c2VTcHJpbmcoe1xuICAgIGZyb206IHtcbiAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSR7ZGlyZWN0aW9uc1tkaXJlY3Rpb25dfSgke1xuICAgICAgICByZXZlcnNlID8gYC0ke2Rpc3RhbmNlfXB4YCA6IGAke2Rpc3RhbmNlfXB4YFxuICAgICAgfSkgc2NhbGUoJHtzY2FsZX0pYCxcbiAgICAgIG9wYWNpdHk6IGFuaW1hdGVPcGFjaXR5ID8gaW5pdGlhbE9wYWNpdHkgOiAxLFxuICAgIH0sXG4gICAgdG86IGluVmlld1xuICAgICAgPyB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlJHtkaXJlY3Rpb25zW2RpcmVjdGlvbl19KDBweCkgc2NhbGUoMSlgLFxuICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkLFxuICAgIGNvbmZpZyxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8YW5pbWF0ZWQuZGl2IHJlZj17cmVmfSBzdHlsZT17c3ByaW5nUHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvYW5pbWF0ZWQuZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0ZWRDb250ZW50O1xuIl0sIm5hbWVzIjpbInVzZVJlZiIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlU3ByaW5nIiwiYW5pbWF0ZWQiLCJBbmltYXRlZENvbnRlbnQiLCJjaGlsZHJlbiIsImRpc3RhbmNlIiwiZGlyZWN0aW9uIiwicmV2ZXJzZSIsImNvbmZpZyIsInRlbnNpb24iLCJmcmljdGlvbiIsImluaXRpYWxPcGFjaXR5IiwiYW5pbWF0ZU9wYWNpdHkiLCJzY2FsZSIsInRocmVzaG9sZCIsImRlbGF5IiwiaW5WaWV3Iiwic2V0SW5WaWV3IiwicmVmIiwiZWxlbWVudCIsImN1cnJlbnQiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInVub2JzZXJ2ZSIsInNldFRpbWVvdXQiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImRpcmVjdGlvbnMiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJzcHJpbmdQcm9wcyIsImZyb20iLCJ0cmFuc2Zvcm0iLCJvcGFjaXR5IiwidG8iLCJ1bmRlZmluZWQiLCJkaXYiLCJzdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/Animations/AnimatedContent.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/heroSection.tsx":
/*!****************************************!*\
  !*** ./src/components/heroSection.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/Animations/AnimatedContent */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst BLUR_FADE_DELAY = 0.04;\nconst HeroSection = ()=>{\n    _s();\n    const [activeSection, setActiveSection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"For anyone\");\n    const content = {\n        \"For anyone\": '<span>Hello there, I\\'m \\n      <span style=\"color: #0a84ff;\">Cl\\xe9ment Saint-Hilaire</span> \\n      a french \\n      digital creator who cares about making beautiful\\n      things that help people.\\n      </span>',\n        designer: \"I'm a systems thinker with a high bar for quality. From process to pixels, I'll collaborate with you, learn from you, and help make something we're proud of.\",\n        developer: '<span>I\\'m {highly_technical} and while (I\\'m ≠ engineer) I know my way /around & can speak \"fluently\" with you; I built (this.site) but feel free to visit my <a href=\"https://github.com/ClementSaint-Hilaire\"><span style=\"color: #0a84ff;\">[Github]</span></a>.</span>',\n        recruiters: '<span>I\\'m a french designer with 4 years of experience accross brand & products, at compagny large and small. You can download my resume  <a href=\"/home/resume_Clement_SAINT-HILAIRE.pdf\"><span style=\"color: #0a84ff;\">here</span></a>.</span>',\n        CM: \"I currently serve as the CM for both Wattiz and Skorpia.fr. While It's not my speciality, I know my way around and know the do & don't.\",\n        \"mom & Dad\": \"I do magic stuff on my computer to make the internet look better. <br/>And yes I ate my vegetables already...\"\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"justify-center flex flex-col w-full max-w-[1680px] h-[85vh] max-h-[1000px] mx-auto\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col justify-center items-center w-full mx-auto\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                    lineNumber: 34,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-full max-w-[600px] flex flex-col items-start gap-[16px] inline-flex\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full items-center inline-flex overflow-scroll scroll-smooth gap-[32px]\",\n                            children: Object.keys(content).map((key)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    onClick: ()=>setActiveSection(key),\n                                    className: \"font-satoshi text-subbody cursor-pointer flex flex-none transition-colors \".concat(activeSection === key ? \"text-monochrome-800 \" : \"text-monochrome-500 hover:text-monochrome-600\"),\n                                    children: key.charAt(0).toUpperCase() + key.slice(1)\n                                }, key, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                                    lineNumber: 39,\n                                    columnNumber: 15\n                                }, undefined))\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                            lineNumber: 37,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"font-satoshi text-body text-monochrome-800 font-medium leading-[22px]\",\n                            dangerouslySetInnerHTML: {\n                                __html: content[activeSection]\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                            lineNumber: 53,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                    lineNumber: 36,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n            lineNumber: 33,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n        lineNumber: 31,\n        columnNumber: 5\n    }, undefined);\n};\n_s(HeroSection, \"Kxo63WzDBSvd1Xp6zEVpCqRzDWc=\");\n_c = HeroSection;\n/* harmony default export */ __webpack_exports__[\"default\"] = (HeroSection);\nvar _c;\n$RefreshReg$(_c, \"HeroSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2hlcm9TZWN0aW9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ2lDO0FBQzBCO0FBRTNELE1BQU1FLGtCQUFrQjtBQUV4QixNQUFNQyxjQUFjOztJQUNsQixNQUFNLENBQUNDLGVBQWVDLGlCQUFpQixHQUFHTCwrQ0FBUUEsQ0FBQztJQUVuRCxNQUFNTSxVQUFxQztRQUN6QyxjQUNHO1FBTUhDLFVBQ0U7UUFDRkMsV0FDRztRQUNIQyxZQUNHO1FBQ0hDLElBQ0U7UUFDRixhQUNFO0lBQ0o7SUFFQSxxQkFDRSw4REFBQ0M7UUFBSUMsV0FBVTtrQkFFYiw0RUFBQ0Q7WUFBSUMsV0FBVTs7OEJBQ2IsOERBQUNYLG1FQUFlQTs7Ozs7OEJBRWhCLDhEQUFDVTtvQkFBSUMsV0FBVTs7c0NBQ2IsOERBQUNEOzRCQUFJQyxXQUFVO3NDQUNaQyxPQUFPQyxJQUFJLENBQUNSLFNBQVNTLEdBQUcsQ0FBQyxDQUFDQyxvQkFDekIsOERBQUNMO29DQUVDTSxTQUFTLElBQU1aLGlCQUFpQlc7b0NBQ2hDSixXQUFXLDZFQUlWLE9BSENSLGtCQUFrQlksTUFDZCx5QkFDQTs4Q0FHTEEsSUFBSUUsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0gsSUFBSUksS0FBSyxDQUFDO21DQVJwQ0o7Ozs7Ozs7Ozs7c0NBYVQsOERBQUNMOzRCQUNDQyxXQUFVOzRCQUNWUyx5QkFBeUI7Z0NBQUVDLFFBQVFoQixPQUFPLENBQUNGLGNBQWM7NEJBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT3hFO0dBdkRNRDtLQUFBQTtBQXlETiwrREFBZUEsV0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9oZXJvU2VjdGlvbi50c3g/NTNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQW5pbWF0ZWRDb250ZW50IGZyb20gXCJAL0FuaW1hdGlvbnMvQW5pbWF0ZWRDb250ZW50XCI7XG5cbmNvbnN0IEJMVVJfRkFERV9ERUxBWSA9IDAuMDQ7XG5cbmNvbnN0IEhlcm9TZWN0aW9uID0gKCkgPT4ge1xuICBjb25zdCBbYWN0aXZlU2VjdGlvbiwgc2V0QWN0aXZlU2VjdGlvbl0gPSB1c2VTdGF0ZShcIkZvciBhbnlvbmVcIik7XG5cbiAgY29uc3QgY29udGVudDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICBcIkZvciBhbnlvbmVcIiA6IFxuICAgICAgYDxzcGFuPkhlbGxvIHRoZXJlLCBJJ20gXG4gICAgICA8c3BhbiBzdHlsZT1cImNvbG9yOiAjMGE4NGZmO1wiPkNsw6ltZW50IFNhaW50LUhpbGFpcmU8L3NwYW4+IFxuICAgICAgYSBmcmVuY2ggXG4gICAgICBkaWdpdGFsIGNyZWF0b3Igd2hvIGNhcmVzIGFib3V0IG1ha2luZyBiZWF1dGlmdWxcbiAgICAgIHRoaW5ncyB0aGF0IGhlbHAgcGVvcGxlLlxuICAgICAgPC9zcGFuPmAsXG4gICAgZGVzaWduZXI6XG4gICAgICBcIkknbSBhIHN5c3RlbXMgdGhpbmtlciB3aXRoIGEgaGlnaCBiYXIgZm9yIHF1YWxpdHkuIEZyb20gcHJvY2VzcyB0byBwaXhlbHMsIEknbGwgY29sbGFib3JhdGUgd2l0aCB5b3UsIGxlYXJuIGZyb20geW91LCBhbmQgaGVscCBtYWtlIHNvbWV0aGluZyB3ZSdyZSBwcm91ZCBvZi5cIixcbiAgICBkZXZlbG9wZXI6XG4gICAgICBgPHNwYW4+SSdtIHtoaWdobHlfdGVjaG5pY2FsfSBhbmQgd2hpbGUgKEknbSDiiaAgZW5naW5lZXIpIEkga25vdyBteSB3YXkgL2Fyb3VuZCAmIGNhbiBzcGVhayBcImZsdWVudGx5XCIgd2l0aCB5b3U7IEkgYnVpbHQgKHRoaXMuc2l0ZSkgYnV0IGZlZWwgZnJlZSB0byB2aXNpdCBteSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL0NsZW1lbnRTYWludC1IaWxhaXJlXCI+PHNwYW4gc3R5bGU9XCJjb2xvcjogIzBhODRmZjtcIj5bR2l0aHViXTwvc3Bhbj48L2E+Ljwvc3Bhbj5gLFxuICAgIHJlY3J1aXRlcnM6XG4gICAgICBgPHNwYW4+SSdtIGEgZnJlbmNoIGRlc2lnbmVyIHdpdGggNCB5ZWFycyBvZiBleHBlcmllbmNlIGFjY3Jvc3MgYnJhbmQgJiBwcm9kdWN0cywgYXQgY29tcGFnbnkgbGFyZ2UgYW5kIHNtYWxsLiBZb3UgY2FuIGRvd25sb2FkIG15IHJlc3VtZSAgPGEgaHJlZj1cIi9ob21lL3Jlc3VtZV9DbGVtZW50X1NBSU5ULUhJTEFJUkUucGRmXCI+PHNwYW4gc3R5bGU9XCJjb2xvcjogIzBhODRmZjtcIj5oZXJlPC9zcGFuPjwvYT4uPC9zcGFuPmAsXG4gICAgQ006IFxuICAgICAgXCJJIGN1cnJlbnRseSBzZXJ2ZSBhcyB0aGUgQ00gZm9yIGJvdGggV2F0dGl6IGFuZCBTa29ycGlhLmZyLiBXaGlsZSBJdCdzIG5vdCBteSBzcGVjaWFsaXR5LCBJIGtub3cgbXkgd2F5IGFyb3VuZCBhbmQga25vdyB0aGUgZG8gJiBkb24ndC5cIixcbiAgICBcIm1vbSAmIERhZFwiOiBcbiAgICAgIFwiSSBkbyBtYWdpYyBzdHVmZiBvbiBteSBjb21wdXRlciB0byBtYWtlIHRoZSBpbnRlcm5ldCBsb29rIGJldHRlci4gPGJyLz5BbmQgeWVzIEkgYXRlIG15IHZlZ2V0YWJsZXMgYWxyZWFkeS4uLlwiLFxuICB9O1xuICBcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImp1c3RpZnktY2VudGVyIGZsZXggZmxleC1jb2wgdy1mdWxsIG1heC13LVsxNjgwcHhdIGgtWzg1dmhdIG1heC1oLVsxMDAwcHhdIG14LWF1dG9cIj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LWZ1bGwgbXgtYXV0b1wiPlxuICAgICAgICA8QW5pbWF0ZWRDb250ZW50Lz5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBtYXgtdy1bNjAwcHhdIGZsZXggZmxleC1jb2wgaXRlbXMtc3RhcnQgZ2FwLVsxNnB4XSBpbmxpbmUtZmxleFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy1mdWxsIGl0ZW1zLWNlbnRlciBpbmxpbmUtZmxleCBvdmVyZmxvdy1zY3JvbGwgc2Nyb2xsLXNtb290aCBnYXAtWzMycHhdXCI+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoY29udGVudCkubWFwKChrZXkpID0+IChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEFjdGl2ZVNlY3Rpb24oa2V5KX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Bmb250LXNhdG9zaGkgdGV4dC1zdWJib2R5IGN1cnNvci1wb2ludGVyIGZsZXggZmxleC1ub25lIHRyYW5zaXRpb24tY29sb3JzICR7XG4gICAgICAgICAgICAgICAgICBhY3RpdmVTZWN0aW9uID09PSBrZXlcbiAgICAgICAgICAgICAgICAgICAgPyBcInRleHQtbW9ub2Nocm9tZS04MDAgXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcInRleHQtbW9ub2Nocm9tZS01MDAgaG92ZXI6dGV4dC1tb25vY2hyb21lLTYwMFwiXG4gICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7a2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9udC1zYXRvc2hpIHRleHQtYm9keSB0ZXh0LW1vbm9jaHJvbWUtODAwIGZvbnQtbWVkaXVtIGxlYWRpbmctWzIycHhdXCJcbiAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBjb250ZW50W2FjdGl2ZVNlY3Rpb25dIH19XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZXJvU2VjdGlvbjsiXSwibmFtZXMiOlsidXNlU3RhdGUiLCJBbmltYXRlZENvbnRlbnQiLCJCTFVSX0ZBREVfREVMQVkiLCJIZXJvU2VjdGlvbiIsImFjdGl2ZVNlY3Rpb24iLCJzZXRBY3RpdmVTZWN0aW9uIiwiY29udGVudCIsImRlc2lnbmVyIiwiZGV2ZWxvcGVyIiwicmVjcnVpdGVycyIsIkNNIiwiZGl2IiwiY2xhc3NOYW1lIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsIm9uQ2xpY2siLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/heroSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animated: function() { return /* binding */ Animated; },\n/* harmony export */   AnimatedArray: function() { return /* binding */ AnimatedArray; },\n/* harmony export */   AnimatedObject: function() { return /* binding */ AnimatedObject; },\n/* harmony export */   AnimatedString: function() { return /* binding */ AnimatedString; },\n/* harmony export */   AnimatedValue: function() { return /* binding */ AnimatedValue; },\n/* harmony export */   createHost: function() { return /* binding */ createHost; },\n/* harmony export */   getAnimated: function() { return /* binding */ getAnimated; },\n/* harmony export */   getAnimatedType: function() { return /* binding */ getAnimatedType; },\n/* harmony export */   getPayload: function() { return /* binding */ getPayload; },\n/* harmony export */   isAnimated: function() { return /* binding */ isAnimated; },\n/* harmony export */   setAnimated: function() { return /* binding */ setAnimated; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// src/Animated.ts\n\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = (value)=>!!value && value[$node] === value;\nvar getAnimated = (owner)=>owner && owner[$node];\nvar setAnimated = (owner, node)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.defineHidden)(owner, $node, node);\nvar getPayload = (owner)=>owner && owner[$node] && owner[$node].getPayload();\nvar Animated = class {\n    /** Get every `AnimatedValue` used by this node. */ getPayload() {\n        return this.payload || [];\n    }\n    constructor(){\n        setAnimated(this, this);\n    }\n};\n// src/AnimatedValue.ts\n\nvar AnimatedValue = class extends Animated {\n    /** @internal */ static create(value) {\n        return new AnimatedValue(value);\n    }\n    getPayload() {\n        return [\n            this\n        ];\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value, step) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(value)) {\n            this.lastPosition = value;\n            if (step) {\n                value = Math.round(value / step) * step;\n                if (this.done) {\n                    this.lastPosition = value;\n                }\n            }\n        }\n        if (this._value === value) {\n            return false;\n        }\n        this._value = value;\n        return true;\n    }\n    reset() {\n        const { done } = this;\n        this.done = false;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.elapsedTime = 0;\n            this.durationProgress = 0;\n            this.lastPosition = this._value;\n            if (done) this.lastVelocity = null;\n            this.v0 = null;\n        }\n    }\n    constructor(_value){\n        super();\n        this._value = _value;\n        this.done = true;\n        this.durationProgress = 0;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.lastPosition = this._value;\n        }\n    }\n};\n// src/AnimatedString.ts\n\nvar AnimatedString = class extends AnimatedValue {\n    /** @internal */ static create(value) {\n        return new AnimatedString(value);\n    }\n    getValue() {\n        const value = this._string;\n        return value == null ? this._string = this._toString(this._value) : value;\n    }\n    setValue(value) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(value)) {\n            if (value == this._string) {\n                return false;\n            }\n            this._string = value;\n            this._value = 1;\n        } else if (super.setValue(value)) {\n            this._string = null;\n        } else {\n            return false;\n        }\n        return true;\n    }\n    reset(goal) {\n        if (goal) {\n            this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n                output: [\n                    this.getValue(),\n                    goal\n                ]\n            });\n        }\n        this._value = 0;\n        super.reset();\n    }\n    constructor(value){\n        super(0);\n        this._string = null;\n        this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n            output: [\n                value,\n                value\n            ]\n        });\n    }\n};\n// src/AnimatedArray.ts\n\n// src/AnimatedObject.ts\n\n// src/context.ts\nvar TreeContext = {\n    dependencies: null\n};\n// src/AnimatedObject.ts\nvar AnimatedObject = class extends Animated {\n    getValue(animated) {\n        const values = {};\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.source, (source, key)=>{\n            if (isAnimated(source)) {\n                values[key] = source.getValue(animated);\n            } else if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                values[key] = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(source);\n            } else if (!animated) {\n                values[key] = source;\n            }\n        });\n        return values;\n    }\n    /** Replace the raw object data */ setValue(source) {\n        this.source = source;\n        this.payload = this._makePayload(source);\n    }\n    reset() {\n        if (this.payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(this.payload, (node)=>node.reset());\n        }\n    }\n    /** Create a payload set. */ _makePayload(source) {\n        if (source) {\n            const payload = /* @__PURE__ */ new Set();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(source, this._addToPayload, payload);\n            return Array.from(payload);\n        }\n    }\n    /** Add to a payload set. */ _addToPayload(source) {\n        if (TreeContext.dependencies && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n            TreeContext.dependencies.add(source);\n        }\n        const payload = getPayload(source);\n        if (payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(payload, (node)=>this.add(node));\n        }\n    }\n    constructor(source){\n        super();\n        this.source = source;\n        this.setValue(source);\n    }\n};\n// src/AnimatedArray.ts\nvar AnimatedArray = class extends AnimatedObject {\n    /** @internal */ static create(source) {\n        return new AnimatedArray(source);\n    }\n    getValue() {\n        return this.source.map((node)=>node.getValue());\n    }\n    setValue(source) {\n        const payload = this.getPayload();\n        if (source.length == payload.length) {\n            return payload.map((node, i)=>node.setValue(source[i])).some(Boolean);\n        }\n        super.setValue(source.map(makeAnimated));\n        return true;\n    }\n    constructor(source){\n        super(source);\n    }\n};\nfunction makeAnimated(value) {\n    const nodeType = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n    return nodeType.create(value);\n}\n// src/getAnimatedType.ts\n\nfunction getAnimatedType(value) {\n    const parentNode = getAnimated(value);\n    return parentNode ? parentNode.constructor : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? AnimatedArray : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n}\n// src/createHost.ts\n\n// src/withAnimated.tsx\n\n\n\nvar withAnimated = (Component, host)=>{\n    var _s = $RefreshSig$();\n    const hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s((givenProps, givenRef)=>{\n        _s();\n        const instanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((value)=>{\n            instanceRef.current = updateRef(givenRef, value);\n        }, [\n            givenRef\n        ]);\n        const [props, deps] = getAnimatedState(givenProps, host);\n        const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n        const callback = ()=>{\n            const instance = instanceRef.current;\n            if (hasInstance && !instance) {\n                return;\n            }\n            const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n            if (didUpdate === false) {\n                forceUpdate();\n            }\n        };\n        const observer = new PropsObserver(callback, deps);\n        const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n            observerRef.current = observer;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(dep, observer));\n            return ()=>{\n                if (observerRef.current) {\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observerRef.current.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observerRef.current));\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(observerRef.current.update);\n                }\n            };\n        });\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(callback, []);\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n                const observer2 = observerRef.current;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observer2.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observer2));\n            });\n        const usedProps = host.getComponentProps(props.getValue());\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, {\n            ...usedProps,\n            ref\n        });\n    }, \"Ap8f+txA57fFyfyEQgJjd7YWyo8=\", false, function() {\n        return [\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n        ];\n    }));\n};\nvar PropsObserver = class {\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.write(this.update);\n        }\n    }\n    constructor(update, deps){\n        this.update = update;\n        this.deps = deps;\n    }\n};\nfunction getAnimatedState(props, host) {\n    const dependencies = /* @__PURE__ */ new Set();\n    TreeContext.dependencies = dependencies;\n    if (props.style) props = {\n        ...props,\n        style: host.createAnimatedStyle(props.style)\n    };\n    props = new AnimatedObject(props);\n    TreeContext.dependencies = null;\n    return [\n        props,\n        dependencies\n    ];\n}\nfunction updateRef(ref, value) {\n    if (ref) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(ref)) ref(value);\n        else ref.current = value;\n    }\n    return value;\n}\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function(components) {\n    let { applyAnimatedValues = ()=>false, createAnimatedStyle = (style)=>new AnimatedObject(style), getComponentProps = (props)=>props } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const hostConfig = {\n        applyAnimatedValues,\n        createAnimatedStyle,\n        getComponentProps\n    };\n    const animated = (Component)=>{\n        const displayName = getDisplayName(Component) || \"Anonymous\";\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(Component)) {\n            Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n        } else {\n            Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n        }\n        Component.displayName = \"Animated(\".concat(displayName, \")\");\n        return Component;\n    };\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(components, (Component, key)=>{\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(components)) {\n            key = getDisplayName(Component);\n        }\n        animated[key] = animated(Component);\n    });\n    return {\n        animated\n    };\n};\nvar getDisplayName = (arg)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg) ? arg : arg && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg.displayName) ? arg.displayName : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) && arg.name || null;\n //# sourceMappingURL=react-spring_animated.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_types__WEBPACK_IMPORTED_MODULE_3__.Any; },\n/* harmony export */   BailSignal: function() { return /* binding */ BailSignal; },\n/* harmony export */   Controller: function() { return /* binding */ Controller; },\n/* harmony export */   FrameValue: function() { return /* binding */ FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* binding */ Interpolation; },\n/* harmony export */   Spring: function() { return /* binding */ Spring; },\n/* harmony export */   SpringContext: function() { return /* binding */ SpringContext; },\n/* harmony export */   SpringRef: function() { return /* binding */ SpringRef; },\n/* harmony export */   SpringValue: function() { return /* binding */ SpringValue; },\n/* harmony export */   Trail: function() { return /* binding */ Trail; },\n/* harmony export */   Transition: function() { return /* binding */ Transition; },\n/* harmony export */   config: function() { return /* binding */ config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* binding */ inferTo; },\n/* harmony export */   interpolate: function() { return /* binding */ interpolate; },\n/* harmony export */   to: function() { return /* binding */ to; },\n/* harmony export */   update: function() { return /* binding */ update; },\n/* harmony export */   useChain: function() { return /* binding */ useChain; },\n/* harmony export */   useInView: function() { return /* binding */ useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* binding */ useResize; },\n/* harmony export */   useScroll: function() { return /* binding */ useScroll; },\n/* harmony export */   useSpring: function() { return /* binding */ useSpring; },\n/* harmony export */   useSpringRef: function() { return /* binding */ useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* binding */ useSpringValue; },\n/* harmony export */   useSprings: function() { return /* binding */ useSprings; },\n/* harmony export */   useTrail: function() { return /* binding */ useTrail; },\n/* harmony export */   useTransition: function() { return /* binding */ useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n/* harmony import */ var _react_spring_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/types */ \"(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\");\n// src/hooks/useChain.ts\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$();\n\n// src/helpers.ts\n\nfunction callProp(value) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(...args) : value;\n}\nvar matchProp = (value, key)=>value === true || !!(key && value && (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(key) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(value).includes(key)));\nvar resolveProp = (prop, key)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(prop) ? key && prop[key] : prop;\nvar getDefaultProp = (props, key)=>props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nvar noopTransform = (value)=>value;\nvar getDefaultProps = function(props) {\n    let transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noopTransform;\n    let keys = DEFAULT_PROPS;\n    if (props.default && props.default !== true) {\n        props = props.default;\n        keys = Object.keys(props);\n    }\n    const defaults2 = {};\n    for (const key of keys){\n        const value = transform(props[key], key);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            defaults2[key] = value;\n        }\n    }\n    return defaults2;\n};\nvar DEFAULT_PROPS = [\n    \"config\",\n    \"onProps\",\n    \"onStart\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\",\n    \"onRest\"\n];\nvar RESERVED_PROPS = {\n    config: 1,\n    from: 1,\n    to: 1,\n    ref: 1,\n    loop: 1,\n    reset: 1,\n    pause: 1,\n    cancel: 1,\n    reverse: 1,\n    immediate: 1,\n    default: 1,\n    delay: 1,\n    onProps: 1,\n    onStart: 1,\n    onChange: 1,\n    onPause: 1,\n    onResume: 1,\n    onRest: 1,\n    onResolve: 1,\n    // Transition props\n    items: 1,\n    trail: 1,\n    sort: 1,\n    expires: 1,\n    initial: 1,\n    enter: 1,\n    update: 1,\n    leave: 1,\n    children: 1,\n    onDestroyed: 1,\n    // Internal props\n    keys: 1,\n    callId: 1,\n    parentId: 1\n};\nfunction getForwardProps(props) {\n    const forward = {};\n    let count = 0;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (value, prop)=>{\n        if (!RESERVED_PROPS[prop]) {\n            forward[prop] = value;\n            count++;\n        }\n    });\n    if (count) {\n        return forward;\n    }\n}\nfunction inferTo(props) {\n    const to2 = getForwardProps(props);\n    if (to2) {\n        const out = {\n            to: to2\n        };\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (val, key)=>key in to2 || (out[key] = val));\n        return out;\n    }\n    return {\n        ...props\n    };\n}\nfunction computeGoal(value) {\n    value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(value);\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? value.map(computeGoal) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.createStringInterpolator({\n        range: [\n            0,\n            1\n        ],\n        output: [\n            value,\n            value\n        ]\n    })(1) : value;\n}\nfunction hasProps(props) {\n    for(const _ in props)return true;\n    return false;\n}\nfunction isAsyncTo(to2) {\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2[0]);\n}\nfunction detachRefs(ctrl, ref) {\n    var _ctrl_ref;\n    (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n    ref === null || ref === void 0 ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n    if (ref && ctrl.ref !== ref) {\n        var _ctrl_ref;\n        (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n        ref.add(ctrl);\n        ctrl.ref = ref;\n    }\n}\n// src/hooks/useChain.ts\nfunction useChain(refs, timeSteps) {\n    let timeFrame = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;\n    _s();\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (timeSteps) {\n            let prevDelay = 0;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref, i)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    let delay = timeFrame * timeSteps[i];\n                    if (isNaN(delay)) delay = prevDelay;\n                    else prevDelay = delay;\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl)=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrl.queue, (props)=>{\n                            const memoizedDelayProp = props.delay;\n                            props.delay = (key)=>delay + callProp(memoizedDelayProp || 0, key);\n                        });\n                    });\n                    ref.start();\n                }\n            });\n        } else {\n            let p = Promise.resolve();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    const queues = controllers.map((ctrl)=>{\n                        const q = ctrl.queue;\n                        ctrl.queue = [];\n                        return q;\n                    });\n                    p = p.then(()=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl, i)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queues[i] || [], (update2)=>ctrl.queue.push(update2)));\n                        return Promise.all(ref.start());\n                    });\n                }\n            });\n        }\n    });\n}\n_s(useChain, \"Vd+jpwighRca2oU8HoLqd+zm4Bo=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useSpring.ts\n\n// src/hooks/useSprings.ts\n\n\n// src/SpringValue.ts\n\n\n// src/AnimationConfig.ts\n\n// src/constants.ts\nvar config = {\n    default: {\n        tension: 170,\n        friction: 26\n    },\n    gentle: {\n        tension: 120,\n        friction: 14\n    },\n    wobbly: {\n        tension: 180,\n        friction: 12\n    },\n    stiff: {\n        tension: 210,\n        friction: 20\n    },\n    slow: {\n        tension: 280,\n        friction: 60\n    },\n    molasses: {\n        tension: 280,\n        friction: 120\n    }\n};\n// src/AnimationConfig.ts\nvar defaults = {\n    ...config.default,\n    mass: 1,\n    damping: 1,\n    easing: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings.linear,\n    clamp: false\n};\nvar AnimationConfig = class {\n    constructor(){\n        /**\n     * The initial velocity of one or more values.\n     *\n     * @default 0\n     */ this.velocity = 0;\n        Object.assign(this, defaults);\n    }\n};\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n    if (defaultConfig) {\n        defaultConfig = {\n            ...defaultConfig\n        };\n        sanitizeConfig(defaultConfig, newConfig);\n        newConfig = {\n            ...defaultConfig,\n            ...newConfig\n        };\n    }\n    sanitizeConfig(config2, newConfig);\n    Object.assign(config2, newConfig);\n    for(const key in defaults){\n        if (config2[key] == null) {\n            config2[key] = defaults[key];\n        }\n    }\n    let { frequency, damping } = config2;\n    const { mass } = config2;\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(frequency)) {\n        if (frequency < 0.01) frequency = 0.01;\n        if (damping < 0) damping = 0;\n        config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n        config2.friction = 4 * Math.PI * damping * mass / frequency;\n    }\n    return config2;\n}\nfunction sanitizeConfig(config2, props) {\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.decay)) {\n        config2.duration = void 0;\n    } else {\n        const isTensionConfig = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.tension) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.friction);\n        if (isTensionConfig || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.frequency) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.damping) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.mass)) {\n            config2.duration = void 0;\n            config2.decay = void 0;\n        }\n        if (isTensionConfig) {\n            config2.frequency = void 0;\n        }\n    }\n}\n// src/Animation.ts\nvar emptyArray = [];\nvar Animation = class {\n    constructor(){\n        this.changed = false;\n        this.values = emptyArray;\n        this.toValues = null;\n        this.fromValues = emptyArray;\n        this.config = new AnimationConfig();\n        this.immediate = false;\n    }\n};\n// src/scheduleProps.ts\n\nfunction scheduleProps(callId, param) {\n    let { key, props, defaultProps, state, actions } = param;\n    return new Promise((resolve, reject)=>{\n        let delay;\n        let timeout;\n        var _props_cancel;\n        let cancel = matchProp((_props_cancel = props.cancel) !== null && _props_cancel !== void 0 ? _props_cancel : defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.cancel, key);\n        if (cancel) {\n            onStart();\n        } else {\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.pause)) {\n                state.paused = matchProp(props.pause, key);\n            }\n            let pause = defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.pause;\n            if (pause !== true) {\n                pause = state.paused || matchProp(pause, key);\n            }\n            delay = callProp(props.delay || 0, key);\n            if (pause) {\n                state.resumeQueue.add(onResume);\n                actions.pause();\n            } else {\n                actions.resume();\n                onResume();\n            }\n        }\n        function onPause() {\n            state.resumeQueue.add(onResume);\n            state.timeouts.delete(timeout);\n            timeout.cancel();\n            delay = timeout.time - _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.now();\n        }\n        function onResume() {\n            if (delay > 0 && !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                state.delayed = true;\n                timeout = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.setTimeout(onStart, delay);\n                state.pauseQueue.add(onPause);\n                state.timeouts.add(timeout);\n            } else {\n                onStart();\n            }\n        }\n        function onStart() {\n            if (state.delayed) {\n                state.delayed = false;\n            }\n            state.pauseQueue.delete(onPause);\n            state.timeouts.delete(timeout);\n            if (callId <= (state.cancelId || 0)) {\n                cancel = true;\n            }\n            try {\n                actions.start({\n                    ...props,\n                    callId,\n                    cancel\n                }, resolve);\n            } catch (err) {\n                reject(err);\n            }\n        }\n    });\n}\n// src/runAsync.ts\n\n// src/AnimationResult.ts\nvar getCombinedResult = (target, results)=>results.length == 1 ? results[0] : results.some((result)=>result.cancelled) ? getCancelledResult(target.get()) : results.every((result)=>result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result)=>result.finished));\nvar getNoopResult = (value)=>({\n        value,\n        noop: true,\n        finished: true,\n        cancelled: false\n    });\nvar getFinishedResult = function(value, finished) {\n    let cancelled = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return {\n        value,\n        finished,\n        cancelled\n    };\n};\nvar getCancelledResult = (value)=>({\n        value,\n        cancelled: true,\n        finished: false\n    });\n// src/runAsync.ts\nfunction runAsync(to2, props, state, target) {\n    const { callId, parentId, onRest } = props;\n    const { asyncTo: prevTo, promise: prevPromise } = state;\n    if (!parentId && to2 === prevTo && !props.reset) {\n        return prevPromise;\n    }\n    return state.promise = (async ()=>{\n        state.asyncId = callId;\n        state.asyncTo = to2;\n        const defaultProps = getDefaultProps(props, (value, key)=>// The `onRest` prop is only called when the `runAsync` promise is resolved.\n            key === \"onRest\" ? void 0 : value);\n        let preventBail;\n        let bail;\n        const bailPromise = new Promise((resolve, reject)=>(preventBail = resolve, bail = reject));\n        const bailIfEnded = (bailSignal)=>{\n            const bailResult = // The `cancel` prop or `stop` method was used.\n            callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n            callId !== state.asyncId && getFinishedResult(target, false);\n            if (bailResult) {\n                bailSignal.result = bailResult;\n                bail(bailSignal);\n                throw bailSignal;\n            }\n        };\n        const animate = (arg1, arg2)=>{\n            const bailSignal = new BailSignal();\n            const skipAnimationSignal = new SkipAnimationSignal();\n            return (async ()=>{\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                    stopAsync(state);\n                    skipAnimationSignal.result = getFinishedResult(target, false);\n                    bail(skipAnimationSignal);\n                    throw skipAnimationSignal;\n                }\n                bailIfEnded(bailSignal);\n                const props2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                    ...arg1\n                } : {\n                    ...arg2,\n                    to: arg1\n                };\n                props2.parentId = callId;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(defaultProps, (value, key)=>{\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2[key])) {\n                        props2[key] = value;\n                    }\n                });\n                const result2 = await target.start(props2);\n                bailIfEnded(bailSignal);\n                if (state.paused) {\n                    await new Promise((resume)=>{\n                        state.resumeQueue.add(resume);\n                    });\n                }\n                return result2;\n            })();\n        };\n        let result;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            stopAsync(state);\n            return getFinishedResult(target, false);\n        }\n        try {\n            let animating;\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2)) {\n                animating = (async (queue)=>{\n                    for (const props2 of queue){\n                        await animate(props2);\n                    }\n                })(to2);\n            } else {\n                animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n            }\n            await Promise.all([\n                animating.then(preventBail),\n                bailPromise\n            ]);\n            result = getFinishedResult(target.get(), true, false);\n        } catch (err) {\n            if (err instanceof BailSignal) {\n                result = err.result;\n            } else if (err instanceof SkipAnimationSignal) {\n                result = err.result;\n            } else {\n                throw err;\n            }\n        } finally{\n            if (callId == state.asyncId) {\n                state.asyncId = parentId;\n                state.asyncTo = parentId ? prevTo : void 0;\n                state.promise = parentId ? prevPromise : void 0;\n            }\n        }\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(onRest)) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                onRest(result, target, target.item);\n            });\n        }\n        return result;\n    })();\n}\nfunction stopAsync(state, cancelId) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(state.timeouts, (t)=>t.cancel());\n    state.pauseQueue.clear();\n    state.resumeQueue.clear();\n    state.asyncId = state.asyncTo = state.promise = void 0;\n    if (cancelId) state.cancelId = cancelId;\n}\nvar BailSignal = class extends Error {\n    constructor(){\n        super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n    }\n};\nvar SkipAnimationSignal = class extends Error {\n    constructor(){\n        super(\"SkipAnimationSignal\");\n    }\n};\n// src/FrameValue.ts\n\n\nvar isFrameValue = (value)=>value instanceof FrameValue;\nvar nextId = 1;\nvar FrameValue = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.FluidValue {\n    get priority() {\n        return this._priority;\n    }\n    set priority(priority) {\n        if (this._priority != priority) {\n            this._priority = priority;\n            this._onPriorityChange(priority);\n        }\n    }\n    /** Get the current value */ get() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node && node.getValue();\n    }\n    /** Create a spring that maps our value to another value */ to() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    /** @deprecated Use the `to` method instead. */ interpolate() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)();\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    toJSON() {\n        return this.get();\n    }\n    observerAdded(count) {\n        if (count == 1) this._attach();\n    }\n    observerRemoved(count) {\n        if (count == 0) this._detach();\n    }\n    /** Called when the first child is added. */ _attach() {}\n    /** Called when the last child is removed. */ _detach() {}\n    /** Tell our children about our new value */ _onChange(value) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"change\",\n            parent: this,\n            value,\n            idle\n        });\n    }\n    /** Tell our children about our new priority */ _onPriorityChange(priority) {\n        if (!this.idle) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.sort(this);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"priority\",\n            parent: this,\n            priority\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.id = nextId++;\n        this._priority = 0;\n    }\n};\n// src/SpringPhase.ts\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\nvar hasAnimated = (target)=>(target[$P] & HAS_ANIMATED) > 0;\nvar isAnimating = (target)=>(target[$P] & IS_ANIMATING) > 0;\nvar isPaused = (target)=>(target[$P] & IS_PAUSED) > 0;\nvar setActiveBit = (target, active)=>active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nvar setPausedBit = (target, paused)=>paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n// src/SpringValue.ts\nvar SpringValue = class extends FrameValue {\n    /** Equals true when not advancing on each frame. */ get idle() {\n        return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n    get goal() {\n        return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.animation.to);\n    }\n    get velocity() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node instanceof _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2)=>node2.lastVelocity || 0);\n    }\n    /**\n   * When true, this value has been animated at least once.\n   */ get hasAnimated() {\n        return hasAnimated(this);\n    }\n    /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */ get isAnimating() {\n        return isAnimating(this);\n    }\n    /**\n   * When true, all current and future animations are paused.\n   */ get isPaused() {\n        return isPaused(this);\n    }\n    /**\n   *\n   *\n   */ get isDelayed() {\n        return this._state.delayed;\n    }\n    /** Advance the current animation by a number of milliseconds */ advance(dt) {\n        let idle = true;\n        let changed = false;\n        const anim = this.animation;\n        let { toValues } = anim;\n        const { config: config2 } = anim;\n        const payload = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(anim.to);\n        if (!payload && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(anim.to)) {\n            toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        }\n        anim.values.forEach((node2, i)=>{\n            if (node2.done) return;\n            const to2 = // Animated strings always go from 0 to 1.\n            node2.constructor == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n            let finished = anim.immediate;\n            let position = to2;\n            if (!finished) {\n                position = node2.lastPosition;\n                if (config2.tension <= 0) {\n                    node2.done = true;\n                    return;\n                }\n                let elapsed = node2.elapsedTime += dt;\n                const from = anim.fromValues[i];\n                const v0 = node2.v0 != null ? node2.v0 : node2.v0 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n                let velocity;\n                const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n                if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(config2.duration)) {\n                    let p = 1;\n                    if (config2.duration > 0) {\n                        if (this._memoizedDuration !== config2.duration) {\n                            this._memoizedDuration = config2.duration;\n                            if (node2.durationProgress > 0) {\n                                node2.elapsedTime = config2.duration * node2.durationProgress;\n                                elapsed = node2.elapsedTime += dt;\n                            }\n                        }\n                        p = (config2.progress || 0) + elapsed / this._memoizedDuration;\n                        p = p > 1 ? 1 : p < 0 ? 0 : p;\n                        node2.durationProgress = p;\n                    }\n                    position = from + config2.easing(p) * (to2 - from);\n                    velocity = (position - node2.lastPosition) / dt;\n                    finished = p == 1;\n                } else if (config2.decay) {\n                    const decay = config2.decay === true ? 0.998 : config2.decay;\n                    const e = Math.exp(-(1 - decay) * elapsed);\n                    position = from + v0 / (1 - decay) * (1 - e);\n                    finished = Math.abs(node2.lastPosition - position) <= precision;\n                    velocity = v0 * e;\n                } else {\n                    velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n                    const restVelocity = config2.restVelocity || precision / 10;\n                    const bounceFactor = config2.clamp ? 0 : config2.bounce;\n                    const canBounce = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(bounceFactor);\n                    const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n                    let isMoving;\n                    let isBouncing = false;\n                    const step = 1;\n                    const numSteps = Math.ceil(dt / step);\n                    for(let n = 0; n < numSteps; ++n){\n                        isMoving = Math.abs(velocity) > restVelocity;\n                        if (!isMoving) {\n                            finished = Math.abs(to2 - position) <= precision;\n                            if (finished) {\n                                break;\n                            }\n                        }\n                        if (canBounce) {\n                            isBouncing = position == to2 || position > to2 == isGrowing;\n                            if (isBouncing) {\n                                velocity = -velocity * bounceFactor;\n                                position = to2;\n                            }\n                        }\n                        const springForce = -config2.tension * 1e-6 * (position - to2);\n                        const dampingForce = -config2.friction * 1e-3 * velocity;\n                        const acceleration = (springForce + dampingForce) / config2.mass;\n                        velocity = velocity + acceleration * step;\n                        position = position + velocity * step;\n                    }\n                }\n                node2.lastVelocity = velocity;\n                if (Number.isNaN(position)) {\n                    console.warn(\"Got NaN while animating:\", this);\n                    finished = true;\n                }\n            }\n            if (payload && !payload[i].done) {\n                finished = false;\n            }\n            if (finished) {\n                node2.done = true;\n            } else {\n                idle = false;\n            }\n            if (node2.setValue(position, config2.round)) {\n                changed = true;\n            }\n        });\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        const currVal = node.getValue();\n        if (idle) {\n            const finalVal = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to);\n            if ((currVal !== finalVal || changed) && !config2.decay) {\n                node.setValue(finalVal);\n                this._onChange(finalVal);\n            } else if (changed && config2.decay) {\n                this._onChange(currVal);\n            }\n            this._stop();\n        } else if (changed) {\n            this._onChange(currVal);\n        }\n    }\n    /** Set the current value, while stopping the current animation */ set(value) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n            this._stop();\n            this._focus(value);\n            this._set(value);\n        });\n        return this;\n    }\n    /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */ pause() {\n        this._update({\n            pause: true\n        });\n    }\n    /** Resume the animation if paused. */ resume() {\n        this._update({\n            pause: false\n        });\n    }\n    /** Skip to the end of the current animation. */ finish() {\n        if (isAnimating(this)) {\n            const { to: to2, config: config2 } = this.animation;\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                this._onStart();\n                if (!config2.decay) {\n                    this._set(to2, false);\n                }\n                this._stop();\n            });\n        }\n        return this;\n    }\n    /** Push props into the pending queue. */ update(props) {\n        const queue = this.queue || (this.queue = []);\n        queue.push(props);\n        return this;\n    }\n    start(to2, arg2) {\n        let queue;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            queue = [\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2 : {\n                    ...arg2,\n                    to: to2\n                }\n            ];\n        } else {\n            queue = this.queue || [];\n            this.queue = [];\n        }\n        return Promise.all(queue.map((props)=>{\n            const up = this._update(props);\n            return up;\n        })).then((results)=>getCombinedResult(this, results));\n    }\n    /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */ stop(cancel) {\n        const { to: to2 } = this.animation;\n        this._focus(this.get());\n        stopAsync(this._state, cancel && this._lastCallId);\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this._stop(to2, cancel));\n        return this;\n    }\n    /** Restart the animation. */ reset() {\n        this._update({\n            reset: true\n        });\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._start();\n        } else if (event.type == \"priority\") {\n            this.priority = event.priority + 1;\n        }\n    }\n    /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */ _prepareNode(props) {\n        const key = this.key || \"\";\n        let { to: to2, from } = props;\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2[key] : to2;\n        if (to2 == null || isAsyncTo(to2)) {\n            to2 = void 0;\n        }\n        from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from) ? from[key] : from;\n        if (from == null) {\n            from = void 0;\n        }\n        const range = {\n            to: to2,\n            from\n        };\n        if (!hasAnimated(this)) {\n            if (props.reverse) [to2, from] = [\n                from,\n                to2\n            ];\n            from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from)) {\n                this._set(from);\n            } else if (!(0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this)) {\n                this._set(to2);\n            }\n        }\n        return range;\n    }\n    /** Every update is processed by this method before merging. */ _update(param, isLoop) {\n        let { ...props } = param;\n        const { key, defaultProps } = this;\n        if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop)=>/^on/.test(prop) ? resolveProp(value, key) : value));\n        mergeActiveFn(this, props, \"onProps\");\n        sendEvent(this, \"onProps\", props, this);\n        const range = this._prepareNode(props);\n        if (Object.isFrozen(this)) {\n            throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n        }\n        const state = this._state;\n        return scheduleProps(++this._lastCallId, {\n            key,\n            props,\n            defaultProps,\n            state,\n            actions: {\n                pause: ()=>{\n                    if (!isPaused(this)) {\n                        setPausedBit(this, true);\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.pauseQueue);\n                        sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                resume: ()=>{\n                    if (isPaused(this)) {\n                        setPausedBit(this, false);\n                        if (isAnimating(this)) {\n                            this._resume();\n                        }\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.resumeQueue);\n                        sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                start: this._merge.bind(this, range)\n            }\n        }).then((result)=>{\n            if (props.loop && result.finished && !(isLoop && result.noop)) {\n                const nextProps = createLoopUpdate(props);\n                if (nextProps) {\n                    return this._update(nextProps, true);\n                }\n            }\n            return result;\n        });\n    }\n    /** Merge props into the current animation */ _merge(range, props, resolve) {\n        if (props.cancel) {\n            this.stop(true);\n            return resolve(getCancelledResult(this));\n        }\n        const hasToProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.to);\n        const hasFromProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.from);\n        if (hasToProp || hasFromProp) {\n            if (props.callId > this._lastToId) {\n                this._lastToId = props.callId;\n            } else {\n                return resolve(getCancelledResult(this));\n            }\n        }\n        const { key, defaultProps, animation: anim } = this;\n        const { to: prevTo, from: prevFrom } = anim;\n        let { to: to2 = prevTo, from = prevFrom } = range;\n        if (hasFromProp && !hasToProp && (!props.default || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2))) {\n            to2 = from;\n        }\n        if (props.reverse) [to2, from] = [\n            from,\n            to2\n        ];\n        const hasFromChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(from, prevFrom);\n        if (hasFromChanged) {\n            anim.from = from;\n        }\n        from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n        const hasToChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(to2, prevTo);\n        if (hasToChanged) {\n            this._focus(to2);\n        }\n        const hasAsyncTo = isAsyncTo(props.to);\n        const { config: config2 } = anim;\n        const { decay, velocity } = config2;\n        if (hasToProp || hasFromProp) {\n            config2.velocity = 0;\n        }\n        if (props.config && !hasAsyncTo) {\n            mergeConfig(config2, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n            props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n        }\n        let node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        if (!node || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            return resolve(getFinishedResult(this, true));\n        }\n        const reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n        // except for declarative updates. When `reset` is defined, there\n        // must exist a value to animate from.\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.reset) ? hasFromProp && !props.default : !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from) && matchProp(props.reset, key);\n        const value = reset ? from : this.get();\n        const goal = computeGoal(to2);\n        const isAnimatable = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(goal) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(goal) || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(goal);\n        const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n        if (hasToChanged) {\n            const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(to2);\n            if (nodeType !== node.constructor) {\n                if (immediate) {\n                    node = this._set(goal);\n                } else throw Error(\"Cannot animate between \".concat(node.constructor.name, \" and \").concat(nodeType.name, ', as the \"to\" prop suggests'));\n            }\n        }\n        const goalType = node.constructor;\n        let started = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2);\n        let finished = false;\n        if (!started) {\n            const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n            if (hasToChanged || hasValueChanged) {\n                finished = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(computeGoal(value), goal);\n                started = !finished;\n            }\n            if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(anim.immediate, immediate) && !immediate || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.decay, decay) || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.velocity, velocity)) {\n                started = true;\n            }\n        }\n        if (finished && isAnimating(this)) {\n            if (anim.changed && !reset) {\n                started = true;\n            } else if (!started) {\n                this._stop(prevTo);\n            }\n        }\n        if (!hasAsyncTo) {\n            if (started || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(prevTo)) {\n                anim.values = node.getPayload();\n                anim.toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2) ? null : goalType == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? [\n                    1\n                ] : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(goal);\n            }\n            if (anim.immediate != immediate) {\n                anim.immediate = immediate;\n                if (!immediate && !reset) {\n                    this._set(prevTo);\n                }\n            }\n            if (started) {\n                const { onRest } = anim;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ACTIVE_EVENTS, (type)=>mergeActiveFn(this, props, type));\n                const result = getFinishedResult(this, checkFinished(this, prevTo));\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n                this._pendingCalls.add(resolve);\n                if (anim.changed) _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                    anim.changed = !reset;\n                    onRest === null || onRest === void 0 ? void 0 : onRest(result, this);\n                    if (reset) {\n                        callProp(defaultProps.onRest, result);\n                    } else {\n                        var _anim_onStart;\n                        (_anim_onStart = anim.onStart) === null || _anim_onStart === void 0 ? void 0 : _anim_onStart.call(anim, result, this);\n                    }\n                });\n            }\n        }\n        if (reset) {\n            this._set(value);\n        }\n        if (hasAsyncTo) {\n            resolve(runAsync(props.to, props, this._state, this));\n        } else if (started) {\n            this._start();\n        } else if (isAnimating(this) && !hasToChanged) {\n            this._pendingCalls.add(resolve);\n        } else {\n            resolve(getNoopResult(value));\n        }\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */ _focus(value) {\n        const anim = this.animation;\n        if (value !== anim.to) {\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._detach();\n            }\n            anim.to = value;\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._attach();\n            }\n        }\n    }\n    _attach() {\n        let priority = 0;\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(to2, this);\n            if (isFrameValue(to2)) {\n                priority = to2.priority + 1;\n            }\n        }\n        this.priority = priority;\n    }\n    _detach() {\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(to2, this);\n        }\n    }\n    /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */ _set(arg) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        const value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(arg);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            const oldNode = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n            if (!oldNode || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldNode.getValue())) {\n                const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n                if (!oldNode || oldNode.constructor != nodeType) {\n                    (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n                } else {\n                    oldNode.setValue(value);\n                }\n                if (oldNode) {\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                        this._onChange(value, idle);\n                    });\n                }\n            }\n        }\n        return (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n    }\n    _onStart() {\n        const anim = this.animation;\n        if (!anim.changed) {\n            anim.changed = true;\n            sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n        }\n    }\n    _onChange(value, idle) {\n        if (!idle) {\n            this._onStart();\n            callProp(this.animation.onChange, value, this);\n        }\n        callProp(this.defaultProps.onChange, value, this);\n        super._onChange(value, idle);\n    }\n    // This method resets the animation state (even if already animating) to\n    // ensure the latest from/to range is used, and it also ensures this spring\n    // is added to the frameloop.\n    _start() {\n        const anim = this.animation;\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).reset((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        if (!anim.immediate) {\n            anim.fromValues = anim.values.map((node)=>node.lastPosition);\n        }\n        if (!isAnimating(this)) {\n            setActiveBit(this, true);\n            if (!isPaused(this)) {\n                this._resume();\n            }\n        }\n    }\n    _resume() {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            this.finish();\n        } else {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n        }\n    }\n    /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */ _stop(goal, cancel) {\n        if (isAnimating(this)) {\n            setActiveBit(this, false);\n            const anim = this.animation;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(anim.values, (node)=>{\n                node.done = true;\n            });\n            if (anim.toValues) {\n                anim.onChange = anim.onPause = anim.onResume = void 0;\n            }\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n                type: \"idle\",\n                parent: this\n            });\n            const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal !== null && goal !== void 0 ? goal : anim.to));\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n            if (anim.changed) {\n                anim.changed = false;\n                sendEvent(this, \"onRest\", result, this);\n            }\n        }\n    }\n    constructor(arg1, arg2){\n        super();\n        /** The animation state */ this.animation = new Animation();\n        /** Some props have customizable default values */ this.defaultProps = {};\n        /** The state for `runAsync` calls */ this._state = {\n            paused: false,\n            delayed: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The promise resolvers of pending `start` calls */ this._pendingCalls = /* @__PURE__ */ new Set();\n        /** The counter for tracking `scheduleProps` calls */ this._lastCallId = 0;\n        /** The last `scheduleProps` call that changed the `to` prop */ this._lastToId = 0;\n        this._memoizedDuration = 0;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg1) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg2)) {\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                ...arg1\n            } : {\n                ...arg2,\n                from: arg1\n            };\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.default)) {\n                props.default = true;\n            }\n            this.start(props);\n        }\n    }\n};\nfunction checkFinished(target, to2) {\n    const goal = computeGoal(to2);\n    const value = computeGoal(target.get());\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, goal);\n}\nfunction createLoopUpdate(props) {\n    let loop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : props.loop, to2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : props.to;\n    const loopRet = callProp(loop);\n    if (loopRet) {\n        const overrides = loopRet !== true && inferTo(loopRet);\n        const reverse = (overrides || props).reverse;\n        const reset = !overrides || overrides.reset;\n        return createUpdate({\n            ...props,\n            loop,\n            // Avoid updating default props when looping.\n            default: false,\n            // Never loop the `pause` prop.\n            pause: void 0,\n            // For the \"reverse\" prop to loop as expected, the \"to\" prop\n            // must be undefined. The \"reverse\" prop is ignored when the\n            // \"to\" prop is an array or function.\n            to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n            // Ignore the \"from\" prop except on reset.\n            from: reset ? props.from : void 0,\n            reset,\n            // The \"loop\" prop can return a \"useSpring\" props object to\n            // override any of the original props.\n            ...overrides\n        });\n    }\n}\nfunction createUpdate(props) {\n    const { to: to2, from } = props = inferTo(props);\n    const keys = /* @__PURE__ */ new Set();\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2)) findDefined(to2, keys);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from)) findDefined(from, keys);\n    props.keys = keys.size ? Array.from(keys) : null;\n    return props;\n}\nfunction declareUpdate(props) {\n    const update2 = createUpdate(props);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(update2.default)) {\n        update2.default = getDefaultProps(update2);\n    }\n    return update2;\n}\nfunction findDefined(values, keys) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(values, (value, key)=>value != null && keys.add(key));\n}\nvar ACTIVE_EVENTS = [\n    \"onStart\",\n    \"onRest\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var _target_animation_type, _target_animation, _target_defaultProps_type, _target_defaultProps;\n    (_target_animation_type = (_target_animation = target.animation)[type]) === null || _target_animation_type === void 0 ? void 0 : _target_animation_type.call(_target_animation, ...args);\n    (_target_defaultProps_type = (_target_defaultProps = target.defaultProps)[type]) === null || _target_defaultProps_type === void 0 ? void 0 : _target_defaultProps_type.call(_target_defaultProps, ...args);\n}\n// src/Controller.ts\n\nvar BATCHED_EVENTS = [\n    \"onStart\",\n    \"onChange\",\n    \"onRest\"\n];\nvar nextId2 = 1;\nvar Controller = class {\n    /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */ get idle() {\n        return !this._state.asyncTo && Object.values(this.springs).every((spring)=>{\n            return spring.idle && !spring.isDelayed && !spring.isPaused;\n        });\n    }\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        this._item = item;\n    }\n    /** Get the current values of our springs */ get() {\n        const values = {};\n        this.each((spring, key)=>values[key] = spring.get());\n        return values;\n    }\n    /** Set the current values without animating. */ set(values) {\n        for(const key in values){\n            const value = values[key];\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n                this.springs[key].set(value);\n            }\n        }\n    }\n    /** Push an update onto the queue of each value. */ update(props) {\n        if (props) {\n            this.queue.push(createUpdate(props));\n        }\n        return this;\n    }\n    /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */ start(props) {\n        let { queue } = this;\n        if (props) {\n            queue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props).map(createUpdate);\n        } else {\n            this.queue = [];\n        }\n        if (this._flush) {\n            return this._flush(this, queue);\n        }\n        prepareKeys(this, queue);\n        return flushUpdateQueue(this, queue);\n    }\n    /** @internal */ stop(arg, keys) {\n        if (arg !== !!arg) {\n            keys = arg;\n        }\n        if (keys) {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].stop(!!arg));\n        } else {\n            stopAsync(this._state, this._lastAsyncId);\n            this.each((spring)=>spring.stop(!!arg));\n        }\n        return this;\n    }\n    /** Freeze the active animation in time */ pause(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: true\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].pause());\n        }\n        return this;\n    }\n    /** Resume the animation if paused. */ resume(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: false\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].resume());\n        }\n        return this;\n    }\n    /** Call a function once per spring value */ each(iterator) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.springs, iterator);\n    }\n    /** @internal Called at the end of every animation frame */ _onFrame() {\n        const { onStart, onChange, onRest } = this._events;\n        const active = this._active.size > 0;\n        const changed = this._changed.size > 0;\n        if (active && !this._started || changed && !this._started) {\n            this._started = true;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onStart, (param)=>{\n                let [onStart2, result] = param;\n                result.value = this.get();\n                onStart2(result, this, this._item);\n            });\n        }\n        const idle = !active && this._started;\n        const values = changed || idle && onRest.size ? this.get() : null;\n        if (changed && onChange.size) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onChange, (param)=>{\n                let [onChange2, result] = param;\n                result.value = values;\n                onChange2(result, this, this._item);\n            });\n        }\n        if (idle) {\n            this._started = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onRest, (param)=>{\n                let [onRest2, result] = param;\n                result.value = values;\n                onRest2(result, this, this._item);\n            });\n        }\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._changed.add(event.parent);\n            if (!event.idle) {\n                this._active.add(event.parent);\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else return;\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(this._onFrame);\n    }\n    constructor(props, flush3){\n        this.id = nextId2++;\n        /** The animated values */ this.springs = {};\n        /** The queue of props passed to the `update` method. */ this.queue = [];\n        /** The counter for tracking `scheduleProps` calls */ this._lastAsyncId = 0;\n        /** The values currently being animated */ this._active = /* @__PURE__ */ new Set();\n        /** The values that changed recently */ this._changed = /* @__PURE__ */ new Set();\n        /** Equals false when `onStart` listeners can be called */ this._started = false;\n        /** State used by the `runAsync` function */ this._state = {\n            paused: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The event queues that are flushed once per frame maximum */ this._events = {\n            onStart: /* @__PURE__ */ new Map(),\n            onChange: /* @__PURE__ */ new Map(),\n            onRest: /* @__PURE__ */ new Map()\n        };\n        this._onFrame = this._onFrame.bind(this);\n        if (flush3) {\n            this._flush = flush3;\n        }\n        if (props) {\n            this.start({\n                default: true,\n                ...props\n            });\n        }\n    }\n};\nfunction flushUpdateQueue(ctrl, queue) {\n    return Promise.all(queue.map((props)=>flushUpdate(ctrl, props))).then((results)=>getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n    const { keys, to: to2, from, loop, onRest, onResolve } = props;\n    const defaults2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props.default) && props.default;\n    if (loop) {\n        props.loop = false;\n    }\n    if (to2 === false) props.to = null;\n    if (from === false) props.from = null;\n    const asyncTo = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) ? to2 : void 0;\n    if (asyncTo) {\n        props.to = void 0;\n        props.onRest = void 0;\n        if (defaults2) {\n            defaults2.onRest = void 0;\n        }\n    } else {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(BATCHED_EVENTS, (key)=>{\n            const handler = props[key];\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(handler)) {\n                const queue = ctrl[\"_events\"][key];\n                props[key] = (param)=>{\n                    let { finished, cancelled } = param;\n                    const result2 = queue.get(handler);\n                    if (result2) {\n                        if (!finished) result2.finished = false;\n                        if (cancelled) result2.cancelled = true;\n                    } else {\n                        queue.set(handler, {\n                            value: null,\n                            finished: finished || false,\n                            cancelled: cancelled || false\n                        });\n                    }\n                };\n                if (defaults2) {\n                    defaults2[key] = props[key];\n                }\n            }\n        });\n    }\n    const state = ctrl[\"_state\"];\n    if (props.pause === !state.paused) {\n        state.paused = props.pause;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(props.pause ? state.pauseQueue : state.resumeQueue);\n    } else if (state.paused) {\n        props.pause = true;\n    }\n    const promises = (keys || Object.keys(ctrl.springs)).map((key)=>ctrl.springs[key].start(props));\n    const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n    if (asyncTo || cancel && state.asyncId) {\n        promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n            props,\n            state,\n            actions: {\n                pause: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                resume: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                start (props2, resolve) {\n                    if (cancel) {\n                        stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                        resolve(getCancelledResult(ctrl));\n                    } else {\n                        props2.onRest = onRest;\n                        resolve(runAsync(asyncTo, props2, state, ctrl));\n                    }\n                }\n            }\n        }));\n    }\n    if (state.paused) {\n        await new Promise((resume)=>{\n            state.resumeQueue.add(resume);\n        });\n    }\n    const result = getCombinedResult(ctrl, await Promise.all(promises));\n    if (loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props, loop, to2);\n        if (nextProps) {\n            prepareKeys(ctrl, [\n                nextProps\n            ]);\n            return flushUpdate(ctrl, nextProps, true);\n        }\n    }\n    if (onResolve) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>onResolve(result, ctrl, ctrl.item));\n    }\n    return result;\n}\nfunction getSprings(ctrl, props) {\n    const springs = {\n        ...ctrl.springs\n    };\n    if (props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props), (props2)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2.keys)) {\n                props2 = createUpdate(props2);\n            }\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props2.to)) {\n                props2 = {\n                    ...props2,\n                    to: void 0\n                };\n            }\n            prepareSprings(springs, props2, (key)=>{\n                return createSpring(key);\n            });\n        });\n    }\n    setSprings(ctrl, springs);\n    return springs;\n}\nfunction setSprings(ctrl, springs) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(springs, (spring, key)=>{\n        if (!ctrl.springs[key]) {\n            ctrl.springs[key] = spring;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, ctrl);\n        }\n    });\n}\nfunction createSpring(key, observer) {\n    const spring = new SpringValue();\n    spring.key = key;\n    if (observer) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, observer);\n    }\n    return spring;\n}\nfunction prepareSprings(springs, props, create) {\n    if (props.keys) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(props.keys, (key)=>{\n            const spring = springs[key] || (springs[key] = create(key));\n            spring[\"_prepareNode\"](props);\n        });\n    }\n}\nfunction prepareKeys(ctrl, queue) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (props)=>{\n        prepareSprings(ctrl.springs, props, (key)=>{\n            return createSpring(key, ctrl);\n        });\n    });\n}\n// src/SpringContext.tsx\n\n\n\nvar SpringContext = (param)=>{\n    let { children, ...props } = param;\n    _s1();\n    const inherited = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ctx);\n    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n    props = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne)(()=>({\n            pause,\n            immediate\n        }), [\n        pause,\n        immediate\n    ]);\n    const { Provider } = ctx;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Provider, {\n        value: props\n    }, children);\n};\n_s1(SpringContext, \"iAoqMYsYmgTC4tx7ORbDhJzNWJE=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne\n    ];\n});\n_c = SpringContext;\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n    Object.assign(target, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(init));\n    target.Provider._context = target;\n    target.Consumer._context = target;\n    return target;\n}\n// src/SpringRef.ts\n\nvar SpringRef = ()=>{\n    const current = [];\n    const SpringRef2 = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateDirectCall)();\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = _getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.current = current;\n    SpringRef2.add = function(ctrl) {\n        if (!current.includes(ctrl)) {\n            current.push(ctrl);\n        }\n    };\n    SpringRef2.delete = function(ctrl) {\n        const i = current.indexOf(ctrl);\n        if (~i) current.splice(i, 1);\n    };\n    SpringRef2.pause = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.pause(...arguments));\n        return this;\n    };\n    SpringRef2.resume = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.resume(...arguments));\n        return this;\n    };\n    SpringRef2.set = function(values) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            const update2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(values) ? values(i, ctrl) : values;\n            if (update2) {\n                ctrl.set(update2);\n            }\n        });\n    };\n    SpringRef2.start = function(props) {\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = this._getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.stop = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.stop(...arguments));\n        return this;\n    };\n    SpringRef2.update = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>ctrl.update(this._getProps(props, ctrl, i)));\n        return this;\n    };\n    const _getProps = function(arg, ctrl, index) {\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) ? arg(index, ctrl) : arg;\n    };\n    SpringRef2._getProps = _getProps;\n    return SpringRef2;\n};\n_c1 = SpringRef;\n// src/hooks/useSprings.ts\nfunction useSprings(length, props, deps) {\n    _s2();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    if (propsFn && !deps) deps = [];\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const layoutId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            ctrls: [],\n            queue: [],\n            flush (ctrl, updates2) {\n                const springs2 = getSprings(ctrl, updates2);\n                const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key)=>!ctrl.springs[key]);\n                return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve)=>{\n                    setSprings(ctrl, springs2);\n                    state.queue.push(()=>{\n                        resolve(flushUpdateQueue(ctrl, updates2));\n                    });\n                    forceUpdate();\n                });\n            }\n        }), []);\n    const ctrls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([\n        ...state.ctrls\n    ]);\n    const updates = [];\n    const prevLength = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(length) || 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current.slice(length, prevLength), (ctrl)=>{\n            detachRefs(ctrl, ref);\n            ctrl.stop(true);\n        });\n        ctrls.current.length = length;\n        declareUpdates(prevLength, length);\n    }, [\n        length\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        declareUpdates(0, Math.min(prevLength, length));\n    }, deps);\n    function declareUpdates(startIndex, endIndex) {\n        for(let i = startIndex; i < endIndex; i++){\n            const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n            const update2 = propsFn ? propsFn(i, ctrl) : props[i];\n            if (update2) {\n                updates[i] = declareUpdate(update2);\n            }\n        }\n    }\n    const springs = ctrls.current.map((ctrl, i)=>getSprings(ctrl, updates[i]));\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        layoutId.current++;\n        state.ctrls = ctrls.current;\n        const { queue } = state;\n        if (queue.length) {\n            state.queue = [];\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (cb)=>cb());\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current, (ctrl, i)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            const update2 = updates[i];\n            if (update2) {\n                replaceRef(ctrl, update2.ref);\n                if (ctrl.ref) {\n                    ctrl.queue.push(update2);\n                } else {\n                    ctrl.start(update2);\n                }\n            }\n        });\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(state.ctrls, (ctrl)=>ctrl.stop(true));\n        });\n    const values = springs.map((x)=>({\n            ...x\n        }));\n    return ref ? [\n        values,\n        ref\n    ] : values;\n}\n_s2(useSprings, \"hYYBNj8i3sOeF76E+RzhO8u7udI=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useSpring.ts\nfunction useSpring(props, deps) {\n    _s3();\n    const isFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props);\n    const [[values], ref] = useSprings(1, isFn ? props : [\n        props\n    ], isFn ? deps || [] : deps);\n    return isFn || arguments.length == 2 ? [\n        values,\n        ref\n    ] : values;\n}\n_s3(useSpring, \"SDMMI4TeIG06gbUyDm+G9xb8npc=\", false, function() {\n    return [\n        useSprings\n    ];\n});\n// src/hooks/useSpringRef.ts\n\nvar initSpringRef = ()=>SpringRef();\nvar useSpringRef = ()=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initSpringRef)[0];\n};\n_s4(useSpringRef, \"WMYQrW8aTW5m34e+VWfswQ7OC0U=\");\n// src/hooks/useSpringValue.ts\n\nvar useSpringValue = (initial, props)=>{\n    _s5();\n    const springValue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant)(()=>new SpringValue(initial, props));\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            springValue.stop();\n        });\n    return springValue;\n};\n_s5(useSpringValue, \"hGrzQbJ6TUSsox7ygS/NDs7Qfw4=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useTrail.ts\n\nfunction useTrail(length, propsArg, deps) {\n    _s6();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg) && propsArg;\n    if (propsFn && !deps) deps = [];\n    let reverse = true;\n    let passedRef = void 0;\n    const result = useSprings(length, (i, ctrl)=>{\n        const props = propsFn ? propsFn(i, ctrl) : propsArg;\n        passedRef = props.ref;\n        reverse = reverse && props.reverse;\n        return props;\n    }, // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [\n        {}\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(result[1].current, (ctrl, i)=>{\n            const parent = result[1].current[i + (reverse ? 1 : -1)];\n            replaceRef(ctrl, passedRef);\n            if (ctrl.ref) {\n                if (parent) {\n                    ctrl.update({\n                        to: parent.springs\n                    });\n                }\n                return;\n            }\n            if (parent) {\n                ctrl.start({\n                    to: parent.springs\n                });\n            } else {\n                ctrl.start();\n            }\n        });\n    }, deps);\n    if (propsFn || arguments.length == 3) {\n        const ref = passedRef !== null && passedRef !== void 0 ? passedRef : result[1];\n        ref[\"_getProps\"] = (propsArg2, ctrl, i)=>{\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n            if (props) {\n                const parent = ref.current[i + (props.reverse ? 1 : -1)];\n                if (parent) props.to = parent.springs;\n                return props;\n            }\n        };\n        return result;\n    }\n    return result[0];\n}\n_s6(useTrail, \"rP/7uOiOJQcSEwKyLsIPapcM2tA=\", false, function() {\n    return [\n        useSprings,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useTransition.tsx\n\n\n\nfunction useTransition(data, props, deps) {\n    _s7();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const { reset, sort, trail = 0, expires = true, exitBeforeEnter = false, onDestroyed, ref: propsRef, config: propsConfig } = propsFn ? propsFn() : props;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const items = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(data);\n    const transitions = [];\n    const usedTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const prevTransitions = reset ? null : usedTransitions.current;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        usedTransitions.current = transitions;\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(t.ctrl);\n            t.ctrl.ref = ref;\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(usedTransitions.current, (t)=>{\n                if (t.expired) {\n                    clearTimeout(t.expirationId);\n                }\n                detachRefs(t.ctrl, ref);\n                t.ctrl.stop(true);\n            });\n        };\n    });\n    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n    const expired = reset && usedTransitions.current || [];\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(expired, (param)=>{\n            let { ctrl, item, key } = param;\n            detachRefs(ctrl, ref);\n            callProp(onDestroyed, item, key);\n        }));\n    const reused = [];\n    if (prevTransitions) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(prevTransitions, (t, i)=>{\n        if (t.expired) {\n            clearTimeout(t.expirationId);\n            expired.push(t);\n        } else {\n            i = reused[i] = keys.indexOf(t.key);\n            if (~i) transitions[i] = t;\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(items, (item, i)=>{\n        if (!transitions[i]) {\n            transitions[i] = {\n                key: keys[i],\n                item,\n                phase: \"mount\" /* MOUNT */ ,\n                ctrl: new Controller()\n            };\n            transitions[i].ctrl.item = item;\n        }\n    });\n    if (reused.length) {\n        let i = -1;\n        const { leave } = propsFn ? propsFn() : props;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(reused, (keyIndex, prevIndex)=>{\n            const t = prevTransitions[prevIndex];\n            if (~keyIndex) {\n                i = transitions.indexOf(t);\n                transitions[i] = {\n                    ...t,\n                    item: items[keyIndex]\n                };\n            } else if (leave) {\n                transitions.splice(++i, 0, t);\n            }\n        });\n    }\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(sort)) {\n        transitions.sort((a, b)=>sort(a.item, b.item));\n    }\n    let delay = -trail;\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const defaultProps = getDefaultProps(props);\n    const changes = /* @__PURE__ */ new Map();\n    const exitingTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(/* @__PURE__ */ new Map());\n    const forceChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t, i)=>{\n        const key = t.key;\n        const prevPhase = t.phase;\n        const p = propsFn ? propsFn() : props;\n        let to2;\n        let phase;\n        const propsDelay = callProp(p.delay || 0, key);\n        if (prevPhase == \"mount\" /* MOUNT */ ) {\n            to2 = p.enter;\n            phase = \"enter\" /* ENTER */ ;\n        } else {\n            const isLeave = keys.indexOf(key) < 0;\n            if (prevPhase != \"leave\" /* LEAVE */ ) {\n                if (isLeave) {\n                    to2 = p.leave;\n                    phase = \"leave\" /* LEAVE */ ;\n                } else if (to2 = p.update) {\n                    phase = \"update\" /* UPDATE */ ;\n                } else return;\n            } else if (!isLeave) {\n                to2 = p.enter;\n                phase = \"enter\" /* ENTER */ ;\n            } else return;\n        }\n        to2 = callProp(to2, t.item, i);\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? inferTo(to2) : {\n            to: to2\n        };\n        if (!to2.config) {\n            const config2 = propsConfig || defaultProps.config;\n            to2.config = callProp(config2, t.item, i, phase);\n        }\n        delay += trail;\n        const payload = {\n            ...defaultProps,\n            // we need to add our props.delay value you here.\n            delay: propsDelay + delay,\n            ref: propsRef,\n            immediate: p.immediate,\n            // This prevents implied resets.\n            reset: false,\n            // Merge any phase-specific props.\n            ...to2\n        };\n        if (phase == \"enter\" /* ENTER */  && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(payload.from)) {\n            const p2 = propsFn ? propsFn() : props;\n            const from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n            payload.from = callProp(from, t.item, i);\n        }\n        const { onResolve } = payload;\n        payload.onResolve = (result)=>{\n            callProp(onResolve, result);\n            const transitions2 = usedTransitions.current;\n            const t2 = transitions2.find((t3)=>t3.key === key);\n            if (!t2) return;\n            if (result.cancelled && t2.phase != \"update\" /* UPDATE */ ) {\n                return;\n            }\n            if (t2.ctrl.idle) {\n                const idle = transitions2.every((t3)=>t3.ctrl.idle);\n                if (t2.phase == \"leave\" /* LEAVE */ ) {\n                    const expiry = callProp(expires, t2.item);\n                    if (expiry !== false) {\n                        const expiryMs = expiry === true ? 0 : expiry;\n                        t2.expired = true;\n                        if (!idle && expiryMs > 0) {\n                            if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n                            return;\n                        }\n                    }\n                }\n                if (idle && transitions2.some((t3)=>t3.expired)) {\n                    exitingTransitions.current.delete(t2);\n                    if (exitBeforeEnter) {\n                        forceChange.current = true;\n                    }\n                    forceUpdate();\n                }\n            }\n        };\n        const springs = getSprings(t.ctrl, payload);\n        if (phase === \"leave\" /* LEAVE */  && exitBeforeEnter) {\n            exitingTransitions.current.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        } else {\n            changes.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        }\n    });\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (hasContext) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n                t.ctrl.start({\n                    default: context\n                });\n            });\n        }\n    }, [\n        context\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(changes, (_, t)=>{\n        if (exitingTransitions.current.size) {\n            const ind = transitions.findIndex((state)=>state.key === t.key);\n            transitions.splice(ind, 1);\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(exitingTransitions.current.size ? exitingTransitions.current : changes, (param, t)=>{\n            let { phase, payload } = param;\n            const { ctrl } = t;\n            t.phase = phase;\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext && phase == \"enter\" /* ENTER */ ) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            if (payload) {\n                replaceRef(ctrl, payload.ref);\n                if ((ctrl.ref || ref) && !forceChange.current) {\n                    ctrl.update(payload);\n                } else {\n                    ctrl.start(payload);\n                    if (forceChange.current) {\n                        forceChange.current = false;\n                    }\n                }\n            }\n        });\n    }, reset ? void 0 : deps);\n    const renderTransitions = (render)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, transitions.map((t, i)=>{\n            const { springs } = changes.get(t) || t.ctrl;\n            const elem = render({\n                ...springs\n            }, t.item, t, i);\n            return elem && elem.type ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(elem.type, {\n                ...elem.props,\n                key: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(t.key) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(t.key) ? t.key : t.ctrl.id,\n                ref: elem.ref\n            }) : elem;\n        }));\n    return ref ? [\n        renderTransitions,\n        ref\n    ] : renderTransitions;\n}\n_s7(useTransition, \"42pB3Ij5X1DSdJfTRN9xEyhj2Bo=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\nvar nextKey = 1;\nfunction getKeys(items, param, prevTransitions) {\n    let { key, keys = key } = param;\n    if (keys === null) {\n        const reused = /* @__PURE__ */ new Set();\n        return items.map((item)=>{\n            const t = prevTransitions && prevTransitions.find((t2)=>t2.item === item && t2.phase !== \"leave\" /* LEAVE */  && !reused.has(t2));\n            if (t) {\n                reused.add(t);\n                return t.key;\n            }\n            return nextKey++;\n        });\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys) ? items : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(keys) ? items.map(keys) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys);\n}\n// src/hooks/useScroll.ts\n\nvar useScroll = function() {\n    let { container, ...springOptions } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s8();\n    const [scrollValues, api] = useSpring(()=>({\n            scrollX: 0,\n            scrollY: 0,\n            scrollXProgress: 0,\n            scrollYProgress: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onScroll)((param)=>{\n            let { x, y } = param;\n            api.start({\n                scrollX: x.current,\n                scrollXProgress: x.progress,\n                scrollY: y.current,\n                scrollYProgress: y.progress\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(scrollValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return scrollValues;\n};\n_s8(useScroll, \"Jti96r2Rws6Ekr5fIwfu+1CFXcw=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useResize.ts\n\nvar useResize = (param)=>{\n    let { container, ...springOptions } = param;\n    _s9();\n    const [sizeValues, api] = useSpring(()=>({\n            width: 0,\n            height: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onResize)((param)=>{\n            let { width, height } = param;\n            api.start({\n                width,\n                height,\n                immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(sizeValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return sizeValues;\n};\n_s9(useResize, \"IQ4lWHNynSxWdhY6Jf1n8BSsJMs=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useInView.ts\n\n\nvar defaultThresholdOptions = {\n    any: 0,\n    all: 1\n};\nfunction useInView(props, args) {\n    _s10();\n    const [isInView, setIsInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const springsProps = propsFn ? propsFn() : {};\n    const { to: to2 = {}, from = {}, ...restSpringProps } = springsProps;\n    const intersectionArguments = propsFn ? args : props;\n    const [springs, api] = useSpring(()=>({\n            from,\n            ...restSpringProps\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const element = ref.current;\n        const { root, once, amount = \"any\", ...restArgs } = intersectionArguments !== null && intersectionArguments !== void 0 ? intersectionArguments : {};\n        if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n        const activeIntersections = /* @__PURE__ */ new WeakMap();\n        const onEnter = ()=>{\n            if (to2) {\n                api.start(to2);\n            }\n            setIsInView(true);\n            const cleanup = ()=>{\n                if (from) {\n                    api.start(from);\n                }\n                setIsInView(false);\n            };\n            return once ? void 0 : cleanup;\n        };\n        const handleIntersection = (entries)=>{\n            entries.forEach((entry)=>{\n                const onLeave = activeIntersections.get(entry.target);\n                if (entry.isIntersecting === Boolean(onLeave)) {\n                    return;\n                }\n                if (entry.isIntersecting) {\n                    const newOnLeave = onEnter();\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(newOnLeave)) {\n                        activeIntersections.set(entry.target, newOnLeave);\n                    } else {\n                        observer.unobserve(entry.target);\n                    }\n                } else if (onLeave) {\n                    onLeave();\n                    activeIntersections.delete(entry.target);\n                }\n            });\n        };\n        const observer = new IntersectionObserver(handleIntersection, {\n            root: root && root.current || void 0,\n            threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],\n            ...restArgs\n        });\n        observer.observe(element);\n        return ()=>observer.unobserve(element);\n    }, [\n        intersectionArguments\n    ]);\n    if (propsFn) {\n        return [\n            ref,\n            springs\n        ];\n    }\n    return [\n        ref,\n        isInView\n    ];\n}\n_s10(useInView, \"7PuQs9I897GO6tzsabnAsgHidAU=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/components/Spring.tsx\nfunction Spring(param) {\n    let { children, ...props } = param;\n    _s11();\n    return children(useSpring(props));\n}\n_s11(Spring, \"osm+04XShAFeF/DrWOpJZHjaaNg=\", false, function() {\n    return [\n        useSpring\n    ];\n});\n_c2 = Spring;\n// src/components/Trail.tsx\n\nfunction Trail(param) {\n    let { items, children, ...props } = param;\n    _s12();\n    const trails = useTrail(items.length, props);\n    return items.map((item, index)=>{\n        const result = children(item, index);\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(result) ? result(trails[index]) : result;\n    });\n}\n_s12(Trail, \"IZ78DWwcRLiU/XMADn7w03VEdK0=\", false, function() {\n    return [\n        useTrail\n    ];\n});\n_c3 = Trail;\n// src/components/Transition.tsx\nfunction Transition(param) {\n    let { items, children, ...props } = param;\n    _s13();\n    return useTransition(items, props)(children);\n}\n_s13(Transition, \"28mb38mkSsMdKhDodgMEJ1axbVA=\", false, function() {\n    return [\n        useTransition\n    ];\n});\n_c4 = Transition;\n// src/interpolate.ts\n\n// src/Interpolation.ts\n\n\nvar Interpolation = class extends FrameValue {\n    advance(_dt) {\n        const value = this._get();\n        const oldValue = this.get();\n        if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldValue)) {\n            (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).setValue(value);\n            this._onChange(value, this.idle);\n        }\n        if (!this.idle && checkIdle(this._active)) {\n            becomeIdle(this);\n        }\n    }\n    _get() {\n        const inputs = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(this.source) ? this.source.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.source));\n        return this.calc(...inputs);\n    }\n    _start() {\n        if (this.idle && !checkIdle(this._active)) {\n            this.idle = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(this), (node)=>{\n                node.done = false;\n            });\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this.advance());\n                becomeIdle(this);\n            } else {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n            }\n        }\n    }\n    // Observe our sources only when we're observed.\n    _attach() {\n        let priority = 1;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(source, this);\n            }\n            if (isFrameValue(source)) {\n                if (!source.idle) {\n                    this._active.add(source);\n                }\n                priority = Math.max(priority, source.priority + 1);\n            }\n        });\n        this.priority = priority;\n        this._start();\n    }\n    // Stop observing our sources once we have no observers.\n    _detach() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(source, this);\n            }\n        });\n        this._active.clear();\n        becomeIdle(this);\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            if (event.idle) {\n                this.advance();\n            } else {\n                this._active.add(event.parent);\n                this._start();\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else if (event.type == \"priority\") {\n            this.priority = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source).reduce((highest, parent)=>Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n        }\n    }\n    constructor(source, args){\n        super();\n        this.source = source;\n        /** Equals false when in the frameloop */ this.idle = true;\n        /** The inputs which are currently animating */ this._active = /* @__PURE__ */ new Set();\n        this.calc = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)(...args);\n        const value = this._get();\n        const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n    }\n};\nfunction isIdle(source) {\n    return source.idle !== false;\n}\nfunction checkIdle(active) {\n    return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n    if (!self.idle) {\n        self.idle = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(self), (node)=>{\n            node.done = true;\n        });\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(self, {\n            type: \"idle\",\n            parent: self\n        });\n    }\n}\n// src/interpolate.ts\nvar to = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return new Interpolation(source, args);\n};\nvar interpolate = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)(), new Interpolation(source, args);\n};\n// src/globals.ts\n\n_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createStringInterpolator,\n    to: (source, args)=>new Interpolation(source, args)\n});\nvar update = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.advance;\n// src/index.ts\n\n\n //# sourceMappingURL=react-spring_core.modern.mjs.map\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SpringContext\");\n$RefreshReg$(_c1, \"SpringRef\");\n$RefreshReg$(_c2, \"Spring\");\n$RefreshReg$(_c3, \"Trail\");\n$RefreshReg$(_c4, \"Transition\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __raf: function() { return /* binding */ __raf; },\n/* harmony export */   raf: function() { return /* binding */ raf; }\n/* harmony export */ });\n// src/index.ts\nvar updateQueue = makeQueue();\nvar raf = (fn)=>schedule(fn, updateQueue);\nvar writeQueue = makeQueue();\nraf.write = (fn)=>schedule(fn, writeQueue);\nvar onStartQueue = makeQueue();\nraf.onStart = (fn)=>schedule(fn, onStartQueue);\nvar onFrameQueue = makeQueue();\nraf.onFrame = (fn)=>schedule(fn, onFrameQueue);\nvar onFinishQueue = makeQueue();\nraf.onFinish = (fn)=>schedule(fn, onFinishQueue);\nvar timeouts = [];\nraf.setTimeout = (handler, ms)=>{\n    const time = raf.now() + ms;\n    const cancel = ()=>{\n        const i = timeouts.findIndex((t)=>t.cancel == cancel);\n        if (~i) timeouts.splice(i, 1);\n        pendingCount -= ~i ? 1 : 0;\n    };\n    const timeout = {\n        time,\n        handler,\n        cancel\n    };\n    timeouts.splice(findTimeout(time), 0, timeout);\n    pendingCount += 1;\n    start();\n    return timeout;\n};\nvar findTimeout = (time)=>~(~timeouts.findIndex((t)=>t.time > time) || ~timeouts.length);\nraf.cancel = (fn)=>{\n    onStartQueue.delete(fn);\n    onFrameQueue.delete(fn);\n    onFinishQueue.delete(fn);\n    updateQueue.delete(fn);\n    writeQueue.delete(fn);\n};\nraf.sync = (fn)=>{\n    sync = true;\n    raf.batchedUpdates(fn);\n    sync = false;\n};\nraf.throttle = (fn)=>{\n    let lastArgs;\n    function queuedFn() {\n        try {\n            fn(...lastArgs);\n        } finally{\n            lastArgs = null;\n        }\n    }\n    function throttled() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        lastArgs = args;\n        raf.onStart(queuedFn);\n    }\n    throttled.handler = fn;\n    throttled.cancel = ()=>{\n        onStartQueue.delete(queuedFn);\n        lastArgs = null;\n    };\n    return throttled;\n};\nvar nativeRaf =  true ? window.requestAnimationFrame : // eslint-disable-next-line @typescript-eslint/no-empty-function\n0;\nraf.use = (impl)=>nativeRaf = impl;\nraf.now = typeof performance != \"undefined\" ? ()=>performance.now() : Date.now;\nraf.batchedUpdates = (fn)=>fn();\nraf.catch = console.error;\nraf.frameLoop = \"always\";\nraf.advance = ()=>{\n    if (raf.frameLoop !== \"demand\") {\n        console.warn(\"Cannot call the manual advancement of rafz whilst frameLoop is not set as demand\");\n    } else {\n        update();\n    }\n};\nvar ts = -1;\nvar pendingCount = 0;\nvar sync = false;\nfunction schedule(fn, queue) {\n    if (sync) {\n        queue.delete(fn);\n        fn(0);\n    } else {\n        queue.add(fn);\n        start();\n    }\n}\nfunction start() {\n    if (ts < 0) {\n        ts = 0;\n        if (raf.frameLoop !== \"demand\") {\n            nativeRaf(loop);\n        }\n    }\n}\nfunction stop() {\n    ts = -1;\n}\nfunction loop() {\n    if (~ts) {\n        nativeRaf(loop);\n        raf.batchedUpdates(update);\n    }\n}\nfunction update() {\n    const prevTs = ts;\n    ts = raf.now();\n    const count = findTimeout(ts);\n    if (count) {\n        eachSafely(timeouts.splice(0, count), (t)=>t.handler());\n        pendingCount -= count;\n    }\n    if (!pendingCount) {\n        stop();\n        return;\n    }\n    onStartQueue.flush();\n    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n    onFrameQueue.flush();\n    writeQueue.flush();\n    onFinishQueue.flush();\n}\nfunction makeQueue() {\n    let next = /* @__PURE__ */ new Set();\n    let current = next;\n    return {\n        add (fn) {\n            pendingCount += current == next && !next.has(fn) ? 1 : 0;\n            next.add(fn);\n        },\n        delete (fn) {\n            pendingCount -= current == next && next.has(fn) ? 1 : 0;\n            return next.delete(fn);\n        },\n        flush (arg) {\n            if (current.size) {\n                next = /* @__PURE__ */ new Set();\n                pendingCount -= current.size;\n                eachSafely(current, (fn)=>fn(arg) && next.add(fn));\n                pendingCount += next.size;\n                current = next;\n            }\n        }\n    };\n}\nfunction eachSafely(values, each) {\n    values.forEach((value)=>{\n        try {\n            each(value);\n        } catch (e) {\n            raf.catch(e);\n        }\n    });\n}\nvar __raf = {\n    /** The number of pending tasks */ count () {\n        return pendingCount;\n    },\n    /** Whether there's a raf update loop running */ isRunning () {\n        return ts >= 0;\n    },\n    /** Clear internal state. Never call from update loop! */ clear () {\n        ts = -1;\n        timeouts = [];\n        onStartQueue = makeQueue();\n        updateQueue = makeQueue();\n        onFrameQueue = makeQueue();\n        writeQueue = makeQueue();\n        onFinishQueue = makeQueue();\n        pendingCount = 0;\n    }\n};\n //# sourceMappingURL=react-spring_rafz.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FluidValue: function() { return /* binding */ FluidValue; },\n/* harmony export */   Globals: function() { return /* binding */ globals_exports; },\n/* harmony export */   addFluidObserver: function() { return /* binding */ addFluidObserver; },\n/* harmony export */   callFluidObserver: function() { return /* binding */ callFluidObserver; },\n/* harmony export */   callFluidObservers: function() { return /* binding */ callFluidObservers; },\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   colorToRgba: function() { return /* binding */ colorToRgba; },\n/* harmony export */   colors: function() { return /* binding */ colors2; },\n/* harmony export */   createInterpolator: function() { return /* binding */ createInterpolator; },\n/* harmony export */   createStringInterpolator: function() { return /* binding */ createStringInterpolator2; },\n/* harmony export */   defineHidden: function() { return /* binding */ defineHidden; },\n/* harmony export */   deprecateDirectCall: function() { return /* binding */ deprecateDirectCall; },\n/* harmony export */   deprecateInterpolate: function() { return /* binding */ deprecateInterpolate; },\n/* harmony export */   each: function() { return /* binding */ each; },\n/* harmony export */   eachProp: function() { return /* binding */ eachProp; },\n/* harmony export */   easings: function() { return /* binding */ easings; },\n/* harmony export */   flush: function() { return /* binding */ flush; },\n/* harmony export */   flushCalls: function() { return /* binding */ flushCalls; },\n/* harmony export */   frameLoop: function() { return /* binding */ frameLoop; },\n/* harmony export */   getFluidObservers: function() { return /* binding */ getFluidObservers; },\n/* harmony export */   getFluidValue: function() { return /* binding */ getFluidValue; },\n/* harmony export */   hasFluidValue: function() { return /* binding */ hasFluidValue; },\n/* harmony export */   hex3: function() { return /* binding */ hex3; },\n/* harmony export */   hex4: function() { return /* binding */ hex4; },\n/* harmony export */   hex6: function() { return /* binding */ hex6; },\n/* harmony export */   hex8: function() { return /* binding */ hex8; },\n/* harmony export */   hsl: function() { return /* binding */ hsl; },\n/* harmony export */   hsla: function() { return /* binding */ hsla; },\n/* harmony export */   is: function() { return /* binding */ is; },\n/* harmony export */   isAnimatedString: function() { return /* binding */ isAnimatedString; },\n/* harmony export */   isEqual: function() { return /* binding */ isEqual; },\n/* harmony export */   isSSR: function() { return /* binding */ isSSR; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   onResize: function() { return /* binding */ onResize; },\n/* harmony export */   onScroll: function() { return /* binding */ onScroll; },\n/* harmony export */   once: function() { return /* binding */ once; },\n/* harmony export */   prefix: function() { return /* binding */ prefix; },\n/* harmony export */   raf: function() { return /* reexport safe */ _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf; },\n/* harmony export */   removeFluidObserver: function() { return /* binding */ removeFluidObserver; },\n/* harmony export */   rgb: function() { return /* binding */ rgb; },\n/* harmony export */   rgba: function() { return /* binding */ rgba; },\n/* harmony export */   setFluidGetter: function() { return /* binding */ setFluidGetter; },\n/* harmony export */   toArray: function() { return /* binding */ toArray; },\n/* harmony export */   useConstant: function() { return /* binding */ useConstant; },\n/* harmony export */   useForceUpdate: function() { return /* binding */ useForceUpdate; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* binding */ useIsomorphicLayoutEffect; },\n/* harmony export */   useMemoOne: function() { return /* binding */ useMemoOne; },\n/* harmony export */   useOnce: function() { return /* binding */ useOnce; },\n/* harmony export */   usePrev: function() { return /* binding */ usePrev; },\n/* harmony export */   useReducedMotion: function() { return /* binding */ useReducedMotion; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/rafz */ \"(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$();\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/globals.ts\nvar globals_exports = {};\n__export(globals_exports, {\n    assign: ()=>assign,\n    colors: ()=>colors,\n    createStringInterpolator: ()=>createStringInterpolator,\n    skipAnimation: ()=>skipAnimation,\n    to: ()=>to,\n    willAdvance: ()=>willAdvance\n});\n\n// src/helpers.ts\nfunction noop() {}\nvar defineHidden = (obj, key, value)=>Object.defineProperty(obj, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\nvar is = {\n    arr: Array.isArray,\n    obj: (a)=>!!a && a.constructor.name === \"Object\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    und: (a)=>a === void 0\n};\nfunction isEqual(a, b) {\n    if (is.arr(a)) {\n        if (!is.arr(b) || a.length !== b.length) return false;\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n    return a === b;\n}\nvar each = (obj, fn)=>obj.forEach(fn);\nfunction eachProp(obj, fn, ctx) {\n    if (is.arr(obj)) {\n        for(let i = 0; i < obj.length; i++){\n            fn.call(ctx, obj[i], \"\".concat(i));\n        }\n        return;\n    }\n    for(const key in obj){\n        if (obj.hasOwnProperty(key)) {\n            fn.call(ctx, obj[key], key);\n        }\n    }\n}\nvar toArray = (a)=>is.und(a) ? [] : is.arr(a) ? a : [\n        a\n    ];\nfunction flush(queue, iterator) {\n    if (queue.size) {\n        const items = Array.from(queue);\n        queue.clear();\n        each(items, iterator);\n    }\n}\nvar flushCalls = function(queue) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return flush(queue, (fn)=>fn(...args));\n};\nvar isSSR = ()=> false || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\n// src/globals.ts\nvar createStringInterpolator;\nvar to;\nvar colors = null;\nvar skipAnimation = false;\nvar willAdvance = noop;\nvar assign = (globals)=>{\n    if (globals.to) to = globals.to;\n    if (globals.now) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.now = globals.now;\n    if (globals.colors !== void 0) colors = globals.colors;\n    if (globals.skipAnimation != null) skipAnimation = globals.skipAnimation;\n    if (globals.createStringInterpolator) createStringInterpolator = globals.createStringInterpolator;\n    if (globals.requestAnimationFrame) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.use(globals.requestAnimationFrame);\n    if (globals.batchedUpdates) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates = globals.batchedUpdates;\n    if (globals.willAdvance) willAdvance = globals.willAdvance;\n    if (globals.frameLoop) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.frameLoop = globals.frameLoop;\n};\n// src/FrameLoop.ts\n\nvar startQueue = /* @__PURE__ */ new Set();\nvar currentFrame = [];\nvar prevFrame = [];\nvar priority = 0;\nvar frameLoop = {\n    get idle () {\n        return !startQueue.size && !currentFrame.length;\n    },\n    /** Advance the given animation on every frame until idle. */ start (animation) {\n        if (priority > animation.priority) {\n            startQueue.add(animation);\n            _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.onStart(flushStartQueue);\n        } else {\n            startSafely(animation);\n            (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(advance);\n        }\n    },\n    /** Advance all animations by the given time. */ advance,\n    /** Call this when an animation's priority changes. */ sort (animation) {\n        if (priority) {\n            _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(()=>frameLoop.sort(animation));\n        } else {\n            const prevIndex = currentFrame.indexOf(animation);\n            if (~prevIndex) {\n                currentFrame.splice(prevIndex, 1);\n                startUnsafely(animation);\n            }\n        }\n    },\n    /**\n   * Clear all animations. For testing purposes.\n   *\n   * ☠️ Never call this from within the frameloop.\n   */ clear () {\n        currentFrame = [];\n        startQueue.clear();\n    }\n};\nfunction flushStartQueue() {\n    startQueue.forEach(startSafely);\n    startQueue.clear();\n    (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(advance);\n}\nfunction startSafely(animation) {\n    if (!currentFrame.includes(animation)) startUnsafely(animation);\n}\nfunction startUnsafely(animation) {\n    currentFrame.splice(findIndex(currentFrame, (other)=>other.priority > animation.priority), 0, animation);\n}\nfunction advance(dt) {\n    const nextFrame = prevFrame;\n    for(let i = 0; i < currentFrame.length; i++){\n        const animation = currentFrame[i];\n        priority = animation.priority;\n        if (!animation.idle) {\n            willAdvance(animation);\n            animation.advance(dt);\n            if (!animation.idle) {\n                nextFrame.push(animation);\n            }\n        }\n    }\n    priority = 0;\n    prevFrame = currentFrame;\n    prevFrame.length = 0;\n    currentFrame = nextFrame;\n    return currentFrame.length > 0;\n}\nfunction findIndex(arr, test) {\n    const index = arr.findIndex(test);\n    return index < 0 ? arr.length : index;\n}\n// src/clamp.ts\nvar clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\n// src/colors.ts\nvar colors2 = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n};\n// src/colorMatchers.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call() {\n    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++){\n        parts[_key] = arguments[_key];\n    }\n    return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nvar rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nvar rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nvar hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nvar hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nvar hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex6 = /^#([0-9a-fA-F]{6})$/;\nvar hex8 = /^#([0-9a-fA-F]{8})$/;\n// src/normalizeColor.ts\nfunction normalizeColor(color) {\n    let match;\n    if (typeof color === \"number\") {\n        return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n    }\n    if (match = hex6.exec(color)) return parseInt(match[1] + \"ff\", 16) >>> 0;\n    if (colors && colors[color] !== void 0) {\n        return colors[color];\n    }\n    if (match = rgb.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        255) >>> // a\n        0;\n    }\n    if (match = rgba.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        parse1(match[4])) >>> // a\n        0;\n    }\n    if (match = hex3.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        \"ff\", // a\n        16) >>> 0;\n    }\n    if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n    if (match = hex4.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        match[4] + match[4], // a\n        16) >>> 0;\n    }\n    if (match = hsl.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | 255) >>> // a\n        0;\n    }\n    if (match = hsla.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | parse1(match[4])) >>> // a\n        0;\n    }\n    return null;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n    const int = parseInt(str, 10);\n    if (int < 0) return 0;\n    if (int > 255) return 255;\n    return int;\n}\nfunction parse360(str) {\n    const int = parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n    const num = parseFloat(str);\n    if (num < 0) return 0;\n    if (num > 1) return 255;\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    const int = parseFloat(str);\n    if (int < 0) return 0;\n    if (int > 100) return 1;\n    return int / 100;\n}\n// src/colorToRgba.ts\nfunction colorToRgba(input) {\n    let int32Color = normalizeColor(input);\n    if (int32Color === null) return input;\n    int32Color = int32Color || 0;\n    const r = (int32Color & 4278190080) >>> 24;\n    const g = (int32Color & 16711680) >>> 16;\n    const b = (int32Color & 65280) >>> 8;\n    const a = (int32Color & 255) / 255;\n    return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n}\n// src/createInterpolator.ts\nvar createInterpolator = (range, output, extrapolate)=>{\n    if (is.fun(range)) {\n        return range;\n    }\n    if (is.arr(range)) {\n        return createInterpolator({\n            range,\n            output,\n            extrapolate\n        });\n    }\n    if (is.str(range.output[0])) {\n        return createStringInterpolator(range);\n    }\n    const config = range;\n    const outputRange = config.output;\n    const inputRange = config.range || [\n        0,\n        1\n    ];\n    const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n    const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n    const easing = config.easing || ((t)=>t);\n    return (input)=>{\n        const range2 = findRange(input, inputRange);\n        return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n    };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n    let result = map ? map(input) : input;\n    if (result < inputMin) {\n        if (extrapolateLeft === \"identity\") return result;\n        else if (extrapolateLeft === \"clamp\") result = inputMin;\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === \"identity\") return result;\n        else if (extrapolateRight === \"clamp\") result = inputMax;\n    }\n    if (outputMin === outputMax) return outputMin;\n    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n    if (inputMin === -Infinity) result = -result;\n    else if (inputMax === Infinity) result = result - inputMin;\n    else result = (result - inputMin) / (inputMax - inputMin);\n    result = easing(result);\n    if (outputMin === -Infinity) result = -result;\n    else if (outputMax === Infinity) result = result + outputMin;\n    else result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    for(var i = 1; i < inputRange.length - 1; ++i)if (inputRange[i] >= input) break;\n    return i - 1;\n}\n// src/easings.ts\nvar steps = function(steps2) {\n    let direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"end\";\n    return (progress2)=>{\n        progress2 = direction === \"end\" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);\n        const expanded = progress2 * steps2;\n        const rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clamp(0, 1, rounded / steps2);\n    };\n};\nvar c1 = 1.70158;\nvar c2 = c1 * 1.525;\nvar c3 = c1 + 1;\nvar c4 = 2 * Math.PI / 3;\nvar c5 = 2 * Math.PI / 4.5;\nvar bounceOut = (x)=>{\n    const n1 = 7.5625;\n    const d1 = 2.75;\n    if (x < 1 / d1) {\n        return n1 * x * x;\n    } else if (x < 2 / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n};\nvar easings = {\n    linear: (x)=>x,\n    easeInQuad: (x)=>x * x,\n    easeOutQuad: (x)=>1 - (1 - x) * (1 - x),\n    easeInOutQuad: (x)=>x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,\n    easeInCubic: (x)=>x * x * x,\n    easeOutCubic: (x)=>1 - Math.pow(1 - x, 3),\n    easeInOutCubic: (x)=>x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,\n    easeInQuart: (x)=>x * x * x * x,\n    easeOutQuart: (x)=>1 - Math.pow(1 - x, 4),\n    easeInOutQuart: (x)=>x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,\n    easeInQuint: (x)=>x * x * x * x * x,\n    easeOutQuint: (x)=>1 - Math.pow(1 - x, 5),\n    easeInOutQuint: (x)=>x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,\n    easeInSine: (x)=>1 - Math.cos(x * Math.PI / 2),\n    easeOutSine: (x)=>Math.sin(x * Math.PI / 2),\n    easeInOutSine: (x)=>-(Math.cos(Math.PI * x) - 1) / 2,\n    easeInExpo: (x)=>x === 0 ? 0 : Math.pow(2, 10 * x - 10),\n    easeOutExpo: (x)=>x === 1 ? 1 : 1 - Math.pow(2, -10 * x),\n    easeInOutExpo: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,\n    easeInCirc: (x)=>1 - Math.sqrt(1 - Math.pow(x, 2)),\n    easeOutCirc: (x)=>Math.sqrt(1 - Math.pow(x - 1, 2)),\n    easeInOutCirc: (x)=>x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,\n    easeInBack: (x)=>c3 * x * x * x - c1 * x * x,\n    easeOutBack: (x)=>1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),\n    easeInOutBack: (x)=>x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,\n    easeInElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),\n    easeOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,\n    easeInOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,\n    easeInBounce: (x)=>1 - bounceOut(1 - x),\n    easeOutBounce: bounceOut,\n    easeInOutBounce: (x)=>x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n    steps\n};\n// src/fluids.ts\nvar $get = Symbol.for(\"FluidValue.get\");\nvar $observers = Symbol.for(\"FluidValue.observers\");\nvar hasFluidValue = (arg)=>Boolean(arg && arg[$get]);\nvar getFluidValue = (arg)=>arg && arg[$get] ? arg[$get]() : arg;\nvar getFluidObservers = (target)=>target[$observers] || null;\nfunction callFluidObserver(observer2, event) {\n    if (observer2.eventObserved) {\n        observer2.eventObserved(event);\n    } else {\n        observer2(event);\n    }\n}\nfunction callFluidObservers(target, event) {\n    const observers = target[$observers];\n    if (observers) {\n        observers.forEach((observer2)=>{\n            callFluidObserver(observer2, event);\n        });\n    }\n}\nvar FluidValue = class {\n    constructor(get){\n        if (!get && !(get = this.get)) {\n            throw Error(\"Unknown getter\");\n        }\n        setFluidGetter(this, get);\n    }\n};\n$get, $observers;\nvar setFluidGetter = (target, get)=>setHidden(target, $get, get);\nfunction addFluidObserver(target, observer2) {\n    if (target[$get]) {\n        let observers = target[$observers];\n        if (!observers) {\n            setHidden(target, $observers, observers = /* @__PURE__ */ new Set());\n        }\n        if (!observers.has(observer2)) {\n            observers.add(observer2);\n            if (target.observerAdded) {\n                target.observerAdded(observers.size, observer2);\n            }\n        }\n    }\n    return observer2;\n}\nfunction removeFluidObserver(target, observer2) {\n    const observers = target[$observers];\n    if (observers && observers.has(observer2)) {\n        const count = observers.size - 1;\n        if (count) {\n            observers.delete(observer2);\n        } else {\n            target[$observers] = null;\n        }\n        if (target.observerRemoved) {\n            target.observerRemoved(count, observer2);\n        }\n    }\n}\nvar setHidden = (target, key, value)=>Object.defineProperty(target, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\n// src/regexs.ts\nvar numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nvar unitRegex = new RegExp(\"(\".concat(numberRegex.source, \")(%|[a-z]+)\"), \"i\");\nvar rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n// src/variableToRgba.ts\nvar variableToRgba = (input)=>{\n    const [token, fallback] = parseCSSVariable(input);\n    if (!token || isSSR()) {\n        return input;\n    }\n    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);\n    if (value) {\n        return value.trim();\n    } else if (fallback && fallback.startsWith(\"--\")) {\n        const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);\n        if (value2) {\n            return value2;\n        } else {\n            return input;\n        }\n    } else if (fallback && cssVariableRegex.test(fallback)) {\n        return variableToRgba(fallback);\n    } else if (fallback) {\n        return fallback;\n    }\n    return input;\n};\nvar parseCSSVariable = (current)=>{\n    const match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n};\n// src/stringInterpolation.ts\nvar namedColorRegex;\nvar rgbaRound = (_, p1, p2, p3, p4)=>\"rgba(\".concat(Math.round(p1), \", \").concat(Math.round(p2), \", \").concat(Math.round(p3), \", \").concat(p4, \")\");\nvar createStringInterpolator2 = (config)=>{\n    if (!namedColorRegex) namedColorRegex = colors ? // match color names, ignore partial matches\n    new RegExp(\"(\".concat(Object.keys(colors).join(\"|\"), \")(?!\\\\w)\"), \"g\") : // never match\n    /^\\b$/;\n    const output = config.output.map((value)=>{\n        return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);\n    });\n    const keyframes = output.map((value)=>value.match(numberRegex).map(Number));\n    const outputRanges = keyframes[0].map((_, i)=>keyframes.map((values)=>{\n            if (!(i in values)) {\n                throw Error('The arity of each \"output\" value must be equal');\n            }\n            return values[i];\n        }));\n    const interpolators = outputRanges.map((output2)=>createInterpolator({\n            ...config,\n            output: output2\n        }));\n    return (input)=>{\n        var _output_find;\n        const missingUnit = !unitRegex.test(output[0]) && ((_output_find = output.find((value)=>unitRegex.test(value))) === null || _output_find === void 0 ? void 0 : _output_find.replace(numberRegex, \"\"));\n        let i = 0;\n        return output[0].replace(numberRegex, ()=>\"\".concat(interpolators[i++](input)).concat(missingUnit || \"\")).replace(rgbaRegex, rgbaRound);\n    };\n};\n// src/deprecations.ts\nvar prefix = \"react-spring: \";\nvar once = (fn)=>{\n    const func = fn;\n    let called = false;\n    if (typeof func != \"function\") {\n        throw new TypeError(\"\".concat(prefix, \"once requires a function parameter\"));\n    }\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!called) {\n            func(...args);\n            called = true;\n        }\n    };\n};\nvar warnInterpolate = once(console.warn);\nfunction deprecateInterpolate() {\n    warnInterpolate(\"\".concat(prefix, 'The \"interpolate\" function is deprecated in v9 (use \"to\" instead)'));\n}\nvar warnDirectCall = once(console.warn);\nfunction deprecateDirectCall() {\n    warnDirectCall(\"\".concat(prefix, 'Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions'));\n}\n// src/isAnimatedString.ts\nfunction isAnimatedString(value) {\n    return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR\n    !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));\n}\n// src/dom-events/scroll/index.ts\n\n// src/dom-events/resize/resizeElement.ts\nvar observer;\nvar resizeHandlers = /* @__PURE__ */ new WeakMap();\nvar handleObservation = (entries)=>entries.forEach((param)=>{\n        let { target, contentRect } = param;\n        var _resizeHandlers_get;\n        return (_resizeHandlers_get = resizeHandlers.get(target)) === null || _resizeHandlers_get === void 0 ? void 0 : _resizeHandlers_get.forEach((handler)=>handler(contentRect));\n    });\nfunction resizeElement(handler, target) {\n    if (!observer) {\n        if (typeof ResizeObserver !== \"undefined\") {\n            observer = new ResizeObserver(handleObservation);\n        }\n    }\n    let elementHandlers = resizeHandlers.get(target);\n    if (!elementHandlers) {\n        elementHandlers = /* @__PURE__ */ new Set();\n        resizeHandlers.set(target, elementHandlers);\n    }\n    elementHandlers.add(handler);\n    if (observer) {\n        observer.observe(target);\n    }\n    return ()=>{\n        const elementHandlers2 = resizeHandlers.get(target);\n        if (!elementHandlers2) return;\n        elementHandlers2.delete(handler);\n        if (!elementHandlers2.size && observer) {\n            observer.unobserve(target);\n        }\n    };\n}\n// src/dom-events/resize/resizeWindow.ts\nvar listeners = /* @__PURE__ */ new Set();\nvar cleanupWindowResizeHandler;\nvar createResizeHandler = ()=>{\n    const handleResize = ()=>{\n        listeners.forEach((callback)=>callback({\n                width: window.innerWidth,\n                height: window.innerHeight\n            }));\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return ()=>{\n        window.removeEventListener(\"resize\", handleResize);\n    };\n};\nvar resizeWindow = (callback)=>{\n    listeners.add(callback);\n    if (!cleanupWindowResizeHandler) {\n        cleanupWindowResizeHandler = createResizeHandler();\n    }\n    return ()=>{\n        listeners.delete(callback);\n        if (!listeners.size && cleanupWindowResizeHandler) {\n            cleanupWindowResizeHandler();\n            cleanupWindowResizeHandler = void 0;\n        }\n    };\n};\n// src/dom-events/resize/index.ts\nvar onResize = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (container === document.documentElement) {\n        return resizeWindow(callback);\n    } else {\n        return resizeElement(callback, container);\n    }\n};\n// src/progress.ts\nvar progress = (min, max, value)=>max - min === 0 ? 1 : (value - min) / (max - min);\n// src/dom-events/scroll/ScrollHandler.ts\nvar SCROLL_KEYS = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nvar ScrollHandler = class {\n    constructor(callback, container){\n        this.createAxis = ()=>({\n                current: 0,\n                progress: 0,\n                scrollLength: 0\n            });\n        this.updateAxis = (axisName)=>{\n            const axis = this.info[axisName];\n            const { length, position } = SCROLL_KEYS[axisName];\n            axis.current = this.container[\"scroll\".concat(position)];\n            axis.scrollLength = this.container[\"scroll\".concat(length)] - this.container[\"client\".concat(length)];\n            axis.progress = progress(0, axis.scrollLength, axis.current);\n        };\n        this.update = ()=>{\n            this.updateAxis(\"x\");\n            this.updateAxis(\"y\");\n        };\n        this.sendEvent = ()=>{\n            this.callback(this.info);\n        };\n        this.advance = ()=>{\n            this.update();\n            this.sendEvent();\n        };\n        this.callback = callback;\n        this.container = container;\n        this.info = {\n            time: 0,\n            x: this.createAxis(),\n            y: this.createAxis()\n        };\n    }\n};\n// src/dom-events/scroll/index.ts\nvar scrollListeners = /* @__PURE__ */ new WeakMap();\nvar resizeListeners = /* @__PURE__ */ new WeakMap();\nvar onScrollHandlers = /* @__PURE__ */ new WeakMap();\nvar getTarget = (container)=>container === document.documentElement ? window : container;\nvar onScroll = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let containerHandlers = onScrollHandlers.get(container);\n    if (!containerHandlers) {\n        containerHandlers = /* @__PURE__ */ new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    const containerHandler = new ScrollHandler(callback, container);\n    containerHandlers.add(containerHandler);\n    if (!scrollListeners.has(container)) {\n        const listener = ()=>{\n            containerHandlers === null || containerHandlers === void 0 ? void 0 : containerHandlers.forEach((handler)=>handler.advance());\n            return true;\n        };\n        scrollListeners.set(container, listener);\n        const target = getTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, onResize(listener, {\n                container\n            }));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const animateScroll = scrollListeners.get(container);\n    (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(animateScroll);\n    return ()=>{\n        _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(animateScroll);\n        const containerHandlers2 = onScrollHandlers.get(container);\n        if (!containerHandlers2) return;\n        containerHandlers2.delete(containerHandler);\n        if (containerHandlers2.size) return;\n        const listener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (listener) {\n            var _resizeListeners_get;\n            getTarget(container).removeEventListener(\"scroll\", listener);\n            window.removeEventListener(\"resize\", listener);\n            (_resizeListeners_get = resizeListeners.get(container)) === null || _resizeListeners_get === void 0 ? void 0 : _resizeListeners_get();\n        }\n    };\n};\n// src/hooks/useConstant.ts\n\nfunction useConstant(init) {\n    _s();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n_s(useConstant, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n// src/hooks/useForceUpdate.ts\n\n// src/hooks/useIsMounted.ts\n\n// src/hooks/useIsomorphicLayoutEffect.ts\n\nvar useIsomorphicLayoutEffect = isSSR() ? react__WEBPACK_IMPORTED_MODULE_1__.useEffect : react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect;\n// src/hooks/useIsMounted.ts\nvar useIsMounted = ()=>{\n    _s1();\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n};\n_s1(useIsMounted, \"GqP4G6sWCYbmz6Eh2Z3j0cot7Cw=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useForceUpdate.ts\nfunction useForceUpdate() {\n    _s2();\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)()[1];\n    const isMounted = useIsMounted();\n    return ()=>{\n        if (isMounted.current) {\n            update(Math.random());\n        }\n    };\n}\n_s2(useForceUpdate, \"dAwzAW7N5iazLr46M/UqCRwjpnw=\", false, function() {\n    return [\n        useIsMounted\n    ];\n});\n// src/hooks/useMemoOne.ts\n\nfunction useMemoOne(getResult, inputs) {\n    _s3();\n    const [initial] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>({\n            inputs,\n            result: getResult()\n        }));\n    const committed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const prevCache = committed.current;\n    let cache = prevCache;\n    if (cache) {\n        const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n        if (!useCache) {\n            cache = {\n                inputs,\n                result: getResult()\n            };\n        }\n    } else {\n        cache = initial;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        committed.current = cache;\n        if (prevCache == initial) {\n            initial.inputs = initial.result = void 0;\n        }\n    }, [\n        cache\n    ]);\n    return cache.result;\n}\n_s3(useMemoOne, \"E8Xkzq53aNWRw5eQWq1UgxrUZ2I=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\nfunction areInputsEqual(next, prev) {\n    if (next.length !== prev.length) {\n        return false;\n    }\n    for(let i = 0; i < next.length; i++){\n        if (next[i] !== prev[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/hooks/useOnce.ts\n\nvar useOnce = (effect)=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(effect, emptyDeps);\n};\n_s4(useOnce, \"OaUcBvmIE4tjZkb4wJgVrFeSKZM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\nvar emptyDeps = [];\n// src/hooks/usePrev.ts\n\nfunction usePrev(value) {\n    _s5();\n    const prevRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        prevRef.current = value;\n    });\n    return prevRef.current;\n}\n_s5(usePrev, \"I0hJAHPQfpBUlJyIK2lT9vxbY4Y=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\n// src/hooks/useReducedMotion.ts\n\nvar useReducedMotion = ()=>{\n    _s6();\n    const [reducedMotion, setReducedMotion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    useIsomorphicLayoutEffect(()=>{\n        const mql = window.matchMedia(\"(prefers-reduced-motion)\");\n        const handleMediaChange = (e)=>{\n            setReducedMotion(e.matches);\n            assign({\n                skipAnimation: e.matches\n            });\n        };\n        handleMediaChange(mql);\n        if (mql.addEventListener) {\n            mql.addEventListener(\"change\", handleMediaChange);\n        } else {\n            mql.addListener(handleMediaChange);\n        }\n        return ()=>{\n            if (mql.removeEventListener) {\n                mql.removeEventListener(\"change\", handleMediaChange);\n            } else {\n                mql.removeListener(handleMediaChange);\n            }\n        };\n    }, []);\n    return reducedMotion;\n};\n_s6(useReducedMotion, \"4F50ZPZIooo/aDgecWivihMvS7g=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        useIsomorphicLayoutEffect\n    ];\n});\n// src/index.ts\n\n //# sourceMappingURL=react-spring_shared.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3NoYXJlZC9kaXN0L3JlYWN0LXNwcmluZ19zaGFyZWQubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZMLFVBQVVJLFFBQVFFLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUVBLGlCQUFpQjtBQUNqQixJQUFJQyxrQkFBa0IsQ0FBQztBQUN2Qk4sU0FBU00saUJBQWlCO0lBQ3hCQyxRQUFRLElBQU1BO0lBQ2RDLFFBQVEsSUFBTUE7SUFDZEMsMEJBQTBCLElBQU1BO0lBQ2hDQyxlQUFlLElBQU1BO0lBQ3JCQyxJQUFJLElBQU1BO0lBQ1ZDLGFBQWEsSUFBTUE7QUFDckI7QUFDeUM7QUFFekMsaUJBQWlCO0FBQ2pCLFNBQVNFLFFBQ1Q7QUFDQSxJQUFJQyxlQUFlLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVwQixPQUFPQyxjQUFjLENBQUNpQixLQUFLQyxLQUFLO1FBQUVDO1FBQU9DLFVBQVU7UUFBTUMsY0FBYztJQUFLO0FBQ3BILElBQUlDLEtBQUs7SUFDUEMsS0FBS0MsTUFBTUMsT0FBTztJQUNsQlIsS0FBSyxDQUFDUyxJQUFNLENBQUMsQ0FBQ0EsS0FBS0EsRUFBRUMsV0FBVyxDQUFDdkIsSUFBSSxLQUFLO0lBQzFDd0IsS0FBSyxDQUFDRixJQUFNLE9BQU9BLE1BQU07SUFDekJHLEtBQUssQ0FBQ0gsSUFBTSxPQUFPQSxNQUFNO0lBQ3pCSSxLQUFLLENBQUNKLElBQU0sT0FBT0EsTUFBTTtJQUN6QkssS0FBSyxDQUFDTCxJQUFNQSxNQUFNLEtBQUs7QUFDekI7QUFDQSxT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TUFBTUMsb0JBQW9CLENBQUNDO1lBQ3pCSixpQkFBaUJJLEVBQUVDLE9BQU87WUFDMUIzZ0IsT0FBTztnQkFDTEcsZUFBZXVnQixFQUFFQyxPQUFPO1lBQzFCO1FBQ0Y7UUFDQUYsa0JBQWtCRjtRQUNsQixJQUFJQSxJQUFJdEUsZ0JBQWdCLEVBQUU7WUFDeEJzRSxJQUFJdEUsZ0JBQWdCLENBQUMsVUFBVXdFO1FBQ2pDLE9BQU87WUFDTEYsSUFBSUssV0FBVyxDQUFDSDtRQUNsQjtRQUNBLE9BQU87WUFDTCxJQUFJRixJQUFJckUsbUJBQW1CLEVBQUU7Z0JBQzNCcUUsSUFBSXJFLG1CQUFtQixDQUFDLFVBQVV1RTtZQUNwQyxPQUFPO2dCQUNMRixJQUFJTSxjQUFjLENBQUNKO1lBQ3JCO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFDTCxPQUFPSjtBQUNUO0lBekJJRDs7UUFDd0NELDJDQUFTQTtRQUNuRDNCOzs7QUF5QkYsZUFBZTtBQUNrQztBQW9EL0MsQ0FDRix1REFBdUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC1zcHJpbmcvc2hhcmVkL2Rpc3QvcmVhY3Qtc3ByaW5nX3NoYXJlZC5tb2Rlcm4ubWpzPzE5YjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcblxuLy8gc3JjL2dsb2JhbHMudHNcbnZhciBnbG9iYWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGdsb2JhbHNfZXhwb3J0cywge1xuICBhc3NpZ246ICgpID0+IGFzc2lnbixcbiAgY29sb3JzOiAoKSA9PiBjb2xvcnMsXG4gIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcjogKCkgPT4gY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yLFxuICBza2lwQW5pbWF0aW9uOiAoKSA9PiBza2lwQW5pbWF0aW9uLFxuICB0bzogKCkgPT4gdG8sXG4gIHdpbGxBZHZhbmNlOiAoKSA9PiB3aWxsQWR2YW5jZVxufSk7XG5pbXBvcnQgeyByYWYgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9yYWZ6XCI7XG5cbi8vIHNyYy9oZWxwZXJzLnRzXG5mdW5jdGlvbiBub29wKCkge1xufVxudmFyIGRlZmluZUhpZGRlbiA9IChvYmosIGtleSwgdmFsdWUpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbnZhciBpcyA9IHtcbiAgYXJyOiBBcnJheS5pc0FycmF5LFxuICBvYmo6IChhKSA9PiAhIWEgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiLFxuICBmdW46IChhKSA9PiB0eXBlb2YgYSA9PT0gXCJmdW5jdGlvblwiLFxuICBzdHI6IChhKSA9PiB0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIixcbiAgbnVtOiAoYSkgPT4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIsXG4gIHVuZDogKGEpID0+IGEgPT09IHZvaWQgMFxufTtcbmZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICBpZiAoaXMuYXJyKGEpKSB7XG4gICAgaWYgKCFpcy5hcnIoYikgfHwgYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFbaV0gIT09IGJbaV0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGEgPT09IGI7XG59XG52YXIgZWFjaCA9IChvYmosIGZuKSA9PiBvYmouZm9yRWFjaChmbik7XG5mdW5jdGlvbiBlYWNoUHJvcChvYmosIGZuLCBjdHgpIHtcbiAgaWYgKGlzLmFycihvYmopKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZuLmNhbGwoY3R4LCBvYmpbaV0sIGAke2l9YCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGZuLmNhbGwoY3R4LCBvYmpba2V5XSwga2V5KTtcbiAgICB9XG4gIH1cbn1cbnZhciB0b0FycmF5ID0gKGEpID0+IGlzLnVuZChhKSA/IFtdIDogaXMuYXJyKGEpID8gYSA6IFthXTtcbmZ1bmN0aW9uIGZsdXNoKHF1ZXVlLCBpdGVyYXRvcikge1xuICBpZiAocXVldWUuc2l6ZSkge1xuICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShxdWV1ZSk7XG4gICAgcXVldWUuY2xlYXIoKTtcbiAgICBlYWNoKGl0ZW1zLCBpdGVyYXRvcik7XG4gIH1cbn1cbnZhciBmbHVzaENhbGxzID0gKHF1ZXVlLCAuLi5hcmdzKSA9PiBmbHVzaChxdWV1ZSwgKGZuKSA9PiBmbiguLi5hcmdzKSk7XG52YXIgaXNTU1IgPSAoKSA9PiB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cubmF2aWdhdG9yIHx8IC9TZXJ2ZXJTaWRlUmVuZGVyaW5nfF5EZW5vXFwvLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLy8gc3JjL2dsb2JhbHMudHNcbnZhciBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3I7XG52YXIgdG87XG52YXIgY29sb3JzID0gbnVsbDtcbnZhciBza2lwQW5pbWF0aW9uID0gZmFsc2U7XG52YXIgd2lsbEFkdmFuY2UgPSBub29wO1xudmFyIGFzc2lnbiA9IChnbG9iYWxzKSA9PiB7XG4gIGlmIChnbG9iYWxzLnRvKVxuICAgIHRvID0gZ2xvYmFscy50bztcbiAgaWYgKGdsb2JhbHMubm93KVxuICAgIHJhZi5ub3cgPSBnbG9iYWxzLm5vdztcbiAgaWYgKGdsb2JhbHMuY29sb3JzICE9PSB2b2lkIDApXG4gICAgY29sb3JzID0gZ2xvYmFscy5jb2xvcnM7XG4gIGlmIChnbG9iYWxzLnNraXBBbmltYXRpb24gIT0gbnVsbClcbiAgICBza2lwQW5pbWF0aW9uID0gZ2xvYmFscy5za2lwQW5pbWF0aW9uO1xuICBpZiAoZ2xvYmFscy5jcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IpXG4gICAgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yID0gZ2xvYmFscy5jcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3I7XG4gIGlmIChnbG9iYWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICByYWYudXNlKGdsb2JhbHMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcbiAgaWYgKGdsb2JhbHMuYmF0Y2hlZFVwZGF0ZXMpXG4gICAgcmFmLmJhdGNoZWRVcGRhdGVzID0gZ2xvYmFscy5iYXRjaGVkVXBkYXRlcztcbiAgaWYgKGdsb2JhbHMud2lsbEFkdmFuY2UpXG4gICAgd2lsbEFkdmFuY2UgPSBnbG9iYWxzLndpbGxBZHZhbmNlO1xuICBpZiAoZ2xvYmFscy5mcmFtZUxvb3ApXG4gICAgcmFmLmZyYW1lTG9vcCA9IGdsb2JhbHMuZnJhbWVMb29wO1xufTtcblxuLy8gc3JjL0ZyYW1lTG9vcC50c1xuaW1wb3J0IHsgcmFmIGFzIHJhZjIgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9yYWZ6XCI7XG52YXIgc3RhcnRRdWV1ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG52YXIgY3VycmVudEZyYW1lID0gW107XG52YXIgcHJldkZyYW1lID0gW107XG52YXIgcHJpb3JpdHkgPSAwO1xudmFyIGZyYW1lTG9vcCA9IHtcbiAgZ2V0IGlkbGUoKSB7XG4gICAgcmV0dXJuICFzdGFydFF1ZXVlLnNpemUgJiYgIWN1cnJlbnRGcmFtZS5sZW5ndGg7XG4gIH0sXG4gIC8qKiBBZHZhbmNlIHRoZSBnaXZlbiBhbmltYXRpb24gb24gZXZlcnkgZnJhbWUgdW50aWwgaWRsZS4gKi9cbiAgc3RhcnQoYW5pbWF0aW9uKSB7XG4gICAgaWYgKHByaW9yaXR5ID4gYW5pbWF0aW9uLnByaW9yaXR5KSB7XG4gICAgICBzdGFydFF1ZXVlLmFkZChhbmltYXRpb24pO1xuICAgICAgcmFmMi5vblN0YXJ0KGZsdXNoU3RhcnRRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0U2FmZWx5KGFuaW1hdGlvbik7XG4gICAgICByYWYyKGFkdmFuY2UpO1xuICAgIH1cbiAgfSxcbiAgLyoqIEFkdmFuY2UgYWxsIGFuaW1hdGlvbnMgYnkgdGhlIGdpdmVuIHRpbWUuICovXG4gIGFkdmFuY2UsXG4gIC8qKiBDYWxsIHRoaXMgd2hlbiBhbiBhbmltYXRpb24ncyBwcmlvcml0eSBjaGFuZ2VzLiAqL1xuICBzb3J0KGFuaW1hdGlvbikge1xuICAgIGlmIChwcmlvcml0eSkge1xuICAgICAgcmFmMi5vbkZyYW1lKCgpID0+IGZyYW1lTG9vcC5zb3J0KGFuaW1hdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcmV2SW5kZXggPSBjdXJyZW50RnJhbWUuaW5kZXhPZihhbmltYXRpb24pO1xuICAgICAgaWYgKH5wcmV2SW5kZXgpIHtcbiAgICAgICAgY3VycmVudEZyYW1lLnNwbGljZShwcmV2SW5kZXgsIDEpO1xuICAgICAgICBzdGFydFVuc2FmZWx5KGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogQ2xlYXIgYWxsIGFuaW1hdGlvbnMuIEZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICAgKlxuICAgKiDimKDvuI8gTmV2ZXIgY2FsbCB0aGlzIGZyb20gd2l0aGluIHRoZSBmcmFtZWxvb3AuXG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBjdXJyZW50RnJhbWUgPSBbXTtcbiAgICBzdGFydFF1ZXVlLmNsZWFyKCk7XG4gIH1cbn07XG5mdW5jdGlvbiBmbHVzaFN0YXJ0UXVldWUoKSB7XG4gIHN0YXJ0UXVldWUuZm9yRWFjaChzdGFydFNhZmVseSk7XG4gIHN0YXJ0UXVldWUuY2xlYXIoKTtcbiAgcmFmMihhZHZhbmNlKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0U2FmZWx5KGFuaW1hdGlvbikge1xuICBpZiAoIWN1cnJlbnRGcmFtZS5pbmNsdWRlcyhhbmltYXRpb24pKVxuICAgIHN0YXJ0VW5zYWZlbHkoYW5pbWF0aW9uKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0VW5zYWZlbHkoYW5pbWF0aW9uKSB7XG4gIGN1cnJlbnRGcmFtZS5zcGxpY2UoXG4gICAgZmluZEluZGV4KGN1cnJlbnRGcmFtZSwgKG90aGVyKSA9PiBvdGhlci5wcmlvcml0eSA+IGFuaW1hdGlvbi5wcmlvcml0eSksXG4gICAgMCxcbiAgICBhbmltYXRpb25cbiAgKTtcbn1cbmZ1bmN0aW9uIGFkdmFuY2UoZHQpIHtcbiAgY29uc3QgbmV4dEZyYW1lID0gcHJldkZyYW1lO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRGcmFtZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IGN1cnJlbnRGcmFtZVtpXTtcbiAgICBwcmlvcml0eSA9IGFuaW1hdGlvbi5wcmlvcml0eTtcbiAgICBpZiAoIWFuaW1hdGlvbi5pZGxlKSB7XG4gICAgICB3aWxsQWR2YW5jZShhbmltYXRpb24pO1xuICAgICAgYW5pbWF0aW9uLmFkdmFuY2UoZHQpO1xuICAgICAgaWYgKCFhbmltYXRpb24uaWRsZSkge1xuICAgICAgICBuZXh0RnJhbWUucHVzaChhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwcmlvcml0eSA9IDA7XG4gIHByZXZGcmFtZSA9IGN1cnJlbnRGcmFtZTtcbiAgcHJldkZyYW1lLmxlbmd0aCA9IDA7XG4gIGN1cnJlbnRGcmFtZSA9IG5leHRGcmFtZTtcbiAgcmV0dXJuIGN1cnJlbnRGcmFtZS5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgdGVzdCkge1xuICBjb25zdCBpbmRleCA9IGFyci5maW5kSW5kZXgodGVzdCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBhcnIubGVuZ3RoIDogaW5kZXg7XG59XG5cbi8vIHNyYy9jbGFtcC50c1xudmFyIGNsYW1wID0gKG1pbiwgbWF4LCB2KSA9PiBNYXRoLm1pbihNYXRoLm1heCh2LCBtaW4pLCBtYXgpO1xuXG4vLyBzcmMvY29sb3JzLnRzXG52YXIgY29sb3JzMiA9IHtcbiAgdHJhbnNwYXJlbnQ6IDAsXG4gIGFsaWNlYmx1ZTogNDA0Mjg1MDMwMyxcbiAgYW50aXF1ZXdoaXRlOiA0MjA5NzYwMjU1LFxuICBhcXVhOiAxNjc3NzIxNSxcbiAgYXF1YW1hcmluZTogMjE0NzQ3MjYzOSxcbiAgYXp1cmU6IDQwNDMzMDkwNTUsXG4gIGJlaWdlOiA0MTI2NTMwODE1LFxuICBiaXNxdWU6IDQyOTMxODI3MTksXG4gIGJsYWNrOiAyNTUsXG4gIGJsYW5jaGVkYWxtb25kOiA0MjkzNjQzNzc1LFxuICBibHVlOiA2NTUzNSxcbiAgYmx1ZXZpb2xldDogMjMxODEzMTk2NyxcbiAgYnJvd246IDI3NzEwMDQxNTksXG4gIGJ1cmx5d29vZDogMzczNjYzNTM5MSxcbiAgYnVybnRzaWVubmE6IDM5MzQxNTAxNDMsXG4gIGNhZGV0Ymx1ZTogMTYwNDIzMTQyMyxcbiAgY2hhcnRyZXVzZTogMjE0NzQxODM2NyxcbiAgY2hvY29sYXRlOiAzNTMwMTA0NTc1LFxuICBjb3JhbDogNDI4NjUzMzg4NyxcbiAgY29ybmZsb3dlcmJsdWU6IDE2ODc1NDczOTEsXG4gIGNvcm5zaWxrOiA0Mjk0NDk5NTgzLFxuICBjcmltc29uOiAzNjkyMzEzODU1LFxuICBjeWFuOiAxNjc3NzIxNSxcbiAgZGFya2JsdWU6IDM1ODM5LFxuICBkYXJrY3lhbjogOTE0NTM0MyxcbiAgZGFya2dvbGRlbnJvZDogMzA5NTc5MjYzOSxcbiAgZGFya2dyYXk6IDI4NDY0Njg2MDcsXG4gIGRhcmtncmVlbjogNjU1Mzg1NSxcbiAgZGFya2dyZXk6IDI4NDY0Njg2MDcsXG4gIGRhcmtraGFraTogMzE4MjkxNDU1OSxcbiAgZGFya21hZ2VudGE6IDIzMzIwNjg4NjMsXG4gIGRhcmtvbGl2ZWdyZWVuOiAxNDMzMDg3OTk5LFxuICBkYXJrb3JhbmdlOiA0Mjg3MzY1Mzc1LFxuICBkYXJrb3JjaGlkOiAyNTcwMjQzMzI3LFxuICBkYXJrcmVkOiAyMzMyMDMzMjc5LFxuICBkYXJrc2FsbW9uOiAzOTE4OTUzMjE1LFxuICBkYXJrc2VhZ3JlZW46IDI0MTE0OTk1MTksXG4gIGRhcmtzbGF0ZWJsdWU6IDEyMTE5OTMwODcsXG4gIGRhcmtzbGF0ZWdyYXk6IDc5MzcyNjk3NSxcbiAgZGFya3NsYXRlZ3JleTogNzkzNzI2OTc1LFxuICBkYXJrdHVycXVvaXNlOiAxMzU1NDE3NSxcbiAgZGFya3Zpb2xldDogMjQ4MzA4MjIzOSxcbiAgZGVlcHBpbms6IDQyNzk1Mzg2ODcsXG4gIGRlZXBza3libHVlOiAxMjU4MjkxMSxcbiAgZGltZ3JheTogMTc2ODUxNjA5NSxcbiAgZGltZ3JleTogMTc2ODUxNjA5NSxcbiAgZG9kZ2VyYmx1ZTogNTEyODE5MTk5LFxuICBmaXJlYnJpY2s6IDI5ODg1ODE2MzEsXG4gIGZsb3JhbHdoaXRlOiA0Mjk0NjM1Nzc1LFxuICBmb3Jlc3RncmVlbjogNTc5NTQzODA3LFxuICBmdWNoc2lhOiA0Mjc4MjU1NjE1LFxuICBnYWluc2Jvcm86IDM3MDU0NjIwMTUsXG4gIGdob3N0d2hpdGU6IDQxNzcwNjgwMzEsXG4gIGdvbGQ6IDQyOTIyODA1NzUsXG4gIGdvbGRlbnJvZDogMzY2ODI1NDk3NSxcbiAgZ3JheTogMjE1NTkwNTI3OSxcbiAgZ3JlZW46IDgzODg4NjMsXG4gIGdyZWVueWVsbG93OiAyOTE5MTgyMzM1LFxuICBncmV5OiAyMTU1OTA1Mjc5LFxuICBob25leWRldzogNDA0MzMwNTIxNSxcbiAgaG90cGluazogNDI4NTExNzY5NSxcbiAgaW5kaWFucmVkOiAzNDQ1MzgyMzk5LFxuICBpbmRpZ286IDEyNTgzMjQ3MzUsXG4gIGl2b3J5OiA0Mjk0OTYzNDU1LFxuICBraGFraTogNDA0MTY0MTIxNSxcbiAgbGF2ZW5kZXI6IDM4NzM4OTcyMTUsXG4gIGxhdmVuZGVyYmx1c2g6IDQyOTM5ODE2OTUsXG4gIGxhd25ncmVlbjogMjA5Njg5MDExMSxcbiAgbGVtb25jaGlmZm9uOiA0Mjk0NjI2ODE1LFxuICBsaWdodGJsdWU6IDI5MTY2NzMyNzksXG4gIGxpZ2h0Y29yYWw6IDQwMzQ5NTM0NzEsXG4gIGxpZ2h0Y3lhbjogMzc3NDg3MzU5OSxcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDQyMTA3NDIwMTUsXG4gIGxpZ2h0Z3JheTogMzU1Mzg3NDk0MyxcbiAgbGlnaHRncmVlbjogMjQzMTU1Mzc5MSxcbiAgbGlnaHRncmV5OiAzNTUzODc0OTQzLFxuICBsaWdodHBpbms6IDQyOTAxNjcyOTUsXG4gIGxpZ2h0c2FsbW9uOiA0Mjg4NzA3MzI3LFxuICBsaWdodHNlYWdyZWVuOiA1NDg1ODAwOTUsXG4gIGxpZ2h0c2t5Ymx1ZTogMjI3ODQ4ODgzMSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDIwMDU0NDEwMjMsXG4gIGxpZ2h0c2xhdGVncmV5OiAyMDA1NDQxMDIzLFxuICBsaWdodHN0ZWVsYmx1ZTogMjk2NTY5MjE1OSxcbiAgbGlnaHR5ZWxsb3c6IDQyOTQ5NTkzNTksXG4gIGxpbWU6IDE2NzExOTM1LFxuICBsaW1lZ3JlZW46IDg1MjMwODczNSxcbiAgbGluZW46IDQyMTAwOTE3NzUsXG4gIG1hZ2VudGE6IDQyNzgyNTU2MTUsXG4gIG1hcm9vbjogMjE0NzQ4MzkwMyxcbiAgbWVkaXVtYXF1YW1hcmluZTogMTcyNDc1NDY4NyxcbiAgbWVkaXVtYmx1ZTogNTI3MzUsXG4gIG1lZGl1bW9yY2hpZDogMzEyNjE4NzAwNyxcbiAgbWVkaXVtcHVycGxlOiAyNDczNjQ3MTAzLFxuICBtZWRpdW1zZWFncmVlbjogMTAxODM5MzA4NyxcbiAgbWVkaXVtc2xhdGVibHVlOiAyMDcwNDc0NDk1LFxuICBtZWRpdW1zcHJpbmdncmVlbjogMTY0MjM2NzksXG4gIG1lZGl1bXR1cnF1b2lzZTogMTIyMTcwOTA1NSxcbiAgbWVkaXVtdmlvbGV0cmVkOiAzMzQwMDc2NTQzLFxuICBtaWRuaWdodGJsdWU6IDQyMTA5NzcyNyxcbiAgbWludGNyZWFtOiA0MTI3MTkzODU1LFxuICBtaXN0eXJvc2U6IDQyOTMxOTAxNDMsXG4gIG1vY2Nhc2luOiA0MjkzMTc4ODc5LFxuICBuYXZham93aGl0ZTogNDI5Mjc4MzYxNSxcbiAgbmF2eTogMzMwMjMsXG4gIG9sZGxhY2U6IDQyNjA3NTExMDMsXG4gIG9saXZlOiAyMTU1ODcyNTExLFxuICBvbGl2ZWRyYWI6IDE4MDQ0Nzc0MzksXG4gIG9yYW5nZTogNDI4OTAwMzc3NSxcbiAgb3JhbmdlcmVkOiA0MjgyNzEyMzE5LFxuICBvcmNoaWQ6IDM2NjQ4MjgxNTksXG4gIHBhbGVnb2xkZW5yb2Q6IDQwMDgyMjU1MzUsXG4gIHBhbGVncmVlbjogMjU2NjYyNTUzNSxcbiAgcGFsZXR1cnF1b2lzZTogMjk1MTY3MTU1MSxcbiAgcGFsZXZpb2xldHJlZDogMzY4MTU4ODIyMyxcbiAgcGFwYXlhd2hpcDogNDI5MzkwNzk2NyxcbiAgcGVhY2hwdWZmOiA0MjkyNTI0NTQzLFxuICBwZXJ1OiAzNDQ4MDYxOTUxLFxuICBwaW5rOiA0MjkwODI1MjE1LFxuICBwbHVtOiAzNzE4MzA3MzI3LFxuICBwb3dkZXJibHVlOiAyOTY3NTI5MjE1LFxuICBwdXJwbGU6IDIxNDc1MTY2NzEsXG4gIHJlYmVjY2FwdXJwbGU6IDE3MTQ2NTc3OTEsXG4gIHJlZDogNDI3ODE5MDMzNSxcbiAgcm9zeWJyb3duOiAzMTYzNTI1MTE5LFxuICByb3lhbGJsdWU6IDEwOTc0NTgxNzUsXG4gIHNhZGRsZWJyb3duOiAyMzM2NTYwMTI3LFxuICBzYWxtb246IDQyMDI3MjIwNDcsXG4gIHNhbmR5YnJvd246IDQxMDQ0MTM0MzksXG4gIHNlYWdyZWVuOiA3ODA4ODM5NjcsXG4gIHNlYXNoZWxsOiA0Mjk0MzA3NTgzLFxuICBzaWVubmE6IDI2ODk3NDAyODcsXG4gIHNpbHZlcjogMzIzMzg1Nzc5MSxcbiAgc2t5Ymx1ZTogMjI3ODQ4NDk5MSxcbiAgc2xhdGVibHVlOiAxNzg0MzM1ODcxLFxuICBzbGF0ZWdyYXk6IDE4ODc0NzM5MTksXG4gIHNsYXRlZ3JleTogMTg4NzQ3MzkxOSxcbiAgc25vdzogNDI5NDYzODMzNSxcbiAgc3ByaW5nZ3JlZW46IDE2NzQ0NDQ3LFxuICBzdGVlbGJsdWU6IDExODI5NzExMzUsXG4gIHRhbjogMzUzNTA0NzkzNSxcbiAgdGVhbDogODQyMTYzMSxcbiAgdGhpc3RsZTogMzYzNjQ1MTU4MyxcbiAgdG9tYXRvOiA0Mjg0Njk2NTc1LFxuICB0dXJxdW9pc2U6IDEwODg0NzUzOTEsXG4gIHZpb2xldDogNDAwMTU1ODI3MSxcbiAgd2hlYXQ6IDQxMjUwMTI5OTEsXG4gIHdoaXRlOiA0Mjk0OTY3Mjk1LFxuICB3aGl0ZXNtb2tlOiA0MTI2NTM3MjE1LFxuICB5ZWxsb3c6IDQyOTQ5MDIwMTUsXG4gIHllbGxvd2dyZWVuOiAyNTk3MTM5MTk5XG59O1xuXG4vLyBzcmMvY29sb3JNYXRjaGVycy50c1xudmFyIE5VTUJFUiA9IFwiWy0rXT9cXFxcZCpcXFxcLj9cXFxcZCtcIjtcbnZhciBQRVJDRU5UQUdFID0gTlVNQkVSICsgXCIlXCI7XG5mdW5jdGlvbiBjYWxsKC4uLnBhcnRzKSB7XG4gIHJldHVybiBcIlxcXFwoXFxcXHMqKFwiICsgcGFydHMuam9pbihcIilcXFxccyosXFxcXHMqKFwiKSArIFwiKVxcXFxzKlxcXFwpXCI7XG59XG52YXIgcmdiID0gbmV3IFJlZ0V4cChcInJnYlwiICsgY2FsbChOVU1CRVIsIE5VTUJFUiwgTlVNQkVSKSk7XG52YXIgcmdiYSA9IG5ldyBSZWdFeHAoXCJyZ2JhXCIgKyBjYWxsKE5VTUJFUiwgTlVNQkVSLCBOVU1CRVIsIE5VTUJFUikpO1xudmFyIGhzbCA9IG5ldyBSZWdFeHAoXCJoc2xcIiArIGNhbGwoTlVNQkVSLCBQRVJDRU5UQUdFLCBQRVJDRU5UQUdFKSk7XG52YXIgaHNsYSA9IG5ldyBSZWdFeHAoXG4gIFwiaHNsYVwiICsgY2FsbChOVU1CRVIsIFBFUkNFTlRBR0UsIFBFUkNFTlRBR0UsIE5VTUJFUilcbik7XG52YXIgaGV4MyA9IC9eIyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvO1xudmFyIGhleDQgPSAvXiMoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC87XG52YXIgaGV4NiA9IC9eIyhbMC05YS1mQS1GXXs2fSkkLztcbnZhciBoZXg4ID0gL14jKFswLTlhLWZBLUZdezh9KSQvO1xuXG4vLyBzcmMvbm9ybWFsaXplQ29sb3IudHNcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbG9yKGNvbG9yKSB7XG4gIGxldCBtYXRjaDtcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBjb2xvciA+Pj4gMCA9PT0gY29sb3IgJiYgY29sb3IgPj0gMCAmJiBjb2xvciA8PSA0Mjk0OTY3Mjk1ID8gY29sb3IgOiBudWxsO1xuICB9XG4gIGlmIChtYXRjaCA9IGhleDYuZXhlYyhjb2xvcikpXG4gICAgcmV0dXJuIHBhcnNlSW50KG1hdGNoWzFdICsgXCJmZlwiLCAxNikgPj4+IDA7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzW2NvbG9yXSAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGNvbG9yc1tjb2xvcl07XG4gIH1cbiAgaWYgKG1hdGNoID0gcmdiLmV4ZWMoY29sb3IpKSB7XG4gICAgcmV0dXJuIChwYXJzZTI1NShtYXRjaFsxXSkgPDwgMjQgfCAvLyByXG4gICAgcGFyc2UyNTUobWF0Y2hbMl0pIDw8IDE2IHwgLy8gZ1xuICAgIHBhcnNlMjU1KG1hdGNoWzNdKSA8PCA4IHwgLy8gYlxuICAgIDI1NSkgPj4+IC8vIGFcbiAgICAwO1xuICB9XG4gIGlmIChtYXRjaCA9IHJnYmEuZXhlYyhjb2xvcikpIHtcbiAgICByZXR1cm4gKHBhcnNlMjU1KG1hdGNoWzFdKSA8PCAyNCB8IC8vIHJcbiAgICBwYXJzZTI1NShtYXRjaFsyXSkgPDwgMTYgfCAvLyBnXG4gICAgcGFyc2UyNTUobWF0Y2hbM10pIDw8IDggfCAvLyBiXG4gICAgcGFyc2UxKG1hdGNoWzRdKSkgPj4+IC8vIGFcbiAgICAwO1xuICB9XG4gIGlmIChtYXRjaCA9IGhleDMuZXhlYyhjb2xvcikpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoXG4gICAgICBtYXRjaFsxXSArIG1hdGNoWzFdICsgLy8gclxuICAgICAgbWF0Y2hbMl0gKyBtYXRjaFsyXSArIC8vIGdcbiAgICAgIG1hdGNoWzNdICsgbWF0Y2hbM10gKyAvLyBiXG4gICAgICBcImZmXCIsXG4gICAgICAvLyBhXG4gICAgICAxNlxuICAgICkgPj4+IDA7XG4gIH1cbiAgaWYgKG1hdGNoID0gaGV4OC5leGVjKGNvbG9yKSlcbiAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0sIDE2KSA+Pj4gMDtcbiAgaWYgKG1hdGNoID0gaGV4NC5leGVjKGNvbG9yKSkge1xuICAgIHJldHVybiBwYXJzZUludChcbiAgICAgIG1hdGNoWzFdICsgbWF0Y2hbMV0gKyAvLyByXG4gICAgICBtYXRjaFsyXSArIG1hdGNoWzJdICsgLy8gZ1xuICAgICAgbWF0Y2hbM10gKyBtYXRjaFszXSArIC8vIGJcbiAgICAgIG1hdGNoWzRdICsgbWF0Y2hbNF0sXG4gICAgICAvLyBhXG4gICAgICAxNlxuICAgICkgPj4+IDA7XG4gIH1cbiAgaWYgKG1hdGNoID0gaHNsLmV4ZWMoY29sb3IpKSB7XG4gICAgcmV0dXJuIChoc2xUb1JnYihcbiAgICAgIHBhcnNlMzYwKG1hdGNoWzFdKSxcbiAgICAgIC8vIGhcbiAgICAgIHBhcnNlUGVyY2VudGFnZShtYXRjaFsyXSksXG4gICAgICAvLyBzXG4gICAgICBwYXJzZVBlcmNlbnRhZ2UobWF0Y2hbM10pXG4gICAgICAvLyBsXG4gICAgKSB8IDI1NSkgPj4+IC8vIGFcbiAgICAwO1xuICB9XG4gIGlmIChtYXRjaCA9IGhzbGEuZXhlYyhjb2xvcikpIHtcbiAgICByZXR1cm4gKGhzbFRvUmdiKFxuICAgICAgcGFyc2UzNjAobWF0Y2hbMV0pLFxuICAgICAgLy8gaFxuICAgICAgcGFyc2VQZXJjZW50YWdlKG1hdGNoWzJdKSxcbiAgICAgIC8vIHNcbiAgICAgIHBhcnNlUGVyY2VudGFnZShtYXRjaFszXSlcbiAgICAgIC8vIGxcbiAgICApIHwgcGFyc2UxKG1hdGNoWzRdKSkgPj4+IC8vIGFcbiAgICAwO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gIGlmICh0IDwgMClcbiAgICB0ICs9IDE7XG4gIGlmICh0ID4gMSlcbiAgICB0IC09IDE7XG4gIGlmICh0IDwgMSAvIDYpXG4gICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gIGlmICh0IDwgMSAvIDIpXG4gICAgcmV0dXJuIHE7XG4gIGlmICh0IDwgMiAvIDMpXG4gICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGhzbFRvUmdiKGgsIHMsIGwpIHtcbiAgY29uc3QgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gIGNvbnN0IHAgPSAyICogbCAtIHE7XG4gIGNvbnN0IHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gIGNvbnN0IGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICBjb25zdCBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICByZXR1cm4gTWF0aC5yb3VuZChyICogMjU1KSA8PCAyNCB8IE1hdGgucm91bmQoZyAqIDI1NSkgPDwgMTYgfCBNYXRoLnJvdW5kKGIgKiAyNTUpIDw8IDg7XG59XG5mdW5jdGlvbiBwYXJzZTI1NShzdHIpIHtcbiAgY29uc3QgaW50ID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIGlmIChpbnQgPCAwKVxuICAgIHJldHVybiAwO1xuICBpZiAoaW50ID4gMjU1KVxuICAgIHJldHVybiAyNTU7XG4gIHJldHVybiBpbnQ7XG59XG5mdW5jdGlvbiBwYXJzZTM2MChzdHIpIHtcbiAgY29uc3QgaW50ID0gcGFyc2VGbG9hdChzdHIpO1xuICByZXR1cm4gKGludCAlIDM2MCArIDM2MCkgJSAzNjAgLyAzNjA7XG59XG5mdW5jdGlvbiBwYXJzZTEoc3RyKSB7XG4gIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQoc3RyKTtcbiAgaWYgKG51bSA8IDApXG4gICAgcmV0dXJuIDA7XG4gIGlmIChudW0gPiAxKVxuICAgIHJldHVybiAyNTU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIDI1NSk7XG59XG5mdW5jdGlvbiBwYXJzZVBlcmNlbnRhZ2Uoc3RyKSB7XG4gIGNvbnN0IGludCA9IHBhcnNlRmxvYXQoc3RyKTtcbiAgaWYgKGludCA8IDApXG4gICAgcmV0dXJuIDA7XG4gIGlmIChpbnQgPiAxMDApXG4gICAgcmV0dXJuIDE7XG4gIHJldHVybiBpbnQgLyAxMDA7XG59XG5cbi8vIHNyYy9jb2xvclRvUmdiYS50c1xuZnVuY3Rpb24gY29sb3JUb1JnYmEoaW5wdXQpIHtcbiAgbGV0IGludDMyQ29sb3IgPSBub3JtYWxpemVDb2xvcihpbnB1dCk7XG4gIGlmIChpbnQzMkNvbG9yID09PSBudWxsKVxuICAgIHJldHVybiBpbnB1dDtcbiAgaW50MzJDb2xvciA9IGludDMyQ29sb3IgfHwgMDtcbiAgY29uc3QgciA9IChpbnQzMkNvbG9yICYgNDI3ODE5MDA4MCkgPj4+IDI0O1xuICBjb25zdCBnID0gKGludDMyQ29sb3IgJiAxNjcxMTY4MCkgPj4+IDE2O1xuICBjb25zdCBiID0gKGludDMyQ29sb3IgJiA2NTI4MCkgPj4+IDg7XG4gIGNvbnN0IGEgPSAoaW50MzJDb2xvciAmIDI1NSkgLyAyNTU7XG4gIHJldHVybiBgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWA7XG59XG5cbi8vIHNyYy9jcmVhdGVJbnRlcnBvbGF0b3IudHNcbnZhciBjcmVhdGVJbnRlcnBvbGF0b3IgPSAocmFuZ2UsIG91dHB1dCwgZXh0cmFwb2xhdGUpID0+IHtcbiAgaWYgKGlzLmZ1bihyYW5nZSkpIHtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgaWYgKGlzLmFycihyYW5nZSkpIHtcbiAgICByZXR1cm4gY3JlYXRlSW50ZXJwb2xhdG9yKHtcbiAgICAgIHJhbmdlLFxuICAgICAgb3V0cHV0LFxuICAgICAgZXh0cmFwb2xhdGVcbiAgICB9KTtcbiAgfVxuICBpZiAoaXMuc3RyKHJhbmdlLm91dHB1dFswXSkpIHtcbiAgICByZXR1cm4gY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yKHJhbmdlKTtcbiAgfVxuICBjb25zdCBjb25maWcgPSByYW5nZTtcbiAgY29uc3Qgb3V0cHV0UmFuZ2UgPSBjb25maWcub3V0cHV0O1xuICBjb25zdCBpbnB1dFJhbmdlID0gY29uZmlnLnJhbmdlIHx8IFswLCAxXTtcbiAgY29uc3QgZXh0cmFwb2xhdGVMZWZ0ID0gY29uZmlnLmV4dHJhcG9sYXRlTGVmdCB8fCBjb25maWcuZXh0cmFwb2xhdGUgfHwgXCJleHRlbmRcIjtcbiAgY29uc3QgZXh0cmFwb2xhdGVSaWdodCA9IGNvbmZpZy5leHRyYXBvbGF0ZVJpZ2h0IHx8IGNvbmZpZy5leHRyYXBvbGF0ZSB8fCBcImV4dGVuZFwiO1xuICBjb25zdCBlYXNpbmcgPSBjb25maWcuZWFzaW5nIHx8ICgodCkgPT4gdCk7XG4gIHJldHVybiAoaW5wdXQpID0+IHtcbiAgICBjb25zdCByYW5nZTIgPSBmaW5kUmFuZ2UoaW5wdXQsIGlucHV0UmFuZ2UpO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZShcbiAgICAgIGlucHV0LFxuICAgICAgaW5wdXRSYW5nZVtyYW5nZTJdLFxuICAgICAgaW5wdXRSYW5nZVtyYW5nZTIgKyAxXSxcbiAgICAgIG91dHB1dFJhbmdlW3JhbmdlMl0sXG4gICAgICBvdXRwdXRSYW5nZVtyYW5nZTIgKyAxXSxcbiAgICAgIGVhc2luZyxcbiAgICAgIGV4dHJhcG9sYXRlTGVmdCxcbiAgICAgIGV4dHJhcG9sYXRlUmlnaHQsXG4gICAgICBjb25maWcubWFwXG4gICAgKTtcbiAgfTtcbn07XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShpbnB1dCwgaW5wdXRNaW4sIGlucHV0TWF4LCBvdXRwdXRNaW4sIG91dHB1dE1heCwgZWFzaW5nLCBleHRyYXBvbGF0ZUxlZnQsIGV4dHJhcG9sYXRlUmlnaHQsIG1hcCkge1xuICBsZXQgcmVzdWx0ID0gbWFwID8gbWFwKGlucHV0KSA6IGlucHV0O1xuICBpZiAocmVzdWx0IDwgaW5wdXRNaW4pIHtcbiAgICBpZiAoZXh0cmFwb2xhdGVMZWZ0ID09PSBcImlkZW50aXR5XCIpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGVsc2UgaWYgKGV4dHJhcG9sYXRlTGVmdCA9PT0gXCJjbGFtcFwiKVxuICAgICAgcmVzdWx0ID0gaW5wdXRNaW47XG4gIH1cbiAgaWYgKHJlc3VsdCA+IGlucHV0TWF4KSB7XG4gICAgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09IFwiaWRlbnRpdHlcIilcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgZWxzZSBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gXCJjbGFtcFwiKVxuICAgICAgcmVzdWx0ID0gaW5wdXRNYXg7XG4gIH1cbiAgaWYgKG91dHB1dE1pbiA9PT0gb3V0cHV0TWF4KVxuICAgIHJldHVybiBvdXRwdXRNaW47XG4gIGlmIChpbnB1dE1pbiA9PT0gaW5wdXRNYXgpXG4gICAgcmV0dXJuIGlucHV0IDw9IGlucHV0TWluID8gb3V0cHV0TWluIDogb3V0cHV0TWF4O1xuICBpZiAoaW5wdXRNaW4gPT09IC1JbmZpbml0eSlcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xuICBlbHNlIGlmIChpbnB1dE1heCA9PT0gSW5maW5pdHkpXG4gICAgcmVzdWx0ID0gcmVzdWx0IC0gaW5wdXRNaW47XG4gIGVsc2VcbiAgICByZXN1bHQgPSAocmVzdWx0IC0gaW5wdXRNaW4pIC8gKGlucHV0TWF4IC0gaW5wdXRNaW4pO1xuICByZXN1bHQgPSBlYXNpbmcocmVzdWx0KTtcbiAgaWYgKG91dHB1dE1pbiA9PT0gLUluZmluaXR5KVxuICAgIHJlc3VsdCA9IC1yZXN1bHQ7XG4gIGVsc2UgaWYgKG91dHB1dE1heCA9PT0gSW5maW5pdHkpXG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgb3V0cHV0TWluO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gcmVzdWx0ICogKG91dHB1dE1heCAtIG91dHB1dE1pbikgKyBvdXRwdXRNaW47XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaW5kUmFuZ2UoaW5wdXQsIGlucHV0UmFuZ2UpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBpbnB1dFJhbmdlLmxlbmd0aCAtIDE7ICsraSlcbiAgICBpZiAoaW5wdXRSYW5nZVtpXSA+PSBpbnB1dClcbiAgICAgIGJyZWFrO1xuICByZXR1cm4gaSAtIDE7XG59XG5cbi8vIHNyYy9lYXNpbmdzLnRzXG52YXIgc3RlcHMgPSAoc3RlcHMyLCBkaXJlY3Rpb24gPSBcImVuZFwiKSA9PiAocHJvZ3Jlc3MyKSA9PiB7XG4gIHByb2dyZXNzMiA9IGRpcmVjdGlvbiA9PT0gXCJlbmRcIiA/IE1hdGgubWluKHByb2dyZXNzMiwgMC45OTkpIDogTWF0aC5tYXgocHJvZ3Jlc3MyLCAxZS0zKTtcbiAgY29uc3QgZXhwYW5kZWQgPSBwcm9ncmVzczIgKiBzdGVwczI7XG4gIGNvbnN0IHJvdW5kZWQgPSBkaXJlY3Rpb24gPT09IFwiZW5kXCIgPyBNYXRoLmZsb29yKGV4cGFuZGVkKSA6IE1hdGguY2VpbChleHBhbmRlZCk7XG4gIHJldHVybiBjbGFtcCgwLCAxLCByb3VuZGVkIC8gc3RlcHMyKTtcbn07XG52YXIgYzEgPSAxLjcwMTU4O1xudmFyIGMyID0gYzEgKiAxLjUyNTtcbnZhciBjMyA9IGMxICsgMTtcbnZhciBjNCA9IDIgKiBNYXRoLlBJIC8gMztcbnZhciBjNSA9IDIgKiBNYXRoLlBJIC8gNC41O1xudmFyIGJvdW5jZU91dCA9ICh4KSA9PiB7XG4gIGNvbnN0IG4xID0gNy41NjI1O1xuICBjb25zdCBkMSA9IDIuNzU7XG4gIGlmICh4IDwgMSAvIGQxKSB7XG4gICAgcmV0dXJuIG4xICogeCAqIHg7XG4gIH0gZWxzZSBpZiAoeCA8IDIgLyBkMSkge1xuICAgIHJldHVybiBuMSAqICh4IC09IDEuNSAvIGQxKSAqIHggKyAwLjc1O1xuICB9IGVsc2UgaWYgKHggPCAyLjUgLyBkMSkge1xuICAgIHJldHVybiBuMSAqICh4IC09IDIuMjUgLyBkMSkgKiB4ICsgMC45Mzc1O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuMSAqICh4IC09IDIuNjI1IC8gZDEpICogeCArIDAuOTg0Mzc1O1xuICB9XG59O1xudmFyIGVhc2luZ3MgPSB7XG4gIGxpbmVhcjogKHgpID0+IHgsXG4gIGVhc2VJblF1YWQ6ICh4KSA9PiB4ICogeCxcbiAgZWFzZU91dFF1YWQ6ICh4KSA9PiAxIC0gKDEgLSB4KSAqICgxIC0geCksXG4gIGVhc2VJbk91dFF1YWQ6ICh4KSA9PiB4IDwgMC41ID8gMiAqIHggKiB4IDogMSAtIE1hdGgucG93KC0yICogeCArIDIsIDIpIC8gMixcbiAgZWFzZUluQ3ViaWM6ICh4KSA9PiB4ICogeCAqIHgsXG4gIGVhc2VPdXRDdWJpYzogKHgpID0+IDEgLSBNYXRoLnBvdygxIC0geCwgMyksXG4gIGVhc2VJbk91dEN1YmljOiAoeCkgPT4geCA8IDAuNSA/IDQgKiB4ICogeCAqIHggOiAxIC0gTWF0aC5wb3coLTIgKiB4ICsgMiwgMykgLyAyLFxuICBlYXNlSW5RdWFydDogKHgpID0+IHggKiB4ICogeCAqIHgsXG4gIGVhc2VPdXRRdWFydDogKHgpID0+IDEgLSBNYXRoLnBvdygxIC0geCwgNCksXG4gIGVhc2VJbk91dFF1YXJ0OiAoeCkgPT4geCA8IDAuNSA/IDggKiB4ICogeCAqIHggKiB4IDogMSAtIE1hdGgucG93KC0yICogeCArIDIsIDQpIC8gMixcbiAgZWFzZUluUXVpbnQ6ICh4KSA9PiB4ICogeCAqIHggKiB4ICogeCxcbiAgZWFzZU91dFF1aW50OiAoeCkgPT4gMSAtIE1hdGgucG93KDEgLSB4LCA1KSxcbiAgZWFzZUluT3V0UXVpbnQ6ICh4KSA9PiB4IDwgMC41ID8gMTYgKiB4ICogeCAqIHggKiB4ICogeCA6IDEgLSBNYXRoLnBvdygtMiAqIHggKyAyLCA1KSAvIDIsXG4gIGVhc2VJblNpbmU6ICh4KSA9PiAxIC0gTWF0aC5jb3MoeCAqIE1hdGguUEkgLyAyKSxcbiAgZWFzZU91dFNpbmU6ICh4KSA9PiBNYXRoLnNpbih4ICogTWF0aC5QSSAvIDIpLFxuICBlYXNlSW5PdXRTaW5lOiAoeCkgPT4gLShNYXRoLmNvcyhNYXRoLlBJICogeCkgLSAxKSAvIDIsXG4gIGVhc2VJbkV4cG86ICh4KSA9PiB4ID09PSAwID8gMCA6IE1hdGgucG93KDIsIDEwICogeCAtIDEwKSxcbiAgZWFzZU91dEV4cG86ICh4KSA9PiB4ID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiB4KSxcbiAgZWFzZUluT3V0RXhwbzogKHgpID0+IHggPT09IDAgPyAwIDogeCA9PT0gMSA/IDEgOiB4IDwgMC41ID8gTWF0aC5wb3coMiwgMjAgKiB4IC0gMTApIC8gMiA6ICgyIC0gTWF0aC5wb3coMiwgLTIwICogeCArIDEwKSkgLyAyLFxuICBlYXNlSW5DaXJjOiAoeCkgPT4gMSAtIE1hdGguc3FydCgxIC0gTWF0aC5wb3coeCwgMikpLFxuICBlYXNlT3V0Q2lyYzogKHgpID0+IE1hdGguc3FydCgxIC0gTWF0aC5wb3coeCAtIDEsIDIpKSxcbiAgZWFzZUluT3V0Q2lyYzogKHgpID0+IHggPCAwLjUgPyAoMSAtIE1hdGguc3FydCgxIC0gTWF0aC5wb3coMiAqIHgsIDIpKSkgLyAyIDogKE1hdGguc3FydCgxIC0gTWF0aC5wb3coLTIgKiB4ICsgMiwgMikpICsgMSkgLyAyLFxuICBlYXNlSW5CYWNrOiAoeCkgPT4gYzMgKiB4ICogeCAqIHggLSBjMSAqIHggKiB4LFxuICBlYXNlT3V0QmFjazogKHgpID0+IDEgKyBjMyAqIE1hdGgucG93KHggLSAxLCAzKSArIGMxICogTWF0aC5wb3coeCAtIDEsIDIpLFxuICBlYXNlSW5PdXRCYWNrOiAoeCkgPT4geCA8IDAuNSA/IE1hdGgucG93KDIgKiB4LCAyKSAqICgoYzIgKyAxKSAqIDIgKiB4IC0gYzIpIC8gMiA6IChNYXRoLnBvdygyICogeCAtIDIsIDIpICogKChjMiArIDEpICogKHggKiAyIC0gMikgKyBjMikgKyAyKSAvIDIsXG4gIGVhc2VJbkVsYXN0aWM6ICh4KSA9PiB4ID09PSAwID8gMCA6IHggPT09IDEgPyAxIDogLU1hdGgucG93KDIsIDEwICogeCAtIDEwKSAqIE1hdGguc2luKCh4ICogMTAgLSAxMC43NSkgKiBjNCksXG4gIGVhc2VPdXRFbGFzdGljOiAoeCkgPT4geCA9PT0gMCA/IDAgOiB4ID09PSAxID8gMSA6IE1hdGgucG93KDIsIC0xMCAqIHgpICogTWF0aC5zaW4oKHggKiAxMCAtIDAuNzUpICogYzQpICsgMSxcbiAgZWFzZUluT3V0RWxhc3RpYzogKHgpID0+IHggPT09IDAgPyAwIDogeCA9PT0gMSA/IDEgOiB4IDwgMC41ID8gLShNYXRoLnBvdygyLCAyMCAqIHggLSAxMCkgKiBNYXRoLnNpbigoMjAgKiB4IC0gMTEuMTI1KSAqIGM1KSkgLyAyIDogTWF0aC5wb3coMiwgLTIwICogeCArIDEwKSAqIE1hdGguc2luKCgyMCAqIHggLSAxMS4xMjUpICogYzUpIC8gMiArIDEsXG4gIGVhc2VJbkJvdW5jZTogKHgpID0+IDEgLSBib3VuY2VPdXQoMSAtIHgpLFxuICBlYXNlT3V0Qm91bmNlOiBib3VuY2VPdXQsXG4gIGVhc2VJbk91dEJvdW5jZTogKHgpID0+IHggPCAwLjUgPyAoMSAtIGJvdW5jZU91dCgxIC0gMiAqIHgpKSAvIDIgOiAoMSArIGJvdW5jZU91dCgyICogeCAtIDEpKSAvIDIsXG4gIHN0ZXBzXG59O1xuXG4vLyBzcmMvZmx1aWRzLnRzXG52YXIgJGdldCA9IFN5bWJvbC5mb3IoXCJGbHVpZFZhbHVlLmdldFwiKTtcbnZhciAkb2JzZXJ2ZXJzID0gU3ltYm9sLmZvcihcIkZsdWlkVmFsdWUub2JzZXJ2ZXJzXCIpO1xudmFyIGhhc0ZsdWlkVmFsdWUgPSAoYXJnKSA9PiBCb29sZWFuKGFyZyAmJiBhcmdbJGdldF0pO1xudmFyIGdldEZsdWlkVmFsdWUgPSAoYXJnKSA9PiBhcmcgJiYgYXJnWyRnZXRdID8gYXJnWyRnZXRdKCkgOiBhcmc7XG52YXIgZ2V0Rmx1aWRPYnNlcnZlcnMgPSAodGFyZ2V0KSA9PiB0YXJnZXRbJG9ic2VydmVyc10gfHwgbnVsbDtcbmZ1bmN0aW9uIGNhbGxGbHVpZE9ic2VydmVyKG9ic2VydmVyMiwgZXZlbnQpIHtcbiAgaWYgKG9ic2VydmVyMi5ldmVudE9ic2VydmVkKSB7XG4gICAgb2JzZXJ2ZXIyLmV2ZW50T2JzZXJ2ZWQoZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIG9ic2VydmVyMihldmVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxGbHVpZE9ic2VydmVycyh0YXJnZXQsIGV2ZW50KSB7XG4gIGNvbnN0IG9ic2VydmVycyA9IHRhcmdldFskb2JzZXJ2ZXJzXTtcbiAgaWYgKG9ic2VydmVycykge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcjIpID0+IHtcbiAgICAgIGNhbGxGbHVpZE9ic2VydmVyKG9ic2VydmVyMiwgZXZlbnQpO1xuICAgIH0pO1xuICB9XG59XG52YXIgRmx1aWRWYWx1ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoZ2V0KSB7XG4gICAgaWYgKCFnZXQgJiYgIShnZXQgPSB0aGlzLmdldCkpIHtcbiAgICAgIHRocm93IEVycm9yKFwiVW5rbm93biBnZXR0ZXJcIik7XG4gICAgfVxuICAgIHNldEZsdWlkR2V0dGVyKHRoaXMsIGdldCk7XG4gIH1cbn07XG4kZ2V0LCAkb2JzZXJ2ZXJzO1xudmFyIHNldEZsdWlkR2V0dGVyID0gKHRhcmdldCwgZ2V0KSA9PiBzZXRIaWRkZW4odGFyZ2V0LCAkZ2V0LCBnZXQpO1xuZnVuY3Rpb24gYWRkRmx1aWRPYnNlcnZlcih0YXJnZXQsIG9ic2VydmVyMikge1xuICBpZiAodGFyZ2V0WyRnZXRdKSB7XG4gICAgbGV0IG9ic2VydmVycyA9IHRhcmdldFskb2JzZXJ2ZXJzXTtcbiAgICBpZiAoIW9ic2VydmVycykge1xuICAgICAgc2V0SGlkZGVuKHRhcmdldCwgJG9ic2VydmVycywgb2JzZXJ2ZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSk7XG4gICAgfVxuICAgIGlmICghb2JzZXJ2ZXJzLmhhcyhvYnNlcnZlcjIpKSB7XG4gICAgICBvYnNlcnZlcnMuYWRkKG9ic2VydmVyMik7XG4gICAgICBpZiAodGFyZ2V0Lm9ic2VydmVyQWRkZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9ic2VydmVyQWRkZWQob2JzZXJ2ZXJzLnNpemUsIG9ic2VydmVyMik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYnNlcnZlcjI7XG59XG5mdW5jdGlvbiByZW1vdmVGbHVpZE9ic2VydmVyKHRhcmdldCwgb2JzZXJ2ZXIyKSB7XG4gIGNvbnN0IG9ic2VydmVycyA9IHRhcmdldFskb2JzZXJ2ZXJzXTtcbiAgaWYgKG9ic2VydmVycyAmJiBvYnNlcnZlcnMuaGFzKG9ic2VydmVyMikpIHtcbiAgICBjb25zdCBjb3VudCA9IG9ic2VydmVycy5zaXplIC0gMTtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIG9ic2VydmVycy5kZWxldGUob2JzZXJ2ZXIyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0WyRvYnNlcnZlcnNdID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRhcmdldC5vYnNlcnZlclJlbW92ZWQpIHtcbiAgICAgIHRhcmdldC5vYnNlcnZlclJlbW92ZWQoY291bnQsIG9ic2VydmVyMik7XG4gICAgfVxuICB9XG59XG52YXIgc2V0SGlkZGVuID0gKHRhcmdldCwga2V5LCB2YWx1ZSkgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gIHZhbHVlLFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuLy8gc3JjL3JlZ2V4cy50c1xudmFyIG51bWJlclJlZ2V4ID0gL1srXFwtXT8oPzowfFsxLTldXFxkKikoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nO1xudmFyIGNvbG9yUmVnZXggPSAvKCMoPzpbMC05YS1mXXsyfSl7Miw0fXwoI1swLTlhLWZdezN9KXwocmdifGhzbClhP1xcKCgtP1xcZCslP1ssXFxzXSspezIsM31cXHMqW1xcZFxcLl0rJT9cXCkpL2dpO1xudmFyIHVuaXRSZWdleCA9IG5ldyBSZWdFeHAoYCgke251bWJlclJlZ2V4LnNvdXJjZX0pKCV8W2Etel0rKWAsIFwiaVwiKTtcbnZhciByZ2JhUmVnZXggPSAvcmdiYVxcKChbMC05XFwuLV0rKSwgKFswLTlcXC4tXSspLCAoWzAtOVxcLi1dKyksIChbMC05XFwuLV0rKVxcKS9naTtcbnZhciBjc3NWYXJpYWJsZVJlZ2V4ID0gL3ZhclxcKCgtLVthLXpBLVowLTktX10rKSw/ID8oW2EtekEtWjAtOSAoKSUjLiwtXSspP1xcKS87XG5cbi8vIHNyYy92YXJpYWJsZVRvUmdiYS50c1xudmFyIHZhcmlhYmxlVG9SZ2JhID0gKGlucHV0KSA9PiB7XG4gIGNvbnN0IFt0b2tlbiwgZmFsbGJhY2tdID0gcGFyc2VDU1NWYXJpYWJsZShpbnB1dCk7XG4gIGlmICghdG9rZW4gfHwgaXNTU1IoKSkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSh0b2tlbik7XG4gIGlmICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS50cmltKCk7XG4gIH0gZWxzZSBpZiAoZmFsbGJhY2sgJiYgZmFsbGJhY2suc3RhcnRzV2l0aChcIi0tXCIpKSB7XG4gICAgY29uc3QgdmFsdWUyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKGZhbGxiYWNrKTtcbiAgICBpZiAodmFsdWUyKSB7XG4gICAgICByZXR1cm4gdmFsdWUyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGZhbGxiYWNrICYmIGNzc1ZhcmlhYmxlUmVnZXgudGVzdChmYWxsYmFjaykpIHtcbiAgICByZXR1cm4gdmFyaWFibGVUb1JnYmEoZmFsbGJhY2spO1xuICB9IGVsc2UgaWYgKGZhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG52YXIgcGFyc2VDU1NWYXJpYWJsZSA9IChjdXJyZW50KSA9PiB7XG4gIGNvbnN0IG1hdGNoID0gY3NzVmFyaWFibGVSZWdleC5leGVjKGN1cnJlbnQpO1xuICBpZiAoIW1hdGNoKVxuICAgIHJldHVybiBbLF07XG4gIGNvbnN0IFssIHRva2VuLCBmYWxsYmFja10gPSBtYXRjaDtcbiAgcmV0dXJuIFt0b2tlbiwgZmFsbGJhY2tdO1xufTtcblxuLy8gc3JjL3N0cmluZ0ludGVycG9sYXRpb24udHNcbnZhciBuYW1lZENvbG9yUmVnZXg7XG52YXIgcmdiYVJvdW5kID0gKF8sIHAxLCBwMiwgcDMsIHA0KSA9PiBgcmdiYSgke01hdGgucm91bmQocDEpfSwgJHtNYXRoLnJvdW5kKHAyKX0sICR7TWF0aC5yb3VuZChwMyl9LCAke3A0fSlgO1xudmFyIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcjIgPSAoY29uZmlnKSA9PiB7XG4gIGlmICghbmFtZWRDb2xvclJlZ2V4KVxuICAgIG5hbWVkQ29sb3JSZWdleCA9IGNvbG9ycyA/IChcbiAgICAgIC8vIG1hdGNoIGNvbG9yIG5hbWVzLCBpZ25vcmUgcGFydGlhbCBtYXRjaGVzXG4gICAgICBuZXcgUmVnRXhwKGAoJHtPYmplY3Qua2V5cyhjb2xvcnMpLmpvaW4oXCJ8XCIpfSkoPyFcXFxcdylgLCBcImdcIilcbiAgICApIDogKFxuICAgICAgLy8gbmV2ZXIgbWF0Y2hcbiAgICAgIC9eXFxiJC9cbiAgICApO1xuICBjb25zdCBvdXRwdXQgPSBjb25maWcub3V0cHV0Lm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gZ2V0Rmx1aWRWYWx1ZSh2YWx1ZSkucmVwbGFjZShjc3NWYXJpYWJsZVJlZ2V4LCB2YXJpYWJsZVRvUmdiYSkucmVwbGFjZShjb2xvclJlZ2V4LCBjb2xvclRvUmdiYSkucmVwbGFjZShuYW1lZENvbG9yUmVnZXgsIGNvbG9yVG9SZ2JhKTtcbiAgfSk7XG4gIGNvbnN0IGtleWZyYW1lcyA9IG91dHB1dC5tYXAoKHZhbHVlKSA9PiB2YWx1ZS5tYXRjaChudW1iZXJSZWdleCkubWFwKE51bWJlcikpO1xuICBjb25zdCBvdXRwdXRSYW5nZXMgPSBrZXlmcmFtZXNbMF0ubWFwKFxuICAgIChfLCBpKSA9PiBrZXlmcmFtZXMubWFwKCh2YWx1ZXMpID0+IHtcbiAgICAgIGlmICghKGkgaW4gdmFsdWVzKSkge1xuICAgICAgICB0aHJvdyBFcnJvcignVGhlIGFyaXR5IG9mIGVhY2ggXCJvdXRwdXRcIiB2YWx1ZSBtdXN0IGJlIGVxdWFsJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzW2ldO1xuICAgIH0pXG4gICk7XG4gIGNvbnN0IGludGVycG9sYXRvcnMgPSBvdXRwdXRSYW5nZXMubWFwKFxuICAgIChvdXRwdXQyKSA9PiBjcmVhdGVJbnRlcnBvbGF0b3IoeyAuLi5jb25maWcsIG91dHB1dDogb3V0cHV0MiB9KVxuICApO1xuICByZXR1cm4gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgbWlzc2luZ1VuaXQgPSAhdW5pdFJlZ2V4LnRlc3Qob3V0cHV0WzBdKSAmJiBvdXRwdXQuZmluZCgodmFsdWUpID0+IHVuaXRSZWdleC50ZXN0KHZhbHVlKSk/LnJlcGxhY2UobnVtYmVyUmVnZXgsIFwiXCIpO1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4gb3V0cHV0WzBdLnJlcGxhY2UoXG4gICAgICBudW1iZXJSZWdleCxcbiAgICAgICgpID0+IGAke2ludGVycG9sYXRvcnNbaSsrXShpbnB1dCl9JHttaXNzaW5nVW5pdCB8fCBcIlwifWBcbiAgICApLnJlcGxhY2UocmdiYVJlZ2V4LCByZ2JhUm91bmQpO1xuICB9O1xufTtcblxuLy8gc3JjL2RlcHJlY2F0aW9ucy50c1xudmFyIHByZWZpeCA9IFwicmVhY3Qtc3ByaW5nOiBcIjtcbnZhciBvbmNlID0gKGZuKSA9PiB7XG4gIGNvbnN0IGZ1bmMgPSBmbjtcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtwcmVmaXh9b25jZSByZXF1aXJlcyBhIGZ1bmN0aW9uIHBhcmFtZXRlcmApO1xuICB9XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBmdW5jKC4uLmFyZ3MpO1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG59O1xudmFyIHdhcm5JbnRlcnBvbGF0ZSA9IG9uY2UoY29uc29sZS53YXJuKTtcbmZ1bmN0aW9uIGRlcHJlY2F0ZUludGVycG9sYXRlKCkge1xuICB3YXJuSW50ZXJwb2xhdGUoXG4gICAgYCR7cHJlZml4fVRoZSBcImludGVycG9sYXRlXCIgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCBpbiB2OSAodXNlIFwidG9cIiBpbnN0ZWFkKWBcbiAgKTtcbn1cbnZhciB3YXJuRGlyZWN0Q2FsbCA9IG9uY2UoY29uc29sZS53YXJuKTtcbmZ1bmN0aW9uIGRlcHJlY2F0ZURpcmVjdENhbGwoKSB7XG4gIHdhcm5EaXJlY3RDYWxsKFxuICAgIGAke3ByZWZpeH1EaXJlY3RseSBjYWxsaW5nIHN0YXJ0IGluc3RlYWQgb2YgdXNpbmcgdGhlIGFwaSBvYmplY3QgaXMgZGVwcmVjYXRlZCBpbiB2OSAodXNlIFwiLnN0YXJ0XCIgaW5zdGVhZCksIHRoaXMgd2lsbCBiZSByZW1vdmVkIGluIGxhdGVyIDAuWC4wIHZlcnNpb25zYFxuICApO1xufVxuXG4vLyBzcmMvaXNBbmltYXRlZFN0cmluZy50c1xuZnVuY3Rpb24gaXNBbmltYXRlZFN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gaXMuc3RyKHZhbHVlKSAmJiAodmFsdWVbMF0gPT0gXCIjXCIgfHwgL1xcZC8udGVzdCh2YWx1ZSkgfHwgLy8gRG8gbm90IGlkZW50aWZ5IGEgQ1NTIHZhcmlhYmxlIGFzIGFuIEFuaW1hdGVkU3RyaW5nIGlmIGl0cyBTU1JcbiAgIWlzU1NSKCkgJiYgY3NzVmFyaWFibGVSZWdleC50ZXN0KHZhbHVlKSB8fCB2YWx1ZSBpbiAoY29sb3JzIHx8IHt9KSk7XG59XG5cbi8vIHNyYy9kb20tZXZlbnRzL3Njcm9sbC9pbmRleC50c1xuaW1wb3J0IHsgcmFmIGFzIHJhZjMgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9yYWZ6XCI7XG5cbi8vIHNyYy9kb20tZXZlbnRzL3Jlc2l6ZS9yZXNpemVFbGVtZW50LnRzXG52YXIgb2JzZXJ2ZXI7XG52YXIgcmVzaXplSGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBoYW5kbGVPYnNlcnZhdGlvbiA9IChlbnRyaWVzKSA9PiBlbnRyaWVzLmZvckVhY2goKHsgdGFyZ2V0LCBjb250ZW50UmVjdCB9KSA9PiB7XG4gIHJldHVybiByZXNpemVIYW5kbGVycy5nZXQodGFyZ2V0KT8uZm9yRWFjaCgoaGFuZGxlcikgPT4gaGFuZGxlcihjb250ZW50UmVjdCkpO1xufSk7XG5mdW5jdGlvbiByZXNpemVFbGVtZW50KGhhbmRsZXIsIHRhcmdldCkge1xuICBpZiAoIW9ic2VydmVyKSB7XG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoaGFuZGxlT2JzZXJ2YXRpb24pO1xuICAgIH1cbiAgfVxuICBsZXQgZWxlbWVudEhhbmRsZXJzID0gcmVzaXplSGFuZGxlcnMuZ2V0KHRhcmdldCk7XG4gIGlmICghZWxlbWVudEhhbmRsZXJzKSB7XG4gICAgZWxlbWVudEhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICByZXNpemVIYW5kbGVycy5zZXQodGFyZ2V0LCBlbGVtZW50SGFuZGxlcnMpO1xuICB9XG4gIGVsZW1lbnRIYW5kbGVycy5hZGQoaGFuZGxlcik7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnRIYW5kbGVyczIgPSByZXNpemVIYW5kbGVycy5nZXQodGFyZ2V0KTtcbiAgICBpZiAoIWVsZW1lbnRIYW5kbGVyczIpXG4gICAgICByZXR1cm47XG4gICAgZWxlbWVudEhhbmRsZXJzMi5kZWxldGUoaGFuZGxlcik7XG4gICAgaWYgKCFlbGVtZW50SGFuZGxlcnMyLnNpemUgJiYgb2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZSh0YXJnZXQpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gc3JjL2RvbS1ldmVudHMvcmVzaXplL3Jlc2l6ZVdpbmRvdy50c1xudmFyIGxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG52YXIgY2xlYW51cFdpbmRvd1Jlc2l6ZUhhbmRsZXI7XG52YXIgY3JlYXRlUmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKFxuICAgICAgKGNhbGxiYWNrKSA9PiBjYWxsYmFjayh7XG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlUmVzaXplKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVSZXNpemUpO1xuICB9O1xufTtcbnZhciByZXNpemVXaW5kb3cgPSAoY2FsbGJhY2spID0+IHtcbiAgbGlzdGVuZXJzLmFkZChjYWxsYmFjayk7XG4gIGlmICghY2xlYW51cFdpbmRvd1Jlc2l6ZUhhbmRsZXIpIHtcbiAgICBjbGVhbnVwV2luZG93UmVzaXplSGFuZGxlciA9IGNyZWF0ZVJlc2l6ZUhhbmRsZXIoKTtcbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGxpc3RlbmVycy5kZWxldGUoY2FsbGJhY2spO1xuICAgIGlmICghbGlzdGVuZXJzLnNpemUgJiYgY2xlYW51cFdpbmRvd1Jlc2l6ZUhhbmRsZXIpIHtcbiAgICAgIGNsZWFudXBXaW5kb3dSZXNpemVIYW5kbGVyKCk7XG4gICAgICBjbGVhbnVwV2luZG93UmVzaXplSGFuZGxlciA9IHZvaWQgMDtcbiAgICB9XG4gIH07XG59O1xuXG4vLyBzcmMvZG9tLWV2ZW50cy9yZXNpemUvaW5kZXgudHNcbnZhciBvblJlc2l6ZSA9IChjYWxsYmFjaywgeyBjb250YWluZXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfSA9IHt9KSA9PiB7XG4gIGlmIChjb250YWluZXIgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiByZXNpemVXaW5kb3coY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNpemVFbGVtZW50KGNhbGxiYWNrLCBjb250YWluZXIpO1xuICB9XG59O1xuXG4vLyBzcmMvcHJvZ3Jlc3MudHNcbnZhciBwcm9ncmVzcyA9IChtaW4sIG1heCwgdmFsdWUpID0+IG1heCAtIG1pbiA9PT0gMCA/IDEgOiAodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbi8vIHNyYy9kb20tZXZlbnRzL3Njcm9sbC9TY3JvbGxIYW5kbGVyLnRzXG52YXIgU0NST0xMX0tFWVMgPSB7XG4gIHg6IHtcbiAgICBsZW5ndGg6IFwiV2lkdGhcIixcbiAgICBwb3NpdGlvbjogXCJMZWZ0XCJcbiAgfSxcbiAgeToge1xuICAgIGxlbmd0aDogXCJIZWlnaHRcIixcbiAgICBwb3NpdGlvbjogXCJUb3BcIlxuICB9XG59O1xudmFyIFNjcm9sbEhhbmRsZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBjb250YWluZXIpIHtcbiAgICB0aGlzLmNyZWF0ZUF4aXMgPSAoKSA9PiAoe1xuICAgICAgY3VycmVudDogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgc2Nyb2xsTGVuZ3RoOiAwXG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVBeGlzID0gKGF4aXNOYW1lKSA9PiB7XG4gICAgICBjb25zdCBheGlzID0gdGhpcy5pbmZvW2F4aXNOYW1lXTtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoLCBwb3NpdGlvbiB9ID0gU0NST0xMX0tFWVNbYXhpc05hbWVdO1xuICAgICAgYXhpcy5jdXJyZW50ID0gdGhpcy5jb250YWluZXJbYHNjcm9sbCR7cG9zaXRpb259YF07XG4gICAgICBheGlzLnNjcm9sbExlbmd0aCA9IHRoaXMuY29udGFpbmVyW2BzY3JvbGwke2xlbmd0aH1gXSAtIHRoaXMuY29udGFpbmVyW2BjbGllbnQke2xlbmd0aH1gXTtcbiAgICAgIGF4aXMucHJvZ3Jlc3MgPSBwcm9ncmVzcygwLCBheGlzLnNjcm9sbExlbmd0aCwgYXhpcy5jdXJyZW50KTtcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVBeGlzKFwieFwiKTtcbiAgICAgIHRoaXMudXBkYXRlQXhpcyhcInlcIik7XG4gICAgfTtcbiAgICB0aGlzLnNlbmRFdmVudCA9ICgpID0+IHtcbiAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5pbmZvKTtcbiAgICB9O1xuICAgIHRoaXMuYWR2YW5jZSA9ICgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB0aGlzLnNlbmRFdmVudCgpO1xuICAgIH07XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuaW5mbyA9IHtcbiAgICAgIHRpbWU6IDAsXG4gICAgICB4OiB0aGlzLmNyZWF0ZUF4aXMoKSxcbiAgICAgIHk6IHRoaXMuY3JlYXRlQXhpcygpXG4gICAgfTtcbiAgfVxufTtcblxuLy8gc3JjL2RvbS1ldmVudHMvc2Nyb2xsL2luZGV4LnRzXG52YXIgc2Nyb2xsTGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgcmVzaXplTGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgb25TY3JvbGxIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIGdldFRhcmdldCA9IChjb250YWluZXIpID0+IGNvbnRhaW5lciA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gd2luZG93IDogY29udGFpbmVyO1xudmFyIG9uU2Nyb2xsID0gKGNhbGxiYWNrLCB7IGNvbnRhaW5lciA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB9ID0ge30pID0+IHtcbiAgbGV0IGNvbnRhaW5lckhhbmRsZXJzID0gb25TY3JvbGxIYW5kbGVycy5nZXQoY29udGFpbmVyKTtcbiAgaWYgKCFjb250YWluZXJIYW5kbGVycykge1xuICAgIGNvbnRhaW5lckhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBvblNjcm9sbEhhbmRsZXJzLnNldChjb250YWluZXIsIGNvbnRhaW5lckhhbmRsZXJzKTtcbiAgfVxuICBjb25zdCBjb250YWluZXJIYW5kbGVyID0gbmV3IFNjcm9sbEhhbmRsZXIoY2FsbGJhY2ssIGNvbnRhaW5lcik7XG4gIGNvbnRhaW5lckhhbmRsZXJzLmFkZChjb250YWluZXJIYW5kbGVyKTtcbiAgaWYgKCFzY3JvbGxMaXN0ZW5lcnMuaGFzKGNvbnRhaW5lcikpIHtcbiAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgIGNvbnRhaW5lckhhbmRsZXJzPy5mb3JFYWNoKChoYW5kbGVyKSA9PiBoYW5kbGVyLmFkdmFuY2UoKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHNjcm9sbExpc3RlbmVycy5zZXQoY29udGFpbmVyLCBsaXN0ZW5lcik7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGNvbnRhaW5lcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICBpZiAoY29udGFpbmVyICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHJlc2l6ZUxpc3RlbmVycy5zZXQoY29udGFpbmVyLCBvblJlc2l6ZShsaXN0ZW5lciwgeyBjb250YWluZXIgfSkpO1xuICAgIH1cbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBsaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICB9XG4gIGNvbnN0IGFuaW1hdGVTY3JvbGwgPSBzY3JvbGxMaXN0ZW5lcnMuZ2V0KGNvbnRhaW5lcik7XG4gIHJhZjMoYW5pbWF0ZVNjcm9sbCk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmFmMy5jYW5jZWwoYW5pbWF0ZVNjcm9sbCk7XG4gICAgY29uc3QgY29udGFpbmVySGFuZGxlcnMyID0gb25TY3JvbGxIYW5kbGVycy5nZXQoY29udGFpbmVyKTtcbiAgICBpZiAoIWNvbnRhaW5lckhhbmRsZXJzMilcbiAgICAgIHJldHVybjtcbiAgICBjb250YWluZXJIYW5kbGVyczIuZGVsZXRlKGNvbnRhaW5lckhhbmRsZXIpO1xuICAgIGlmIChjb250YWluZXJIYW5kbGVyczIuc2l6ZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBsaXN0ZW5lciA9IHNjcm9sbExpc3RlbmVycy5nZXQoY29udGFpbmVyKTtcbiAgICBzY3JvbGxMaXN0ZW5lcnMuZGVsZXRlKGNvbnRhaW5lcik7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBnZXRUYXJnZXQoY29udGFpbmVyKS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGxpc3RlbmVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGxpc3RlbmVyKTtcbiAgICAgIHJlc2l6ZUxpc3RlbmVycy5nZXQoY29udGFpbmVyKT8uKCk7XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZUNvbnN0YW50LnRzXG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNvbnN0YW50KGluaXQpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICByZWYuY3VycmVudCA9IGluaXQoKTtcbiAgfVxuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbi8vIHNyYy9ob29rcy91c2VGb3JjZVVwZGF0ZS50c1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2hvb2tzL3VzZUlzTW91bnRlZC50c1xuaW1wb3J0IHsgdXNlUmVmIGFzIHVzZVJlZjIgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2hvb2tzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudHNcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzU1NSKCkgPyB1c2VFZmZlY3QgOiB1c2VMYXlvdXRFZmZlY3Q7XG5cbi8vIHNyYy9ob29rcy91c2VJc01vdW50ZWQudHNcbnZhciB1c2VJc01vdW50ZWQgPSAoKSA9PiB7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZVJlZjIoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gaXNNb3VudGVkO1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZUZvcmNlVXBkYXRlLnRzXG5mdW5jdGlvbiB1c2VGb3JjZVVwZGF0ZSgpIHtcbiAgY29uc3QgdXBkYXRlID0gdXNlU3RhdGUoKVsxXTtcbiAgY29uc3QgaXNNb3VudGVkID0gdXNlSXNNb3VudGVkKCk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKGlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICB1cGRhdGUoTWF0aC5yYW5kb20oKSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlTWVtb09uZS50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDIsIHVzZVJlZiBhcyB1c2VSZWYzLCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTIgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZU1lbW9PbmUoZ2V0UmVzdWx0LCBpbnB1dHMpIHtcbiAgY29uc3QgW2luaXRpYWxdID0gdXNlU3RhdGUyKFxuICAgICgpID0+ICh7XG4gICAgICBpbnB1dHMsXG4gICAgICByZXN1bHQ6IGdldFJlc3VsdCgpXG4gICAgfSlcbiAgKTtcbiAgY29uc3QgY29tbWl0dGVkID0gdXNlUmVmMygpO1xuICBjb25zdCBwcmV2Q2FjaGUgPSBjb21taXR0ZWQuY3VycmVudDtcbiAgbGV0IGNhY2hlID0gcHJldkNhY2hlO1xuICBpZiAoY2FjaGUpIHtcbiAgICBjb25zdCB1c2VDYWNoZSA9IEJvb2xlYW4oXG4gICAgICBpbnB1dHMgJiYgY2FjaGUuaW5wdXRzICYmIGFyZUlucHV0c0VxdWFsKGlucHV0cywgY2FjaGUuaW5wdXRzKVxuICAgICk7XG4gICAgaWYgKCF1c2VDYWNoZSkge1xuICAgICAgY2FjaGUgPSB7XG4gICAgICAgIGlucHV0cyxcbiAgICAgICAgcmVzdWx0OiBnZXRSZXN1bHQoKVxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUgPSBpbml0aWFsO1xuICB9XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGNvbW1pdHRlZC5jdXJyZW50ID0gY2FjaGU7XG4gICAgaWYgKHByZXZDYWNoZSA9PSBpbml0aWFsKSB7XG4gICAgICBpbml0aWFsLmlucHV0cyA9IGluaXRpYWwucmVzdWx0ID0gdm9pZCAwO1xuICAgIH1cbiAgfSwgW2NhY2hlXSk7XG4gIHJldHVybiBjYWNoZS5yZXN1bHQ7XG59XG5mdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXh0LCBwcmV2KSB7XG4gIGlmIChuZXh0Lmxlbmd0aCAhPT0gcHJldi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5leHRbaV0gIT09IHByZXZbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIHNyYy9ob29rcy91c2VPbmNlLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0MyB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZU9uY2UgPSAoZWZmZWN0KSA9PiB1c2VFZmZlY3QzKGVmZmVjdCwgZW1wdHlEZXBzKTtcbnZhciBlbXB0eURlcHMgPSBbXTtcblxuLy8gc3JjL2hvb2tzL3VzZVByZXYudHNcbmltcG9ydCB7IHVzZUVmZmVjdCBhcyB1c2VFZmZlY3Q0LCB1c2VSZWYgYXMgdXNlUmVmNCB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlUHJldih2YWx1ZSkge1xuICBjb25zdCBwcmV2UmVmID0gdXNlUmVmNCgpO1xuICB1c2VFZmZlY3Q0KCgpID0+IHtcbiAgICBwcmV2UmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBwcmV2UmVmLmN1cnJlbnQ7XG59XG5cbi8vIHNyYy9ob29rcy91c2VSZWR1Y2VkTW90aW9uLnRzXG5pbXBvcnQgeyB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTMgfSBmcm9tIFwicmVhY3RcIjtcbnZhciB1c2VSZWR1Y2VkTW90aW9uID0gKCkgPT4ge1xuICBjb25zdCBbcmVkdWNlZE1vdGlvbiwgc2V0UmVkdWNlZE1vdGlvbl0gPSB1c2VTdGF0ZTMobnVsbCk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG1xbCA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pXCIpO1xuICAgIGNvbnN0IGhhbmRsZU1lZGlhQ2hhbmdlID0gKGUpID0+IHtcbiAgICAgIHNldFJlZHVjZWRNb3Rpb24oZS5tYXRjaGVzKTtcbiAgICAgIGFzc2lnbih7XG4gICAgICAgIHNraXBBbmltYXRpb246IGUubWF0Y2hlc1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBoYW5kbGVNZWRpYUNoYW5nZShtcWwpO1xuICAgIGlmIChtcWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgbXFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaGFuZGxlTWVkaWFDaGFuZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtcWwuYWRkTGlzdGVuZXIoaGFuZGxlTWVkaWFDaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1xbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIG1xbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZU1lZGlhQ2hhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1xbC5yZW1vdmVMaXN0ZW5lcihoYW5kbGVNZWRpYUNoYW5nZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gcmVkdWNlZE1vdGlvbjtcbn07XG5cbi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgcmFmIGFzIHJhZjQgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9yYWZ6XCI7XG5leHBvcnQge1xuICBGbHVpZFZhbHVlLFxuICBnbG9iYWxzX2V4cG9ydHMgYXMgR2xvYmFscyxcbiAgYWRkRmx1aWRPYnNlcnZlcixcbiAgY2FsbEZsdWlkT2JzZXJ2ZXIsXG4gIGNhbGxGbHVpZE9ic2VydmVycyxcbiAgY2xhbXAsXG4gIGNvbG9yVG9SZ2JhLFxuICBjb2xvcnMyIGFzIGNvbG9ycyxcbiAgY3JlYXRlSW50ZXJwb2xhdG9yLFxuICBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IyIGFzIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcixcbiAgZGVmaW5lSGlkZGVuLFxuICBkZXByZWNhdGVEaXJlY3RDYWxsLFxuICBkZXByZWNhdGVJbnRlcnBvbGF0ZSxcbiAgZWFjaCxcbiAgZWFjaFByb3AsXG4gIGVhc2luZ3MsXG4gIGZsdXNoLFxuICBmbHVzaENhbGxzLFxuICBmcmFtZUxvb3AsXG4gIGdldEZsdWlkT2JzZXJ2ZXJzLFxuICBnZXRGbHVpZFZhbHVlLFxuICBoYXNGbHVpZFZhbHVlLFxuICBoZXgzLFxuICBoZXg0LFxuICBoZXg2LFxuICBoZXg4LFxuICBoc2wsXG4gIGhzbGEsXG4gIGlzLFxuICBpc0FuaW1hdGVkU3RyaW5nLFxuICBpc0VxdWFsLFxuICBpc1NTUixcbiAgbm9vcCxcbiAgb25SZXNpemUsXG4gIG9uU2Nyb2xsLFxuICBvbmNlLFxuICBwcmVmaXgsXG4gIHJhZjQgYXMgcmFmLFxuICByZW1vdmVGbHVpZE9ic2VydmVyLFxuICByZ2IsXG4gIHJnYmEsXG4gIHNldEZsdWlkR2V0dGVyLFxuICB0b0FycmF5LFxuICB1c2VDb25zdGFudCxcbiAgdXNlRm9yY2VVcGRhdGUsXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QsXG4gIHVzZU1lbW9PbmUsXG4gIHVzZU9uY2UsXG4gIHVzZVByZXYsXG4gIHVzZVJlZHVjZWRNb3Rpb25cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1zcHJpbmdfc2hhcmVkLm1vZGVybi5tanMubWFwIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsImdsb2JhbHNfZXhwb3J0cyIsImFzc2lnbiIsImNvbG9ycyIsImNyZWF0ZVN0cmluZ0ludGVycG9sYXRvciIsInNraXBBbmltYXRpb24iLCJ0byIsIndpbGxBZHZhbmNlIiwicmFmIiwibm9vcCIsImRlZmluZUhpZGRlbiIsIm9iaiIsImtleSIsInZhbHVlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJpcyIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImEiLCJjb25zdHJ1Y3RvciIsImZ1biIsInN0ciIsIm51bSIsInVuZCIsImlzRXF1YWwiLCJiIiwibGVuZ3RoIiwiaSIsImVhY2giLCJmbiIsImZvckVhY2giLCJlYWNoUHJvcCIsImN0eCIsImNhbGwiLCJoYXNPd25Qcm9wZXJ0eSIsInRvQXJyYXkiLCJmbHVzaCIsInF1ZXVlIiwiaXRlcmF0b3IiLCJzaXplIiwiaXRlbXMiLCJmcm9tIiwiY2xlYXIiLCJmbHVzaENhbGxzIiwiYXJncyIsImlzU1NSIiwid2luZG93IiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsImdsb2JhbHMiLCJub3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1c2UiLCJiYXRjaGVkVXBkYXRlcyIsImZyYW1lTG9vcCIsInJhZjIiLCJzdGFydFF1ZXVlIiwiU2V0IiwiY3VycmVudEZyYW1lIiwicHJldkZyYW1lIiwicHJpb3JpdHkiLCJpZGxlIiwic3RhcnQiLCJhbmltYXRpb24iLCJhZGQiLCJvblN0YXJ0IiwiZmx1c2hTdGFydFF1ZXVlIiwic3RhcnRTYWZlbHkiLCJhZHZhbmNlIiwic29ydCIsIm9uRnJhbWUiLCJwcmV2SW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwic3RhcnRVbnNhZmVseSIsImluY2x1ZGVzIiwiZmluZEluZGV4Iiwib3RoZXIiLCJkdCIsIm5leHRGcmFtZSIsInB1c2giLCJpbmRleCIsImNsYW1wIiwibWluIiwibWF4IiwidiIsIk1hdGgiLCJjb2xvcnMyIiwidHJhbnNwYXJlbnQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImJ1cm50c2llbm5hIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiTlVNQkVSIiwiUEVSQ0VOVEFHRSIsInBhcnRzIiwiam9pbiIsInJnYiIsIlJlZ0V4cCIsInJnYmEiLCJoc2wiLCJoc2xhIiwiaGV4MyIsImhleDQiLCJoZXg2IiwiaGV4OCIsIm5vcm1hbGl6ZUNvbG9yIiwiY29sb3IiLCJtYXRjaCIsImV4ZWMiLCJwYXJzZUludCIsInBhcnNlMjU1IiwicGFyc2UxIiwiaHNsVG9SZ2IiLCJwYXJzZTM2MCIsInBhcnNlUGVyY2VudGFnZSIsImh1ZTJyZ2IiLCJwIiwicSIsInQiLCJoIiwicyIsImwiLCJyIiwiZyIsInJvdW5kIiwiaW50IiwicGFyc2VGbG9hdCIsImNvbG9yVG9SZ2JhIiwiaW5wdXQiLCJpbnQzMkNvbG9yIiwiY3JlYXRlSW50ZXJwb2xhdG9yIiwicmFuZ2UiLCJvdXRwdXQiLCJleHRyYXBvbGF0ZSIsImNvbmZpZyIsIm91dHB1dFJhbmdlIiwiaW5wdXRSYW5nZSIsImV4dHJhcG9sYXRlTGVmdCIsImV4dHJhcG9sYXRlUmlnaHQiLCJlYXNpbmciLCJyYW5nZTIiLCJmaW5kUmFuZ2UiLCJpbnRlcnBvbGF0ZSIsIm1hcCIsImlucHV0TWluIiwiaW5wdXRNYXgiLCJvdXRwdXRNaW4iLCJvdXRwdXRNYXgiLCJyZXN1bHQiLCJJbmZpbml0eSIsInN0ZXBzIiwic3RlcHMyIiwiZGlyZWN0aW9uIiwicHJvZ3Jlc3MyIiwiZXhwYW5kZWQiLCJyb3VuZGVkIiwiZmxvb3IiLCJjZWlsIiwiYzEiLCJjMiIsImMzIiwiYzQiLCJQSSIsImM1IiwiYm91bmNlT3V0IiwieCIsIm4xIiwiZDEiLCJlYXNpbmdzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsInBvdyIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsInNpbiIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsInNxcnQiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCIkZ2V0IiwiU3ltYm9sIiwiZm9yIiwiJG9ic2VydmVycyIsImhhc0ZsdWlkVmFsdWUiLCJhcmciLCJCb29sZWFuIiwiZ2V0Rmx1aWRWYWx1ZSIsImdldEZsdWlkT2JzZXJ2ZXJzIiwiY2FsbEZsdWlkT2JzZXJ2ZXIiLCJvYnNlcnZlcjIiLCJldmVudCIsImV2ZW50T2JzZXJ2ZWQiLCJjYWxsRmx1aWRPYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJGbHVpZFZhbHVlIiwiRXJyb3IiLCJzZXRGbHVpZEdldHRlciIsInNldEhpZGRlbiIsImFkZEZsdWlkT2JzZXJ2ZXIiLCJoYXMiLCJvYnNlcnZlckFkZGVkIiwicmVtb3ZlRmx1aWRPYnNlcnZlciIsImNvdW50IiwiZGVsZXRlIiwib2JzZXJ2ZXJSZW1vdmVkIiwibnVtYmVyUmVnZXgiLCJjb2xvclJlZ2V4IiwidW5pdFJlZ2V4Iiwic291cmNlIiwicmdiYVJlZ2V4IiwiY3NzVmFyaWFibGVSZWdleCIsInZhcmlhYmxlVG9SZ2JhIiwidG9rZW4iLCJmYWxsYmFjayIsInBhcnNlQ1NTVmFyaWFibGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJpbSIsInN0YXJ0c1dpdGgiLCJ2YWx1ZTIiLCJjdXJyZW50IiwibmFtZWRDb2xvclJlZ2V4IiwicmdiYVJvdW5kIiwiXyIsInAxIiwicDIiLCJwMyIsInA0IiwiY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yMiIsImtleXMiLCJyZXBsYWNlIiwia2V5ZnJhbWVzIiwiTnVtYmVyIiwib3V0cHV0UmFuZ2VzIiwidmFsdWVzIiwiaW50ZXJwb2xhdG9ycyIsIm91dHB1dDIiLCJtaXNzaW5nVW5pdCIsImZpbmQiLCJwcmVmaXgiLCJvbmNlIiwiZnVuYyIsImNhbGxlZCIsIlR5cGVFcnJvciIsIndhcm5JbnRlcnBvbGF0ZSIsImNvbnNvbGUiLCJ3YXJuIiwiZGVwcmVjYXRlSW50ZXJwb2xhdGUiLCJ3YXJuRGlyZWN0Q2FsbCIsImRlcHJlY2F0ZURpcmVjdENhbGwiLCJpc0FuaW1hdGVkU3RyaW5nIiwicmFmMyIsIm9ic2VydmVyIiwicmVzaXplSGFuZGxlcnMiLCJXZWFrTWFwIiwiaGFuZGxlT2JzZXJ2YXRpb24iLCJlbnRyaWVzIiwiY29udGVudFJlY3QiLCJoYW5kbGVyIiwicmVzaXplRWxlbWVudCIsIlJlc2l6ZU9ic2VydmVyIiwiZWxlbWVudEhhbmRsZXJzIiwic2V0Iiwib2JzZXJ2ZSIsImVsZW1lbnRIYW5kbGVyczIiLCJ1bm9ic2VydmUiLCJsaXN0ZW5lcnMiLCJjbGVhbnVwV2luZG93UmVzaXplSGFuZGxlciIsImNyZWF0ZVJlc2l6ZUhhbmRsZXIiLCJoYW5kbGVSZXNpemUiLCJjYWxsYmFjayIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZXNpemVXaW5kb3ciLCJvblJlc2l6ZSIsImNvbnRhaW5lciIsInByb2dyZXNzIiwiU0NST0xMX0tFWVMiLCJwb3NpdGlvbiIsInkiLCJTY3JvbGxIYW5kbGVyIiwiY3JlYXRlQXhpcyIsInNjcm9sbExlbmd0aCIsInVwZGF0ZUF4aXMiLCJheGlzTmFtZSIsImF4aXMiLCJpbmZvIiwidXBkYXRlIiwic2VuZEV2ZW50IiwidGltZSIsInNjcm9sbExpc3RlbmVycyIsInJlc2l6ZUxpc3RlbmVycyIsIm9uU2Nyb2xsSGFuZGxlcnMiLCJnZXRUYXJnZXQiLCJvblNjcm9sbCIsImNvbnRhaW5lckhhbmRsZXJzIiwiY29udGFpbmVySGFuZGxlciIsImxpc3RlbmVyIiwicGFzc2l2ZSIsImFuaW1hdGVTY3JvbGwiLCJjYW5jZWwiLCJjb250YWluZXJIYW5kbGVyczIiLCJ1c2VSZWYiLCJ1c2VDb25zdGFudCIsImluaXQiLCJyZWYiLCJ1c2VTdGF0ZSIsInVzZVJlZjIiLCJ1c2VFZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlSXNNb3VudGVkIiwiaXNNb3VudGVkIiwidXNlRm9yY2VVcGRhdGUiLCJyYW5kb20iLCJ1c2VFZmZlY3QyIiwidXNlUmVmMyIsInVzZVN0YXRlMiIsInVzZU1lbW9PbmUiLCJnZXRSZXN1bHQiLCJpbnB1dHMiLCJpbml0aWFsIiwiY29tbWl0dGVkIiwicHJldkNhY2hlIiwiY2FjaGUiLCJ1c2VDYWNoZSIsImFyZUlucHV0c0VxdWFsIiwibmV4dCIsInByZXYiLCJ1c2VFZmZlY3QzIiwidXNlT25jZSIsImVmZmVjdCIsImVtcHR5RGVwcyIsInVzZUVmZmVjdDQiLCJ1c2VSZWY0IiwidXNlUHJldiIsInByZXZSZWYiLCJ1c2VTdGF0ZTMiLCJ1c2VSZWR1Y2VkTW90aW9uIiwicmVkdWNlZE1vdGlvbiIsInNldFJlZHVjZWRNb3Rpb24iLCJtcWwiLCJtYXRjaE1lZGlhIiwiaGFuZGxlTWVkaWFDaGFuZ2UiLCJlIiwibWF0Y2hlcyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyYWY0IiwiR2xvYmFscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* binding */ Any; }\n/* harmony export */ });\n// src/utils.ts\nvar Any = class {\n};\n //# sourceMappingURL=react-spring_types.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3R5cGVzL2Rpc3QvcmVhY3Qtc3ByaW5nX3R5cGVzLm1vZGVybi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWU7QUFDZixJQUFJQSxNQUFNO0FBQ1Y7QUFHRSxDQUNGLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXNwcmluZy90eXBlcy9kaXN0L3JlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzP2FiYjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzLnRzXG52YXIgQW55ID0gY2xhc3Mge1xufTtcbmV4cG9ydCB7XG4gIEFueVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6WyJBbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Any; },\n/* harmony export */   BailSignal: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.BailSignal; },\n/* harmony export */   Controller: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Controller; },\n/* harmony export */   FrameValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Interpolation; },\n/* harmony export */   Spring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Spring; },\n/* harmony export */   SpringContext: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringContext; },\n/* harmony export */   SpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringRef; },\n/* harmony export */   SpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringValue; },\n/* harmony export */   Trail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Trail; },\n/* harmony export */   Transition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Transition; },\n/* harmony export */   a: function() { return /* binding */ animated; },\n/* harmony export */   animated: function() { return /* binding */ animated; },\n/* harmony export */   config: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.inferTo; },\n/* harmony export */   interpolate: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.interpolate; },\n/* harmony export */   to: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.to; },\n/* harmony export */   update: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.update; },\n/* harmony export */   useChain: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useChain; },\n/* harmony export */   useInView: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useResize; },\n/* harmony export */   useScroll: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useScroll; },\n/* harmony export */   useSpring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpring; },\n/* harmony export */   useSpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringValue; },\n/* harmony export */   useSprings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSprings; },\n/* harmony export */   useTrail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTrail; },\n/* harmony export */   useTransition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/core */ \"(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n// src/index.ts\n\n\n\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n    if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n    if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + \"px\";\n    return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n    if (!instance.nodeType || !instance.setAttribute) {\n        return false;\n    }\n    const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n    const { className, style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;\n    const values = Object.values(attributes);\n    const names = Object.keys(attributes).map((name)=>isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, // Attributes are written in dash case\n        (n)=>\"-\" + n.toLowerCase())));\n    if (children !== void 0) {\n        instance.textContent = children;\n    }\n    for(const name in style){\n        if (style.hasOwnProperty(name)) {\n            const value = dangerousStyleValue(name, style[name]);\n            if (isCustomPropRE.test(name)) {\n                instance.style.setProperty(name, value);\n            } else {\n                instance.style[name] = value;\n            }\n        }\n    }\n    names.forEach((name, i)=>{\n        instance.setAttribute(name, values[i]);\n    });\n    if (className !== void 0) {\n        instance.className = className;\n    }\n    if (scrollTop !== void 0) {\n        instance.scrollTop = scrollTop;\n    }\n    if (scrollLeft !== void 0) {\n        instance.scrollLeft = scrollLeft;\n    }\n    if (viewBox !== void 0) {\n        instance.setAttribute(\"viewBox\", viewBox);\n    }\n}\nvar isUnitlessNumber = {\n    animationIterationCount: true,\n    borderImageOutset: true,\n    borderImageSlice: true,\n    borderImageWidth: true,\n    boxFlex: true,\n    boxFlexGroup: true,\n    boxOrdinalGroup: true,\n    columnCount: true,\n    columns: true,\n    flex: true,\n    flexGrow: true,\n    flexPositive: true,\n    flexShrink: true,\n    flexNegative: true,\n    flexOrder: true,\n    gridRow: true,\n    gridRowEnd: true,\n    gridRowSpan: true,\n    gridRowStart: true,\n    gridColumn: true,\n    gridColumnEnd: true,\n    gridColumnSpan: true,\n    gridColumnStart: true,\n    fontWeight: true,\n    lineClamp: true,\n    lineHeight: true,\n    opacity: true,\n    order: true,\n    orphans: true,\n    tabSize: true,\n    widows: true,\n    zIndex: true,\n    zoom: true,\n    // SVG-related properties\n    fillOpacity: true,\n    floodOpacity: true,\n    stopOpacity: true,\n    strokeDasharray: true,\n    strokeDashoffset: true,\n    strokeMiterlimit: true,\n    strokeOpacity: true,\n    strokeWidth: true\n};\nvar prefixKey = (prefix, key)=>prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\n    \"Webkit\",\n    \"Ms\",\n    \"Moz\",\n    \"O\"\n];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop)=>{\n    prefixes.forEach((prefix)=>acc[prefixKey(prefix, prop)] = acc[prop]);\n    return acc;\n}, isUnitlessNumber);\n// src/AnimatedStyle.ts\n\n\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(value) ? value.every((v)=>isValueIdentity(v, id)) : _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.AnimatedObject {\n    constructor({ x, y, z, ...style }){\n        const inputs = [];\n        const transforms = [];\n        if (x || y || z) {\n            inputs.push([\n                x || 0,\n                y || 0,\n                z || 0\n            ]);\n            transforms.push((xyz)=>[\n                    \"translate3d(\".concat(xyz.map((v)=>addUnit(v, \"px\")).join(\",\"), \")\"),\n                    // prettier-ignore\n                    isValueIdentity(xyz, 0)\n                ]);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.eachProp)(style, (value, key)=>{\n            if (key === \"transform\") {\n                inputs.push([\n                    value || \"\"\n                ]);\n                transforms.push((transform)=>[\n                        transform,\n                        transform === \"\"\n                    ]);\n            } else if (domTransforms.test(key)) {\n                delete style[key];\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.und(value)) return;\n                const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n                inputs.push((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.toArray)(value));\n                transforms.push(key === \"rotate3d\" ? (param)=>{\n                    let [x2, y2, z2, deg] = param;\n                    return [\n                        \"rotate3d(\".concat(x2, \",\").concat(y2, \",\").concat(z2, \",\").concat(addUnit(deg, unit), \")\"),\n                        isValueIdentity(deg, 0)\n                    ];\n                } : (input)=>[\n                        \"\".concat(key, \"(\").concat(input.map((v)=>addUnit(v, unit)).join(\",\"), \")\"),\n                        isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n                    ]);\n            }\n        });\n        if (inputs.length) {\n            style.transform = new FluidTransform(inputs, transforms);\n        }\n        super(style);\n    }\n};\nvar FluidTransform = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.FluidValue {\n    get() {\n        return this._value || (this._value = this._get());\n    }\n    _get() {\n        let transform = \"\";\n        let identity = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input, i)=>{\n            const arg1 = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue)(input[0]);\n            const [t, id] = this.transforms[i](_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(arg1) ? arg1 : input.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue));\n            transform += \" \" + t;\n            identity = identity && id;\n        });\n        return identity ? \"none\" : transform;\n    }\n    // Start observing our inputs once we have an observer.\n    observerAdded(count) {\n        if (count == 1) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.addFluidObserver)(value, this)));\n    }\n    // Stop observing our inputs once we have no observers.\n    observerRemoved(count) {\n        if (count == 0) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.removeFluidObserver)(value, this)));\n    }\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            this._value = null;\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.callFluidObservers)(this, event);\n    }\n    constructor(inputs, transforms){\n        super();\n        this.inputs = inputs;\n        this.transforms = transforms;\n        this._value = null;\n    }\n};\n// src/primitives.ts\nvar primitives = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\n// src/index.ts\n\n_react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    batchedUpdates: react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates,\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.createStringInterpolator,\n    colors: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.colors\n});\nvar host = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.createHost)(primitives, {\n    applyAnimatedValues,\n    createAnimatedStyle: (style)=>new AnimatedStyle(style),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getComponentProps: (param)=>{\n        let { scrollTop, scrollLeft, ...props } = param;\n        return props;\n    }\n});\nvar animated = host.animated;\n //# sourceMappingURL=react-spring_web.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\n"));

/***/ })

});