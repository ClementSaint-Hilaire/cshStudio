/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2FAnimations%2FAnimatedContent.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FblogSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FfooterSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FheroSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnavbarSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnewsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FprojectSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FskillsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FvaleursSection.tsx&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2FAnimations%2FAnimatedContent.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FblogSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FfooterSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FheroSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnavbarSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnewsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FprojectSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FskillsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FvaleursSection.tsx&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/Animations/AnimatedContent.tsx */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/blogSection.tsx */ \"(app-pages-browser)/./src/components/blogSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/footerSection.tsx */ \"(app-pages-browser)/./src/components/footerSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/heroSection.tsx */ \"(app-pages-browser)/./src/components/heroSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/navbarSection.tsx */ \"(app-pages-browser)/./src/components/navbarSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/newsSection.tsx */ \"(app-pages-browser)/./src/components/newsSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/projectSection.tsx */ \"(app-pages-browser)/./src/components/projectSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/skillsSection.tsx */ \"(app-pages-browser)/./src/components/skillsSection.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/valeursSection.tsx */ \"(app-pages-browser)/./src/components/valeursSection.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRmNzaCUyRlByb2pldCUyRmNzaFN0dWRpbyUyRmNzaFN0dWRpbyUyRnNyYyUyRkFuaW1hdGlvbnMlMkZBbmltYXRlZENvbnRlbnQudHN4Jm1vZHVsZXM9JTJGVXNlcnMlMkZjc2glMkZQcm9qZXQlMkZjc2hTdHVkaW8lMkZjc2hTdHVkaW8lMkZzcmMlMkZjb21wb25lbnRzJTJGYmxvZ1NlY3Rpb24udHN4Jm1vZHVsZXM9JTJGVXNlcnMlMkZjc2glMkZQcm9qZXQlMkZjc2hTdHVkaW8lMkZjc2hTdHVkaW8lMkZzcmMlMkZjb21wb25lbnRzJTJGZm9vdGVyU2VjdGlvbi50c3gmbW9kdWxlcz0lMkZVc2VycyUyRmNzaCUyRlByb2pldCUyRmNzaFN0dWRpbyUyRmNzaFN0dWRpbyUyRnNyYyUyRmNvbXBvbmVudHMlMkZoZXJvU2VjdGlvbi50c3gmbW9kdWxlcz0lMkZVc2VycyUyRmNzaCUyRlByb2pldCUyRmNzaFN0dWRpbyUyRmNzaFN0dWRpbyUyRnNyYyUyRmNvbXBvbmVudHMlMkZuYXZiYXJTZWN0aW9uLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGY3NoJTJGUHJvamV0JTJGY3NoU3R1ZGlvJTJGY3NoU3R1ZGlvJTJGc3JjJTJGY29tcG9uZW50cyUyRm5ld3NTZWN0aW9uLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGY3NoJTJGUHJvamV0JTJGY3NoU3R1ZGlvJTJGY3NoU3R1ZGlvJTJGc3JjJTJGY29tcG9uZW50cyUyRnByb2plY3RTZWN0aW9uLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGY3NoJTJGUHJvamV0JTJGY3NoU3R1ZGlvJTJGY3NoU3R1ZGlvJTJGc3JjJTJGY29tcG9uZW50cyUyRnNraWxsc1NlY3Rpb24udHN4Jm1vZHVsZXM9JTJGVXNlcnMlMkZjc2glMkZQcm9qZXQlMkZjc2hTdHVkaW8lMkZjc2hTdHVkaW8lMkZzcmMlMkZjb21wb25lbnRzJTJGdmFsZXVyc1NlY3Rpb24udHN4JnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsa01BQTZHO0FBQzdHLDBMQUF5RztBQUN6Ryw4TEFBMkc7QUFDM0csMExBQXlHO0FBQ3pHLDhMQUEyRztBQUMzRywwTEFBeUc7QUFDekcsZ01BQTRHO0FBQzVHLDhMQUEyRztBQUMzRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzg5N2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvY3NoL1Byb2pldC9jc2hTdHVkaW8vY3NoU3R1ZGlvL3NyYy9BbmltYXRpb25zL0FuaW1hdGVkQ29udGVudC50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9jc2gvUHJvamV0L2NzaFN0dWRpby9jc2hTdHVkaW8vc3JjL2NvbXBvbmVudHMvYmxvZ1NlY3Rpb24udHN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvY3NoL1Byb2pldC9jc2hTdHVkaW8vY3NoU3R1ZGlvL3NyYy9jb21wb25lbnRzL2Zvb3RlclNlY3Rpb24udHN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvY3NoL1Byb2pldC9jc2hTdHVkaW8vY3NoU3R1ZGlvL3NyYy9jb21wb25lbnRzL2hlcm9TZWN0aW9uLnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2NzaC9Qcm9qZXQvY3NoU3R1ZGlvL2NzaFN0dWRpby9zcmMvY29tcG9uZW50cy9uYXZiYXJTZWN0aW9uLnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL2NzaC9Qcm9qZXQvY3NoU3R1ZGlvL2NzaFN0dWRpby9zcmMvY29tcG9uZW50cy9uZXdzU2VjdGlvbi50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9jc2gvUHJvamV0L2NzaFN0dWRpby9jc2hTdHVkaW8vc3JjL2NvbXBvbmVudHMvcHJvamVjdFNlY3Rpb24udHN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvY3NoL1Byb2pldC9jc2hTdHVkaW8vY3NoU3R1ZGlvL3NyYy9jb21wb25lbnRzL3NraWxsc1NlY3Rpb24udHN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvY3NoL1Byb2pldC9jc2hTdHVkaW8vY3NoU3R1ZGlvL3NyYy9jb21wb25lbnRzL3ZhbGV1cnNTZWN0aW9uLnRzeFwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2FAnimations%2FAnimatedContent.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FblogSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FfooterSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FheroSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnavbarSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnewsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FprojectSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FskillsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FvaleursSection.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/matter-js/build/matter.js":
/*!************************************************!*\
  !*** ./node_modules/matter-js/build/matter.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */ (function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory();\n    else {}\n})(void 0, function() {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_1821__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) {\n                /******/ return installedModules[moduleId].exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_1821__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __nested_webpack_require_1821__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __nested_webpack_require_1821__.c = installedModules;\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __nested_webpack_require_1821__.d = function(exports1, name, getter) {\n            /******/ if (!__nested_webpack_require_1821__.o(exports1, name)) {\n                /******/ Object.defineProperty(exports1, name, {\n                    enumerable: true,\n                    get: getter\n                });\n            /******/ }\n        /******/ };\n        /******/ /******/ // define __esModule on exports\n        /******/ __nested_webpack_require_1821__.r = function(exports1) {\n            /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                /******/ Object.defineProperty(exports1, Symbol.toStringTag, {\n                    value: \"Module\"\n                });\n            /******/ }\n            /******/ Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n        /******/ };\n        /******/ /******/ // create a fake namespace object\n        /******/ // mode & 1: value is a module id, require it\n        /******/ // mode & 2: merge all properties of value into the ns\n        /******/ // mode & 4: return value when already ns object\n        /******/ // mode & 8|1: behave like require\n        /******/ __nested_webpack_require_1821__.t = function(value, mode) {\n            /******/ if (mode & 1) value = __nested_webpack_require_1821__(value);\n            /******/ if (mode & 8) return value;\n            /******/ if (mode & 4 && typeof value === \"object\" && value && value.__esModule) return value;\n            /******/ var ns = Object.create(null);\n            /******/ __nested_webpack_require_1821__.r(ns);\n            /******/ Object.defineProperty(ns, \"default\", {\n                enumerable: true,\n                value: value\n            });\n            /******/ if (mode & 2 && typeof value != \"string\") for(var key in value)__nested_webpack_require_1821__.d(ns, key, (function(key) {\n                return value[key];\n            }).bind(null, key));\n            /******/ return ns;\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __nested_webpack_require_1821__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __nested_webpack_require_1821__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __nested_webpack_require_1821__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __nested_webpack_require_1821__.p = \"\";\n        /******/ /******/ /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_1821__(__nested_webpack_require_1821__.s = 20);\n    /******/ }([\n        /* 0 */ /***/ function(module1, exports1) {\n            /**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/ var Common = {};\n            module1.exports = Common;\n            (function() {\n                Common._baseDelta = 1000 / 60;\n                Common._nextId = 0;\n                Common._seed = 0;\n                Common._nowStartTime = +new Date();\n                Common._warnedOnce = {};\n                Common._decomp = null;\n                /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */ Common.extend = function(obj, deep) {\n                    var argsStart, args, deepClone;\n                    if (typeof deep === \"boolean\") {\n                        argsStart = 2;\n                        deepClone = deep;\n                    } else {\n                        argsStart = 1;\n                        deepClone = true;\n                    }\n                    for(var i = argsStart; i < arguments.length; i++){\n                        var source = arguments[i];\n                        if (source) {\n                            for(var prop in source){\n                                if (deepClone && source[prop] && source[prop].constructor === Object) {\n                                    if (!obj[prop] || obj[prop].constructor === Object) {\n                                        obj[prop] = obj[prop] || {};\n                                        Common.extend(obj[prop], deepClone, source[prop]);\n                                    } else {\n                                        obj[prop] = source[prop];\n                                    }\n                                } else {\n                                    obj[prop] = source[prop];\n                                }\n                            }\n                        }\n                    }\n                    return obj;\n                };\n                /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */ Common.clone = function(obj, deep) {\n                    return Common.extend({}, deep, obj);\n                };\n                /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */ Common.keys = function(obj) {\n                    if (Object.keys) return Object.keys(obj);\n                    // avoid hasOwnProperty for performance\n                    var keys = [];\n                    for(var key in obj)keys.push(key);\n                    return keys;\n                };\n                /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */ Common.values = function(obj) {\n                    var values = [];\n                    if (Object.keys) {\n                        var keys = Object.keys(obj);\n                        for(var i = 0; i < keys.length; i++){\n                            values.push(obj[keys[i]]);\n                        }\n                        return values;\n                    }\n                    // avoid hasOwnProperty for performance\n                    for(var key in obj)values.push(obj[key]);\n                    return values;\n                };\n                /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */ Common.get = function(obj, path, begin, end) {\n                    path = path.split(\".\").slice(begin, end);\n                    for(var i = 0; i < path.length; i += 1){\n                        obj = obj[path[i]];\n                    }\n                    return obj;\n                };\n                /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */ Common.set = function(obj, path, val, begin, end) {\n                    var parts = path.split(\".\").slice(begin, end);\n                    Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n                    return val;\n                };\n                /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */ Common.shuffle = function(array) {\n                    for(var i = array.length - 1; i > 0; i--){\n                        var j = Math.floor(Common.random() * (i + 1));\n                        var temp = array[i];\n                        array[i] = array[j];\n                        array[j] = temp;\n                    }\n                    return array;\n                };\n                /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */ Common.choose = function(choices) {\n                    return choices[Math.floor(Common.random() * choices.length)];\n                };\n                /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */ Common.isElement = function(obj) {\n                    if (typeof HTMLElement !== \"undefined\") {\n                        return obj instanceof HTMLElement;\n                    }\n                    return !!(obj && obj.nodeType && obj.nodeName);\n                };\n                /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */ Common.isArray = function(obj) {\n                    return Object.prototype.toString.call(obj) === \"[object Array]\";\n                };\n                /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */ Common.isFunction = function(obj) {\n                    return typeof obj === \"function\";\n                };\n                /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */ Common.isPlainObject = function(obj) {\n                    return typeof obj === \"object\" && obj.constructor === Object;\n                };\n                /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */ Common.isString = function(obj) {\n                    return toString.call(obj) === \"[object String]\";\n                };\n                /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */ Common.clamp = function(value, min, max) {\n                    if (value < min) return min;\n                    if (value > max) return max;\n                    return value;\n                };\n                /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */ Common.sign = function(value) {\n                    return value < 0 ? -1 : 1;\n                };\n                /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */ Common.now = function() {\n                    if ( true && window.performance) {\n                        if (window.performance.now) {\n                            return window.performance.now();\n                        } else if (window.performance.webkitNow) {\n                            return window.performance.webkitNow();\n                        }\n                    }\n                    if (Date.now) {\n                        return Date.now();\n                    }\n                    return new Date() - Common._nowStartTime;\n                };\n                /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */ Common.random = function(min, max) {\n                    min = typeof min !== \"undefined\" ? min : 0;\n                    max = typeof max !== \"undefined\" ? max : 1;\n                    return min + _seededRandom() * (max - min);\n                };\n                var _seededRandom = function() {\n                    // https://en.wikipedia.org/wiki/Linear_congruential_generator\n                    Common._seed = (Common._seed * 9301 + 49297) % 233280;\n                    return Common._seed / 233280;\n                };\n                /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */ Common.colorToNumber = function(colorString) {\n                    colorString = colorString.replace(\"#\", \"\");\n                    if (colorString.length == 3) {\n                        colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n                    }\n                    return parseInt(colorString, 16);\n                };\n                /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */ Common.logLevel = 1;\n                /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */ Common.log = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n                        console.log.apply(console, [\n                            \"matter-js:\"\n                        ].concat(Array.prototype.slice.call(arguments)));\n                    }\n                };\n                /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */ Common.info = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n                        console.info.apply(console, [\n                            \"matter-js:\"\n                        ].concat(Array.prototype.slice.call(arguments)));\n                    }\n                };\n                /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */ Common.warn = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n                        console.warn.apply(console, [\n                            \"matter-js:\"\n                        ].concat(Array.prototype.slice.call(arguments)));\n                    }\n                };\n                /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */ Common.warnOnce = function() {\n                    var message = Array.prototype.slice.call(arguments).join(\" \");\n                    if (!Common._warnedOnce[message]) {\n                        Common.warn(message);\n                        Common._warnedOnce[message] = true;\n                    }\n                };\n                /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */ Common.deprecated = function(obj, prop, warning) {\n                    obj[prop] = Common.chain(function() {\n                        Common.warnOnce(\"\\uD83D\\uDD05 deprecated \\uD83D\\uDD05\", warning);\n                    }, obj[prop]);\n                };\n                /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */ Common.nextId = function() {\n                    return Common._nextId++;\n                };\n                /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */ Common.indexOf = function(haystack, needle) {\n                    if (haystack.indexOf) return haystack.indexOf(needle);\n                    for(var i = 0; i < haystack.length; i++){\n                        if (haystack[i] === needle) return i;\n                    }\n                    return -1;\n                };\n                /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */ Common.map = function(list, func) {\n                    if (list.map) {\n                        return list.map(func);\n                    }\n                    var mapped = [];\n                    for(var i = 0; i < list.length; i += 1){\n                        mapped.push(func(list[i]));\n                    }\n                    return mapped;\n                };\n                /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */ Common.topologicalSort = function(graph) {\n                    // https://github.com/mgechev/javascript-algorithms\n                    // Copyright (c) Minko Gechev (MIT license)\n                    // Modifications: tidy formatting and naming\n                    var result = [], visited = [], temp = [];\n                    for(var node in graph){\n                        if (!visited[node] && !temp[node]) {\n                            Common._topologicalSort(node, visited, temp, graph, result);\n                        }\n                    }\n                    return result;\n                };\n                Common._topologicalSort = function(node, visited, temp, graph, result) {\n                    var neighbors = graph[node] || [];\n                    temp[node] = true;\n                    for(var i = 0; i < neighbors.length; i += 1){\n                        var neighbor = neighbors[i];\n                        if (temp[neighbor]) {\n                            continue;\n                        }\n                        if (!visited[neighbor]) {\n                            Common._topologicalSort(neighbor, visited, temp, graph, result);\n                        }\n                    }\n                    temp[node] = false;\n                    visited[node] = true;\n                    result.push(node);\n                };\n                /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */ Common.chain = function() {\n                    var funcs = [];\n                    for(var i = 0; i < arguments.length; i += 1){\n                        var func = arguments[i];\n                        if (func._chained) {\n                            // flatten already chained functions\n                            funcs.push.apply(funcs, func._chained);\n                        } else {\n                            funcs.push(func);\n                        }\n                    }\n                    var chain = function() {\n                        // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n                        var lastResult, args = new Array(arguments.length);\n                        for(var i = 0, l = arguments.length; i < l; i++){\n                            args[i] = arguments[i];\n                        }\n                        for(i = 0; i < funcs.length; i += 1){\n                            var result = funcs[i].apply(lastResult, args);\n                            if (typeof result !== \"undefined\") {\n                                lastResult = result;\n                            }\n                        }\n                        return lastResult;\n                    };\n                    chain._chained = funcs;\n                    return chain;\n                };\n                /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */ Common.chainPathBefore = function(base, path, func) {\n                    return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n                };\n                /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */ Common.chainPathAfter = function(base, path, func) {\n                    return Common.set(base, path, Common.chain(Common.get(base, path), func));\n                };\n                /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */ Common.setDecomp = function(decomp) {\n                    Common._decomp = decomp;\n                };\n                /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */ Common.getDecomp = function() {\n                    // get user provided decomp if set\n                    var decomp = Common._decomp;\n                    try {\n                        // otherwise from window global\n                        if (!decomp && \"object\" !== \"undefined\") {\n                            decomp = window.decomp;\n                        }\n                        // otherwise from node global\n                        if (!decomp && typeof __webpack_require__.g !== \"undefined\") {\n                            decomp = __webpack_require__.g.decomp;\n                        }\n                    } catch (e) {\n                        // decomp not available\n                        decomp = null;\n                    }\n                    return decomp;\n                };\n            })();\n        /***/ },\n        /* 1 */ /***/ function(module1, exports1) {\n            /**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/ var Bounds = {};\n            module1.exports = Bounds;\n            (function() {\n                /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */ Bounds.create = function(vertices) {\n                    var bounds = {\n                        min: {\n                            x: 0,\n                            y: 0\n                        },\n                        max: {\n                            x: 0,\n                            y: 0\n                        }\n                    };\n                    if (vertices) Bounds.update(bounds, vertices);\n                    return bounds;\n                };\n                /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */ Bounds.update = function(bounds, vertices, velocity) {\n                    bounds.min.x = Infinity;\n                    bounds.max.x = -Infinity;\n                    bounds.min.y = Infinity;\n                    bounds.max.y = -Infinity;\n                    for(var i = 0; i < vertices.length; i++){\n                        var vertex = vertices[i];\n                        if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n                        if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n                        if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n                        if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n                    }\n                    if (velocity) {\n                        if (velocity.x > 0) {\n                            bounds.max.x += velocity.x;\n                        } else {\n                            bounds.min.x += velocity.x;\n                        }\n                        if (velocity.y > 0) {\n                            bounds.max.y += velocity.y;\n                        } else {\n                            bounds.min.y += velocity.y;\n                        }\n                    }\n                };\n                /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */ Bounds.contains = function(bounds, point) {\n                    return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n                };\n                /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */ Bounds.overlaps = function(boundsA, boundsB) {\n                    return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n                };\n                /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */ Bounds.translate = function(bounds, vector) {\n                    bounds.min.x += vector.x;\n                    bounds.max.x += vector.x;\n                    bounds.min.y += vector.y;\n                    bounds.max.y += vector.y;\n                };\n                /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */ Bounds.shift = function(bounds, position) {\n                    var deltaX = bounds.max.x - bounds.min.x, deltaY = bounds.max.y - bounds.min.y;\n                    bounds.min.x = position.x;\n                    bounds.max.x = position.x + deltaX;\n                    bounds.min.y = position.y;\n                    bounds.max.y = position.y + deltaY;\n                };\n            })();\n        /***/ },\n        /* 2 */ /***/ function(module1, exports1) {\n            /**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/ // TODO: consider params for reusing vector objects\n            var Vector = {};\n            module1.exports = Vector;\n            (function() {\n                /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */ Vector.create = function(x, y) {\n                    return {\n                        x: x || 0,\n                        y: y || 0\n                    };\n                };\n                /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */ Vector.clone = function(vector) {\n                    return {\n                        x: vector.x,\n                        y: vector.y\n                    };\n                };\n                /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */ Vector.magnitude = function(vector) {\n                    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n                };\n                /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */ Vector.magnitudeSquared = function(vector) {\n                    return vector.x * vector.x + vector.y * vector.y;\n                };\n                /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */ Vector.rotate = function(vector, angle, output) {\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    if (!output) output = {};\n                    var x = vector.x * cos - vector.y * sin;\n                    output.y = vector.x * sin + vector.y * cos;\n                    output.x = x;\n                    return output;\n                };\n                /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */ Vector.rotateAbout = function(vector, angle, point, output) {\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    if (!output) output = {};\n                    var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n                    output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n                    output.x = x;\n                    return output;\n                };\n                /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */ Vector.normalise = function(vector) {\n                    var magnitude = Vector.magnitude(vector);\n                    if (magnitude === 0) return {\n                        x: 0,\n                        y: 0\n                    };\n                    return {\n                        x: vector.x / magnitude,\n                        y: vector.y / magnitude\n                    };\n                };\n                /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */ Vector.dot = function(vectorA, vectorB) {\n                    return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n                };\n                /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */ Vector.cross = function(vectorA, vectorB) {\n                    return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n                };\n                /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */ Vector.cross3 = function(vectorA, vectorB, vectorC) {\n                    return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n                };\n                /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */ Vector.add = function(vectorA, vectorB, output) {\n                    if (!output) output = {};\n                    output.x = vectorA.x + vectorB.x;\n                    output.y = vectorA.y + vectorB.y;\n                    return output;\n                };\n                /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */ Vector.sub = function(vectorA, vectorB, output) {\n                    if (!output) output = {};\n                    output.x = vectorA.x - vectorB.x;\n                    output.y = vectorA.y - vectorB.y;\n                    return output;\n                };\n                /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */ Vector.mult = function(vector, scalar) {\n                    return {\n                        x: vector.x * scalar,\n                        y: vector.y * scalar\n                    };\n                };\n                /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */ Vector.div = function(vector, scalar) {\n                    return {\n                        x: vector.x / scalar,\n                        y: vector.y / scalar\n                    };\n                };\n                /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */ Vector.perp = function(vector, negate) {\n                    negate = negate === true ? -1 : 1;\n                    return {\n                        x: negate * -vector.y,\n                        y: negate * vector.x\n                    };\n                };\n                /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */ Vector.neg = function(vector) {\n                    return {\n                        x: -vector.x,\n                        y: -vector.y\n                    };\n                };\n                /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */ Vector.angle = function(vectorA, vectorB) {\n                    return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n                };\n                /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */ Vector._temp = [\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create()\n                ];\n            })();\n        /***/ },\n        /* 3 */ /***/ function(module1, exports1, __nested_webpack_require_41202__) {\n            /**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/ var Vertices = {};\n            module1.exports = Vertices;\n            var Vector = __nested_webpack_require_41202__(2);\n            var Common = __nested_webpack_require_41202__(0);\n            (function() {\n                /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */ Vertices.create = function(points, body) {\n                    var vertices = [];\n                    for(var i = 0; i < points.length; i++){\n                        var point = points[i], vertex = {\n                            x: point.x,\n                            y: point.y,\n                            index: i,\n                            body: body,\n                            isInternal: false\n                        };\n                        vertices.push(vertex);\n                    }\n                    return vertices;\n                };\n                /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */ Vertices.fromPath = function(path, body) {\n                    var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig, points = [];\n                    path.replace(pathPattern, function(match, x, y) {\n                        points.push({\n                            x: parseFloat(x),\n                            y: parseFloat(y)\n                        });\n                    });\n                    return Vertices.create(points, body);\n                };\n                /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */ Vertices.centre = function(vertices) {\n                    var area = Vertices.area(vertices, true), centre = {\n                        x: 0,\n                        y: 0\n                    }, cross, temp, j;\n                    for(var i = 0; i < vertices.length; i++){\n                        j = (i + 1) % vertices.length;\n                        cross = Vector.cross(vertices[i], vertices[j]);\n                        temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n                        centre = Vector.add(centre, temp);\n                    }\n                    return Vector.div(centre, 6 * area);\n                };\n                /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */ Vertices.mean = function(vertices) {\n                    var average = {\n                        x: 0,\n                        y: 0\n                    };\n                    for(var i = 0; i < vertices.length; i++){\n                        average.x += vertices[i].x;\n                        average.y += vertices[i].y;\n                    }\n                    return Vector.div(average, vertices.length);\n                };\n                /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */ Vertices.area = function(vertices, signed) {\n                    var area = 0, j = vertices.length - 1;\n                    for(var i = 0; i < vertices.length; i++){\n                        area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n                        j = i;\n                    }\n                    if (signed) return area / 2;\n                    return Math.abs(area) / 2;\n                };\n                /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */ Vertices.inertia = function(vertices, mass) {\n                    var numerator = 0, denominator = 0, v = vertices, cross, j;\n                    // find the polygon's moment of inertia, using second moment of area\n                    // from equations at http://www.physicsforums.com/showthread.php?t=25293\n                    for(var n = 0; n < v.length; n++){\n                        j = (n + 1) % v.length;\n                        cross = Math.abs(Vector.cross(v[j], v[n]));\n                        numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n                        denominator += cross;\n                    }\n                    return mass / 6 * (numerator / denominator);\n                };\n                /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */ Vertices.translate = function(vertices, vector, scalar) {\n                    scalar = typeof scalar !== \"undefined\" ? scalar : 1;\n                    var verticesLength = vertices.length, translateX = vector.x * scalar, translateY = vector.y * scalar, i;\n                    for(i = 0; i < verticesLength; i++){\n                        vertices[i].x += translateX;\n                        vertices[i].y += translateY;\n                    }\n                    return vertices;\n                };\n                /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */ Vertices.rotate = function(vertices, angle, point) {\n                    if (angle === 0) return;\n                    var cos = Math.cos(angle), sin = Math.sin(angle), pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex, dx, dy, i;\n                    for(i = 0; i < verticesLength; i++){\n                        vertex = vertices[i];\n                        dx = vertex.x - pointX;\n                        dy = vertex.y - pointY;\n                        vertex.x = pointX + (dx * cos - dy * sin);\n                        vertex.y = pointY + (dx * sin + dy * cos);\n                    }\n                    return vertices;\n                };\n                /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */ Vertices.contains = function(vertices, point) {\n                    var pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex = vertices[verticesLength - 1], nextVertex;\n                    for(var i = 0; i < verticesLength; i++){\n                        nextVertex = vertices[i];\n                        if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                            return false;\n                        }\n                        vertex = nextVertex;\n                    }\n                    return true;\n                };\n                /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */ Vertices.scale = function(vertices, scaleX, scaleY, point) {\n                    if (scaleX === 1 && scaleY === 1) return vertices;\n                    point = point || Vertices.centre(vertices);\n                    var vertex, delta;\n                    for(var i = 0; i < vertices.length; i++){\n                        vertex = vertices[i];\n                        delta = Vector.sub(vertex, point);\n                        vertices[i].x = point.x + delta.x * scaleX;\n                        vertices[i].y = point.y + delta.y * scaleY;\n                    }\n                    return vertices;\n                };\n                /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */ Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n                    if (typeof radius === \"number\") {\n                        radius = [\n                            radius\n                        ];\n                    } else {\n                        radius = radius || [\n                            8\n                        ];\n                    }\n                    // quality defaults to -1, which is auto\n                    quality = typeof quality !== \"undefined\" ? quality : -1;\n                    qualityMin = qualityMin || 2;\n                    qualityMax = qualityMax || 14;\n                    var newVertices = [];\n                    for(var i = 0; i < vertices.length; i++){\n                        var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1], vertex = vertices[i], nextVertex = vertices[(i + 1) % vertices.length], currentRadius = radius[i < radius.length ? i : radius.length - 1];\n                        if (currentRadius === 0) {\n                            newVertices.push(vertex);\n                            continue;\n                        }\n                        var prevNormal = Vector.normalise({\n                            x: vertex.y - prevVertex.y,\n                            y: prevVertex.x - vertex.x\n                        });\n                        var nextNormal = Vector.normalise({\n                            x: nextVertex.y - vertex.y,\n                            y: vertex.x - nextVertex.x\n                        });\n                        var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)), radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius), midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)), scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n                        var precision = quality;\n                        if (quality === -1) {\n                            // automatically decide precision\n                            precision = Math.pow(currentRadius, 0.32) * 1.75;\n                        }\n                        precision = Common.clamp(precision, qualityMin, qualityMax);\n                        // use an even value for precision, more likely to reduce axes by using symmetry\n                        if (precision % 2 === 1) precision += 1;\n                        var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)), theta = alpha / precision;\n                        for(var j = 0; j < precision; j++){\n                            newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n                        }\n                    }\n                    return newVertices;\n                };\n                /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */ Vertices.clockwiseSort = function(vertices) {\n                    var centre = Vertices.mean(vertices);\n                    vertices.sort(function(vertexA, vertexB) {\n                        return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n                    });\n                    return vertices;\n                };\n                /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */ Vertices.isConvex = function(vertices) {\n                    // http://paulbourke.net/geometry/polygonmesh/\n                    // Copyright (c) Paul Bourke (use permitted)\n                    var flag = 0, n = vertices.length, i, j, k, z;\n                    if (n < 3) return null;\n                    for(i = 0; i < n; i++){\n                        j = (i + 1) % n;\n                        k = (i + 2) % n;\n                        z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n                        z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n                        if (z < 0) {\n                            flag |= 1;\n                        } else if (z > 0) {\n                            flag |= 2;\n                        }\n                        if (flag === 3) {\n                            return false;\n                        }\n                    }\n                    if (flag !== 0) {\n                        return true;\n                    } else {\n                        return null;\n                    }\n                };\n                /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */ Vertices.hull = function(vertices) {\n                    // http://geomalgorithms.com/a10-_hull-1.html\n                    var upper = [], lower = [], vertex, i;\n                    // sort vertices on x-axis (y-axis for ties)\n                    vertices = vertices.slice(0);\n                    vertices.sort(function(vertexA, vertexB) {\n                        var dx = vertexA.x - vertexB.x;\n                        return dx !== 0 ? dx : vertexA.y - vertexB.y;\n                    });\n                    // build lower hull\n                    for(i = 0; i < vertices.length; i += 1){\n                        vertex = vertices[i];\n                        while(lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0){\n                            lower.pop();\n                        }\n                        lower.push(vertex);\n                    }\n                    // build upper hull\n                    for(i = vertices.length - 1; i >= 0; i -= 1){\n                        vertex = vertices[i];\n                        while(upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0){\n                            upper.pop();\n                        }\n                        upper.push(vertex);\n                    }\n                    // concatenation of the lower and upper hulls gives the convex hull\n                    // omit last points because they are repeated at the beginning of the other list\n                    upper.pop();\n                    lower.pop();\n                    return upper.concat(lower);\n                };\n            })();\n        /***/ },\n        /* 4 */ /***/ function(module1, exports1, __nested_webpack_require_57367__) {\n            /**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/ var Body = {};\n            module1.exports = Body;\n            var Vertices = __nested_webpack_require_57367__(3);\n            var Vector = __nested_webpack_require_57367__(2);\n            var Sleeping = __nested_webpack_require_57367__(7);\n            var Common = __nested_webpack_require_57367__(0);\n            var Bounds = __nested_webpack_require_57367__(1);\n            var Axes = __nested_webpack_require_57367__(11);\n            (function() {\n                Body._timeCorrection = true;\n                Body._inertiaScale = 4;\n                Body._nextCollidingGroupId = 1;\n                Body._nextNonCollidingGroupId = -1;\n                Body._nextCategory = 0x0001;\n                Body._baseDelta = 1000 / 60;\n                /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */ Body.create = function(options) {\n                    var defaults = {\n                        id: Common.nextId(),\n                        type: \"body\",\n                        label: \"Body\",\n                        parts: [],\n                        plugin: {},\n                        angle: 0,\n                        vertices: Vertices.fromPath(\"L 0 0 L 40 0 L 40 40 L 0 40\"),\n                        position: {\n                            x: 0,\n                            y: 0\n                        },\n                        force: {\n                            x: 0,\n                            y: 0\n                        },\n                        torque: 0,\n                        positionImpulse: {\n                            x: 0,\n                            y: 0\n                        },\n                        constraintImpulse: {\n                            x: 0,\n                            y: 0,\n                            angle: 0\n                        },\n                        totalContacts: 0,\n                        speed: 0,\n                        angularSpeed: 0,\n                        velocity: {\n                            x: 0,\n                            y: 0\n                        },\n                        angularVelocity: 0,\n                        isSensor: false,\n                        isStatic: false,\n                        isSleeping: false,\n                        motion: 0,\n                        sleepThreshold: 60,\n                        density: 0.001,\n                        restitution: 0,\n                        friction: 0.1,\n                        frictionStatic: 0.5,\n                        frictionAir: 0.01,\n                        collisionFilter: {\n                            category: 0x0001,\n                            mask: 0xFFFFFFFF,\n                            group: 0\n                        },\n                        slop: 0.05,\n                        timeScale: 1,\n                        render: {\n                            visible: true,\n                            opacity: 1,\n                            strokeStyle: null,\n                            fillStyle: null,\n                            lineWidth: null,\n                            sprite: {\n                                xScale: 1,\n                                yScale: 1,\n                                xOffset: 0,\n                                yOffset: 0\n                            }\n                        },\n                        events: null,\n                        bounds: null,\n                        chamfer: null,\n                        circleRadius: 0,\n                        positionPrev: null,\n                        anglePrev: 0,\n                        parent: null,\n                        axes: null,\n                        area: 0,\n                        mass: 0,\n                        inertia: 0,\n                        deltaTime: 1000 / 60,\n                        _original: null\n                    };\n                    var body = Common.extend(defaults, options);\n                    _initProperties(body, options);\n                    return body;\n                };\n                /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */ Body.nextGroup = function(isNonColliding) {\n                    if (isNonColliding) return Body._nextNonCollidingGroupId--;\n                    return Body._nextCollidingGroupId++;\n                };\n                /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */ Body.nextCategory = function() {\n                    Body._nextCategory = Body._nextCategory << 1;\n                    return Body._nextCategory;\n                };\n                /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */ var _initProperties = function(body, options) {\n                    options = options || {};\n                    // init required properties (order is important)\n                    Body.set(body, {\n                        bounds: body.bounds || Bounds.create(body.vertices),\n                        positionPrev: body.positionPrev || Vector.clone(body.position),\n                        anglePrev: body.anglePrev || body.angle,\n                        vertices: body.vertices,\n                        parts: body.parts || [\n                            body\n                        ],\n                        isStatic: body.isStatic,\n                        isSleeping: body.isSleeping,\n                        parent: body.parent || body\n                    });\n                    Vertices.rotate(body.vertices, body.angle, body.position);\n                    Axes.rotate(body.axes, body.angle);\n                    Bounds.update(body.bounds, body.vertices, body.velocity);\n                    // allow options to override the automatically calculated properties\n                    Body.set(body, {\n                        axes: options.axes || body.axes,\n                        area: options.area || body.area,\n                        mass: options.mass || body.mass,\n                        inertia: options.inertia || body.inertia\n                    });\n                    // render properties\n                    var defaultFillStyle = body.isStatic ? \"#14151f\" : Common.choose([\n                        \"#f19648\",\n                        \"#f5d259\",\n                        \"#f55a3c\",\n                        \"#063e7b\",\n                        \"#ececd1\"\n                    ]), defaultStrokeStyle = body.isStatic ? \"#555\" : \"#ccc\", defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n                    body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n                    body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n                    body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n                    body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n                    body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n                };\n                /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */ Body.set = function(body, settings, value) {\n                    var property;\n                    if (typeof settings === \"string\") {\n                        property = settings;\n                        settings = {};\n                        settings[property] = value;\n                    }\n                    for(property in settings){\n                        if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n                        value = settings[property];\n                        switch(property){\n                            case \"isStatic\":\n                                Body.setStatic(body, value);\n                                break;\n                            case \"isSleeping\":\n                                Sleeping.set(body, value);\n                                break;\n                            case \"mass\":\n                                Body.setMass(body, value);\n                                break;\n                            case \"density\":\n                                Body.setDensity(body, value);\n                                break;\n                            case \"inertia\":\n                                Body.setInertia(body, value);\n                                break;\n                            case \"vertices\":\n                                Body.setVertices(body, value);\n                                break;\n                            case \"position\":\n                                Body.setPosition(body, value);\n                                break;\n                            case \"angle\":\n                                Body.setAngle(body, value);\n                                break;\n                            case \"velocity\":\n                                Body.setVelocity(body, value);\n                                break;\n                            case \"angularVelocity\":\n                                Body.setAngularVelocity(body, value);\n                                break;\n                            case \"speed\":\n                                Body.setSpeed(body, value);\n                                break;\n                            case \"angularSpeed\":\n                                Body.setAngularSpeed(body, value);\n                                break;\n                            case \"parts\":\n                                Body.setParts(body, value);\n                                break;\n                            case \"centre\":\n                                Body.setCentre(body, value);\n                                break;\n                            default:\n                                body[property] = value;\n                        }\n                    }\n                };\n                /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */ Body.setStatic = function(body, isStatic) {\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        if (isStatic) {\n                            if (!part.isStatic) {\n                                part._original = {\n                                    restitution: part.restitution,\n                                    friction: part.friction,\n                                    mass: part.mass,\n                                    inertia: part.inertia,\n                                    density: part.density,\n                                    inverseMass: part.inverseMass,\n                                    inverseInertia: part.inverseInertia\n                                };\n                            }\n                            part.restitution = 0;\n                            part.friction = 1;\n                            part.mass = part.inertia = part.density = Infinity;\n                            part.inverseMass = part.inverseInertia = 0;\n                            part.positionPrev.x = part.position.x;\n                            part.positionPrev.y = part.position.y;\n                            part.anglePrev = part.angle;\n                            part.angularVelocity = 0;\n                            part.speed = 0;\n                            part.angularSpeed = 0;\n                            part.motion = 0;\n                        } else if (part._original) {\n                            part.restitution = part._original.restitution;\n                            part.friction = part._original.friction;\n                            part.mass = part._original.mass;\n                            part.inertia = part._original.inertia;\n                            part.density = part._original.density;\n                            part.inverseMass = part._original.inverseMass;\n                            part.inverseInertia = part._original.inverseInertia;\n                            part._original = null;\n                        }\n                        part.isStatic = isStatic;\n                    }\n                };\n                /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */ Body.setMass = function(body, mass) {\n                    var moment = body.inertia / (body.mass / 6);\n                    body.inertia = moment * (mass / 6);\n                    body.inverseInertia = 1 / body.inertia;\n                    body.mass = mass;\n                    body.inverseMass = 1 / body.mass;\n                    body.density = body.mass / body.area;\n                };\n                /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */ Body.setDensity = function(body, density) {\n                    Body.setMass(body, density * body.area);\n                    body.density = density;\n                };\n                /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */ Body.setInertia = function(body, inertia) {\n                    body.inertia = inertia;\n                    body.inverseInertia = 1 / body.inertia;\n                };\n                /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */ Body.setVertices = function(body, vertices) {\n                    // change vertices\n                    if (vertices[0].body === body) {\n                        body.vertices = vertices;\n                    } else {\n                        body.vertices = Vertices.create(vertices, body);\n                    }\n                    // update properties\n                    body.axes = Axes.fromVertices(body.vertices);\n                    body.area = Vertices.area(body.vertices);\n                    Body.setMass(body, body.density * body.area);\n                    // orient vertices around the centre of mass at origin (0, 0)\n                    var centre = Vertices.centre(body.vertices);\n                    Vertices.translate(body.vertices, centre, -1);\n                    // update inertia while vertices are at origin (0, 0)\n                    Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n                    // update geometry\n                    Vertices.translate(body.vertices, body.position);\n                    Bounds.update(body.bounds, body.vertices, body.velocity);\n                };\n                /**\n     * Sets the parts of the `body`. \n     * \n     * See `body.parts` for details and requirements on how parts are used.\n     * \n     * See Bodies.fromVertices for a related utility.\n     * \n     * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n     * Sets each `part.parent` to be this `body`.  \n     * \n     * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n     * Automatically ensures that the first part in `body.parts` is the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */ Body.setParts = function(body, parts, autoHull) {\n                    var i;\n                    // add all the parts, ensuring that the first part is always the parent body\n                    parts = parts.slice(0);\n                    body.parts.length = 0;\n                    body.parts.push(body);\n                    body.parent = body;\n                    for(i = 0; i < parts.length; i++){\n                        var part = parts[i];\n                        if (part !== body) {\n                            part.parent = body;\n                            body.parts.push(part);\n                        }\n                    }\n                    if (body.parts.length === 1) return;\n                    autoHull = typeof autoHull !== \"undefined\" ? autoHull : true;\n                    // find the convex hull of all parts to set on the parent body\n                    if (autoHull) {\n                        var vertices = [];\n                        for(i = 0; i < parts.length; i++){\n                            vertices = vertices.concat(parts[i].vertices);\n                        }\n                        Vertices.clockwiseSort(vertices);\n                        var hull = Vertices.hull(vertices), hullCentre = Vertices.centre(hull);\n                        Body.setVertices(body, hull);\n                        Vertices.translate(body.vertices, hullCentre);\n                    }\n                    // sum the properties of all compound parts of the parent body\n                    var total = Body._totalProperties(body);\n                    body.area = total.area;\n                    body.parent = body;\n                    body.position.x = total.centre.x;\n                    body.position.y = total.centre.y;\n                    body.positionPrev.x = total.centre.x;\n                    body.positionPrev.y = total.centre.y;\n                    Body.setMass(body, total.mass);\n                    Body.setInertia(body, total.inertia);\n                    Body.setPosition(body, total.centre);\n                };\n                /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */ Body.setCentre = function(body, centre, relative) {\n                    if (!relative) {\n                        body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n                        body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n                        body.position.x = centre.x;\n                        body.position.y = centre.y;\n                    } else {\n                        body.positionPrev.x += centre.x;\n                        body.positionPrev.y += centre.y;\n                        body.position.x += centre.x;\n                        body.position.y += centre.y;\n                    }\n                };\n                /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */ Body.setPosition = function(body, position, updateVelocity) {\n                    var delta = Vector.sub(position, body.position);\n                    if (updateVelocity) {\n                        body.positionPrev.x = body.position.x;\n                        body.positionPrev.y = body.position.y;\n                        body.velocity.x = delta.x;\n                        body.velocity.y = delta.y;\n                        body.speed = Vector.magnitude(delta);\n                    } else {\n                        body.positionPrev.x += delta.x;\n                        body.positionPrev.y += delta.y;\n                    }\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        part.position.x += delta.x;\n                        part.position.y += delta.y;\n                        Vertices.translate(part.vertices, delta);\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                };\n                /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */ Body.setAngle = function(body, angle, updateVelocity) {\n                    var delta = angle - body.angle;\n                    if (updateVelocity) {\n                        body.anglePrev = body.angle;\n                        body.angularVelocity = delta;\n                        body.angularSpeed = Math.abs(delta);\n                    } else {\n                        body.anglePrev += delta;\n                    }\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        part.angle += delta;\n                        Vertices.rotate(part.vertices, delta, body.position);\n                        Axes.rotate(part.axes, delta);\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                        if (i > 0) {\n                            Vector.rotateAbout(part.position, delta, body.position, part.position);\n                        }\n                    }\n                };\n                /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */ Body.setVelocity = function(body, velocity) {\n                    var timeScale = body.deltaTime / Body._baseDelta;\n                    body.positionPrev.x = body.position.x - velocity.x * timeScale;\n                    body.positionPrev.y = body.position.y - velocity.y * timeScale;\n                    body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n                    body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n                    body.speed = Vector.magnitude(body.velocity);\n                };\n                /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */ Body.getVelocity = function(body) {\n                    var timeScale = Body._baseDelta / body.deltaTime;\n                    return {\n                        x: (body.position.x - body.positionPrev.x) * timeScale,\n                        y: (body.position.y - body.positionPrev.y) * timeScale\n                    };\n                };\n                /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */ Body.getSpeed = function(body) {\n                    return Vector.magnitude(Body.getVelocity(body));\n                };\n                /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */ Body.setSpeed = function(body, speed) {\n                    Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n                };\n                /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */ Body.setAngularVelocity = function(body, velocity) {\n                    var timeScale = body.deltaTime / Body._baseDelta;\n                    body.anglePrev = body.angle - velocity * timeScale;\n                    body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n                    body.angularSpeed = Math.abs(body.angularVelocity);\n                };\n                /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */ Body.getAngularVelocity = function(body) {\n                    return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n                };\n                /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */ Body.getAngularSpeed = function(body) {\n                    return Math.abs(Body.getAngularVelocity(body));\n                };\n                /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */ Body.setAngularSpeed = function(body, speed) {\n                    Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n                };\n                /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */ Body.translate = function(body, translation, updateVelocity) {\n                    Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n                };\n                /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */ Body.rotate = function(body, rotation, point, updateVelocity) {\n                    if (!point) {\n                        Body.setAngle(body, body.angle + rotation, updateVelocity);\n                    } else {\n                        var cos = Math.cos(rotation), sin = Math.sin(rotation), dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + (dx * cos - dy * sin),\n                            y: point.y + (dx * sin + dy * cos)\n                        }, updateVelocity);\n                        Body.setAngle(body, body.angle + rotation, updateVelocity);\n                    }\n                };\n                /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */ Body.scale = function(body, scaleX, scaleY, point) {\n                    var totalArea = 0, totalInertia = 0;\n                    point = point || body.position;\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        // scale vertices\n                        Vertices.scale(part.vertices, scaleX, scaleY, point);\n                        // update properties\n                        part.axes = Axes.fromVertices(part.vertices);\n                        part.area = Vertices.area(part.vertices);\n                        Body.setMass(part, body.density * part.area);\n                        // update inertia (requires vertices to be at origin)\n                        Vertices.translate(part.vertices, {\n                            x: -part.position.x,\n                            y: -part.position.y\n                        });\n                        Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n                        Vertices.translate(part.vertices, {\n                            x: part.position.x,\n                            y: part.position.y\n                        });\n                        if (i > 0) {\n                            totalArea += part.area;\n                            totalInertia += part.inertia;\n                        }\n                        // scale position\n                        part.position.x = point.x + (part.position.x - point.x) * scaleX;\n                        part.position.y = point.y + (part.position.y - point.y) * scaleY;\n                        // update bounds\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                    // handle parent body\n                    if (body.parts.length > 1) {\n                        body.area = totalArea;\n                        if (!body.isStatic) {\n                            Body.setMass(body, body.density * totalArea);\n                            Body.setInertia(body, totalInertia);\n                        }\n                    }\n                    // handle circles\n                    if (body.circleRadius) {\n                        if (scaleX === scaleY) {\n                            body.circleRadius *= scaleX;\n                        } else {\n                            // body is no longer a circle\n                            body.circleRadius = null;\n                        }\n                    }\n                };\n                /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */ Body.update = function(body, deltaTime) {\n                    deltaTime = (typeof deltaTime !== \"undefined\" ? deltaTime : 1000 / 60) * body.timeScale;\n                    var deltaTimeSquared = deltaTime * deltaTime, correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n                    // from the previous step\n                    var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta), velocityPrevX = (body.position.x - body.positionPrev.x) * correction, velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n                    // update velocity with Verlet integration\n                    body.velocity.x = velocityPrevX * frictionAir + body.force.x / body.mass * deltaTimeSquared;\n                    body.velocity.y = velocityPrevY * frictionAir + body.force.y / body.mass * deltaTimeSquared;\n                    body.positionPrev.x = body.position.x;\n                    body.positionPrev.y = body.position.y;\n                    body.position.x += body.velocity.x;\n                    body.position.y += body.velocity.y;\n                    body.deltaTime = deltaTime;\n                    // update angular velocity with Verlet integration\n                    body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n                    body.anglePrev = body.angle;\n                    body.angle += body.angularVelocity;\n                    // transform the body geometry\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        Vertices.translate(part.vertices, body.velocity);\n                        if (i > 0) {\n                            part.position.x += body.velocity.x;\n                            part.position.y += body.velocity.y;\n                        }\n                        if (body.angularVelocity !== 0) {\n                            Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                            Axes.rotate(part.axes, body.angularVelocity);\n                            if (i > 0) {\n                                Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                            }\n                        }\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                };\n                /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */ Body.updateVelocities = function(body) {\n                    var timeScale = Body._baseDelta / body.deltaTime, bodyVelocity = body.velocity;\n                    bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n                    bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n                    body.speed = Math.sqrt(bodyVelocity.x * bodyVelocity.x + bodyVelocity.y * bodyVelocity.y);\n                    body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n                    body.angularSpeed = Math.abs(body.angularVelocity);\n                };\n                /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */ Body.applyForce = function(body, position, force) {\n                    var offset = {\n                        x: position.x - body.position.x,\n                        y: position.y - body.position.y\n                    };\n                    body.force.x += force.x;\n                    body.force.y += force.y;\n                    body.torque += offset.x * force.y - offset.y * force.x;\n                };\n                /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */ Body._totalProperties = function(body) {\n                    // from equations at:\n                    // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n                    // http://output.to/sideway/default.asp?qno=121100087\n                    var properties = {\n                        mass: 0,\n                        area: 0,\n                        inertia: 0,\n                        centre: {\n                            x: 0,\n                            y: 0\n                        }\n                    };\n                    // sum the properties of all compound parts of the parent body\n                    for(var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++){\n                        var part = body.parts[i], mass = part.mass !== Infinity ? part.mass : 1;\n                        properties.mass += mass;\n                        properties.area += part.area;\n                        properties.inertia += part.inertia;\n                        properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n                    }\n                    properties.centre = Vector.div(properties.centre, properties.mass);\n                    return properties;\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */ /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * See `Bodies.fromVertices` for a related utility.\n     * \n     * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n     * \n     * The parts are fixed together and therefore perform as a single unified rigid body.\n     * \n     * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n     * \n     * Use properties and functions on the parent `body` rather than on parts.\n     *   \n     * Outside of their geometry, most properties on parts are not considered or updated.  \n     * As such 'per-part' material properties among others are not currently considered.\n     * \n     * Parts should be created specifically for their parent body.  \n     * Parts should not be shared or reused between bodies, only one parent is supported.  \n     * Parts should not have their own parts, they are not handled recursively.  \n     * Parts should not be added to the world directly or any other composite.  \n     * Parts own vertices must be convex and in clockwise order.   \n     * \n     * A body with more than one part is sometimes referred to as a 'compound' body. \n     * \n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */ /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */ /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */ /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */ /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */ /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */ /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */ /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */ /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */ /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */ /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */ /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */ /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */ /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */ /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */ /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */ /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */ /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */ /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */ /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */ /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */ /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */ /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */ /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */ /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */ /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */ /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */ /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */ /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */ /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */ /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */ /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */ /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */ /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */ /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */ /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */ /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */ /**\n     * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n     * \n     * See `Vertices.chamfer` for possible parameters this object may hold.\n     * \n     * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n     * \n     * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n     * \n     * @property chamfer\n     * @type object|null|undefined\n     */ })();\n        /***/ },\n        /* 5 */ /***/ function(module1, exports1, __nested_webpack_require_115026__) {\n            /**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/ var Events = {};\n            module1.exports = Events;\n            var Common = __nested_webpack_require_115026__(0);\n            (function() {\n                /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */ Events.on = function(object, eventNames, callback) {\n                    var names = eventNames.split(\" \"), name;\n                    for(var i = 0; i < names.length; i++){\n                        name = names[i];\n                        object.events = object.events || {};\n                        object.events[name] = object.events[name] || [];\n                        object.events[name].push(callback);\n                    }\n                    return callback;\n                };\n                /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */ Events.off = function(object, eventNames, callback) {\n                    if (!eventNames) {\n                        object.events = {};\n                        return;\n                    }\n                    // handle Events.off(object, callback)\n                    if (typeof eventNames === \"function\") {\n                        callback = eventNames;\n                        eventNames = Common.keys(object.events).join(\" \");\n                    }\n                    var names = eventNames.split(\" \");\n                    for(var i = 0; i < names.length; i++){\n                        var callbacks = object.events[names[i]], newCallbacks = [];\n                        if (callback && callbacks) {\n                            for(var j = 0; j < callbacks.length; j++){\n                                if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n                            }\n                        }\n                        object.events[names[i]] = newCallbacks;\n                    }\n                };\n                /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */ Events.trigger = function(object, eventNames, event) {\n                    var names, name, callbacks, eventClone;\n                    var events = object.events;\n                    if (events && Common.keys(events).length > 0) {\n                        if (!event) event = {};\n                        names = eventNames.split(\" \");\n                        for(var i = 0; i < names.length; i++){\n                            name = names[i];\n                            callbacks = events[name];\n                            if (callbacks) {\n                                eventClone = Common.clone(event, false);\n                                eventClone.name = name;\n                                eventClone.source = object;\n                                for(var j = 0; j < callbacks.length; j++){\n                                    callbacks[j].apply(object, [\n                                        eventClone\n                                    ]);\n                                }\n                            }\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 6 */ /***/ function(module1, exports1, __nested_webpack_require_118833__) {\n            /**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/ var Composite = {};\n            module1.exports = Composite;\n            var Events = __nested_webpack_require_118833__(5);\n            var Common = __nested_webpack_require_118833__(0);\n            var Bounds = __nested_webpack_require_118833__(1);\n            var Body = __nested_webpack_require_118833__(4);\n            (function() {\n                /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */ Composite.create = function(options) {\n                    return Common.extend({\n                        id: Common.nextId(),\n                        type: \"composite\",\n                        parent: null,\n                        isModified: false,\n                        bodies: [],\n                        constraints: [],\n                        composites: [],\n                        label: \"Composite\",\n                        plugin: {},\n                        cache: {\n                            allBodies: null,\n                            allConstraints: null,\n                            allComposites: null\n                        }\n                    }, options);\n                };\n                /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */ Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n                    composite.isModified = isModified;\n                    if (isModified && composite.cache) {\n                        composite.cache.allBodies = null;\n                        composite.cache.allConstraints = null;\n                        composite.cache.allComposites = null;\n                    }\n                    if (updateParents && composite.parent) {\n                        Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n                    }\n                    if (updateChildren) {\n                        for(var i = 0; i < composite.composites.length; i++){\n                            var childComposite = composite.composites[i];\n                            Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n                        }\n                    }\n                };\n                /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */ Composite.add = function(composite, object) {\n                    var objects = [].concat(object);\n                    Events.trigger(composite, \"beforeAdd\", {\n                        object: object\n                    });\n                    for(var i = 0; i < objects.length; i++){\n                        var obj = objects[i];\n                        switch(obj.type){\n                            case \"body\":\n                                // skip adding compound parts\n                                if (obj.parent !== obj) {\n                                    Common.warn(\"Composite.add: skipped adding a compound body part (you must add its parent instead)\");\n                                    break;\n                                }\n                                Composite.addBody(composite, obj);\n                                break;\n                            case \"constraint\":\n                                Composite.addConstraint(composite, obj);\n                                break;\n                            case \"composite\":\n                                Composite.addComposite(composite, obj);\n                                break;\n                            case \"mouseConstraint\":\n                                Composite.addConstraint(composite, obj.constraint);\n                                break;\n                        }\n                    }\n                    Events.trigger(composite, \"afterAdd\", {\n                        object: object\n                    });\n                    return composite;\n                };\n                /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */ Composite.remove = function(composite, object, deep) {\n                    var objects = [].concat(object);\n                    Events.trigger(composite, \"beforeRemove\", {\n                        object: object\n                    });\n                    for(var i = 0; i < objects.length; i++){\n                        var obj = objects[i];\n                        switch(obj.type){\n                            case \"body\":\n                                Composite.removeBody(composite, obj, deep);\n                                break;\n                            case \"constraint\":\n                                Composite.removeConstraint(composite, obj, deep);\n                                break;\n                            case \"composite\":\n                                Composite.removeComposite(composite, obj, deep);\n                                break;\n                            case \"mouseConstraint\":\n                                Composite.removeConstraint(composite, obj.constraint);\n                                break;\n                        }\n                    }\n                    Events.trigger(composite, \"afterRemove\", {\n                        object: object\n                    });\n                    return composite;\n                };\n                /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */ Composite.addComposite = function(compositeA, compositeB) {\n                    compositeA.composites.push(compositeB);\n                    compositeB.parent = compositeA;\n                    Composite.setModified(compositeA, true, true, false);\n                    return compositeA;\n                };\n                /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */ Composite.removeComposite = function(compositeA, compositeB, deep) {\n                    var position = Common.indexOf(compositeA.composites, compositeB);\n                    if (position !== -1) {\n                        var bodies = Composite.allBodies(compositeB);\n                        Composite.removeCompositeAt(compositeA, position);\n                        for(var i = 0; i < bodies.length; i++){\n                            bodies[i].sleepCounter = 0;\n                        }\n                    }\n                    if (deep) {\n                        for(var i = 0; i < compositeA.composites.length; i++){\n                            Composite.removeComposite(compositeA.composites[i], compositeB, true);\n                        }\n                    }\n                    return compositeA;\n                };\n                /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */ Composite.removeCompositeAt = function(composite, position) {\n                    composite.composites.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */ Composite.addBody = function(composite, body) {\n                    composite.bodies.push(body);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */ Composite.removeBody = function(composite, body, deep) {\n                    var position = Common.indexOf(composite.bodies, body);\n                    if (position !== -1) {\n                        Composite.removeBodyAt(composite, position);\n                        body.sleepCounter = 0;\n                    }\n                    if (deep) {\n                        for(var i = 0; i < composite.composites.length; i++){\n                            Composite.removeBody(composite.composites[i], body, true);\n                        }\n                    }\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */ Composite.removeBodyAt = function(composite, position) {\n                    composite.bodies.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */ Composite.addConstraint = function(composite, constraint) {\n                    composite.constraints.push(constraint);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */ Composite.removeConstraint = function(composite, constraint, deep) {\n                    var position = Common.indexOf(composite.constraints, constraint);\n                    if (position !== -1) {\n                        Composite.removeConstraintAt(composite, position);\n                    }\n                    if (deep) {\n                        for(var i = 0; i < composite.composites.length; i++){\n                            Composite.removeConstraint(composite.composites[i], constraint, true);\n                        }\n                    }\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */ Composite.removeConstraintAt = function(composite, position) {\n                    composite.constraints.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */ Composite.clear = function(composite, keepStatic, deep) {\n                    if (deep) {\n                        for(var i = 0; i < composite.composites.length; i++){\n                            Composite.clear(composite.composites[i], keepStatic, true);\n                        }\n                    }\n                    if (keepStatic) {\n                        composite.bodies = composite.bodies.filter(function(body) {\n                            return body.isStatic;\n                        });\n                    } else {\n                        composite.bodies.length = 0;\n                    }\n                    composite.constraints.length = 0;\n                    composite.composites.length = 0;\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */ Composite.allBodies = function(composite) {\n                    if (composite.cache && composite.cache.allBodies) {\n                        return composite.cache.allBodies;\n                    }\n                    var bodies = [].concat(composite.bodies);\n                    for(var i = 0; i < composite.composites.length; i++)bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n                    if (composite.cache) {\n                        composite.cache.allBodies = bodies;\n                    }\n                    return bodies;\n                };\n                /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */ Composite.allConstraints = function(composite) {\n                    if (composite.cache && composite.cache.allConstraints) {\n                        return composite.cache.allConstraints;\n                    }\n                    var constraints = [].concat(composite.constraints);\n                    for(var i = 0; i < composite.composites.length; i++)constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n                    if (composite.cache) {\n                        composite.cache.allConstraints = constraints;\n                    }\n                    return constraints;\n                };\n                /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */ Composite.allComposites = function(composite) {\n                    if (composite.cache && composite.cache.allComposites) {\n                        return composite.cache.allComposites;\n                    }\n                    var composites = [].concat(composite.composites);\n                    for(var i = 0; i < composite.composites.length; i++)composites = composites.concat(Composite.allComposites(composite.composites[i]));\n                    if (composite.cache) {\n                        composite.cache.allComposites = composites;\n                    }\n                    return composites;\n                };\n                /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */ Composite.get = function(composite, id, type) {\n                    var objects, object;\n                    switch(type){\n                        case \"body\":\n                            objects = Composite.allBodies(composite);\n                            break;\n                        case \"constraint\":\n                            objects = Composite.allConstraints(composite);\n                            break;\n                        case \"composite\":\n                            objects = Composite.allComposites(composite).concat(composite);\n                            break;\n                    }\n                    if (!objects) return null;\n                    object = objects.filter(function(object) {\n                        return object.id.toString() === id.toString();\n                    });\n                    return object.length === 0 ? null : object[0];\n                };\n                /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */ Composite.move = function(compositeA, objects, compositeB) {\n                    Composite.remove(compositeA, objects);\n                    Composite.add(compositeB, objects);\n                    return compositeA;\n                };\n                /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */ Composite.rebase = function(composite) {\n                    var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n                    for(var i = 0; i < objects.length; i++){\n                        objects[i].id = Common.nextId();\n                    }\n                    return composite;\n                };\n                /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */ Composite.translate = function(composite, translation, recursive) {\n                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++){\n                        Body.translate(bodies[i], translation);\n                    }\n                    return composite;\n                };\n                /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */ Composite.rotate = function(composite, rotation, point, recursive) {\n                    var cos = Math.cos(rotation), sin = Math.sin(rotation), bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + (dx * cos - dy * sin),\n                            y: point.y + (dx * sin + dy * cos)\n                        });\n                        Body.rotate(body, rotation);\n                    }\n                    return composite;\n                };\n                /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */ Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + dx * scaleX,\n                            y: point.y + dy * scaleY\n                        });\n                        Body.scale(body, scaleX, scaleY);\n                    }\n                    return composite;\n                };\n                /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */ Composite.bounds = function(composite) {\n                    var bodies = Composite.allBodies(composite), vertices = [];\n                    for(var i = 0; i < bodies.length; i += 1){\n                        var body = bodies[i];\n                        vertices.push(body.bounds.min, body.bounds.max);\n                    }\n                    return Bounds.create(vertices);\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */ /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */ /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */ /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */ /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */ /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */ })();\n        /***/ },\n        /* 7 */ /***/ function(module1, exports1, __nested_webpack_require_146011__) {\n            /**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/ var Sleeping = {};\n            module1.exports = Sleeping;\n            var Body = __nested_webpack_require_146011__(4);\n            var Events = __nested_webpack_require_146011__(5);\n            var Common = __nested_webpack_require_146011__(0);\n            (function() {\n                Sleeping._motionWakeThreshold = 0.18;\n                Sleeping._motionSleepThreshold = 0.08;\n                Sleeping._minBias = 0.9;\n                /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */ Sleeping.update = function(bodies, delta) {\n                    var timeScale = delta / Common._baseDelta, motionSleepThreshold = Sleeping._motionSleepThreshold;\n                    // update bodies sleeping status\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], speed = Body.getSpeed(body), angularSpeed = Body.getAngularSpeed(body), motion = speed * speed + angularSpeed * angularSpeed;\n                        // wake up bodies if they have a force applied\n                        if (body.force.x !== 0 || body.force.y !== 0) {\n                            Sleeping.set(body, false);\n                            continue;\n                        }\n                        var minMotion = Math.min(body.motion, motion), maxMotion = Math.max(body.motion, motion);\n                        // biased average motion estimation between frames\n                        body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n                        if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                            body.sleepCounter += 1;\n                            if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                                Sleeping.set(body, true);\n                            }\n                        } else if (body.sleepCounter > 0) {\n                            body.sleepCounter -= 1;\n                        }\n                    }\n                };\n                /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */ Sleeping.afterCollisions = function(pairs) {\n                    var motionSleepThreshold = Sleeping._motionSleepThreshold;\n                    // wake up bodies involved in collisions\n                    for(var i = 0; i < pairs.length; i++){\n                        var pair = pairs[i];\n                        // don't wake inactive pairs\n                        if (!pair.isActive) continue;\n                        var collision = pair.collision, bodyA = collision.bodyA.parent, bodyB = collision.bodyB.parent;\n                        // don't wake if at least one body is static\n                        if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n                        if (bodyA.isSleeping || bodyB.isSleeping) {\n                            var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB, movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n                            if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                                Sleeping.set(sleepingBody, false);\n                            }\n                        }\n                    }\n                };\n                /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */ Sleeping.set = function(body, isSleeping) {\n                    var wasSleeping = body.isSleeping;\n                    if (isSleeping) {\n                        body.isSleeping = true;\n                        body.sleepCounter = body.sleepThreshold;\n                        body.positionImpulse.x = 0;\n                        body.positionImpulse.y = 0;\n                        body.positionPrev.x = body.position.x;\n                        body.positionPrev.y = body.position.y;\n                        body.anglePrev = body.angle;\n                        body.speed = 0;\n                        body.angularSpeed = 0;\n                        body.motion = 0;\n                        if (!wasSleeping) {\n                            Events.trigger(body, \"sleepStart\");\n                        }\n                    } else {\n                        body.isSleeping = false;\n                        body.sleepCounter = 0;\n                        if (wasSleeping) {\n                            Events.trigger(body, \"sleepEnd\");\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 8 */ /***/ function(module1, exports1, __nested_webpack_require_150899__) {\n            /**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/ var Collision = {};\n            module1.exports = Collision;\n            var Vertices = __nested_webpack_require_150899__(3);\n            var Pair = __nested_webpack_require_150899__(9);\n            (function() {\n                var _supports = [];\n                var _overlapAB = {\n                    overlap: 0,\n                    axis: null\n                };\n                var _overlapBA = {\n                    overlap: 0,\n                    axis: null\n                };\n                /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */ Collision.create = function(bodyA, bodyB) {\n                    return {\n                        pair: null,\n                        collided: false,\n                        bodyA: bodyA,\n                        bodyB: bodyB,\n                        parentA: bodyA.parent,\n                        parentB: bodyB.parent,\n                        depth: 0,\n                        normal: {\n                            x: 0,\n                            y: 0\n                        },\n                        tangent: {\n                            x: 0,\n                            y: 0\n                        },\n                        penetration: {\n                            x: 0,\n                            y: 0\n                        },\n                        supports: [\n                            null,\n                            null\n                        ],\n                        supportCount: 0\n                    };\n                };\n                /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */ Collision.collides = function(bodyA, bodyB, pairs) {\n                    Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n                    if (_overlapAB.overlap <= 0) {\n                        return null;\n                    }\n                    Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n                    if (_overlapBA.overlap <= 0) {\n                        return null;\n                    }\n                    // reuse collision records for gc efficiency\n                    var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)], collision;\n                    if (!pair) {\n                        collision = Collision.create(bodyA, bodyB);\n                        collision.collided = true;\n                        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n                        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n                        collision.parentA = collision.bodyA.parent;\n                        collision.parentB = collision.bodyB.parent;\n                    } else {\n                        collision = pair.collision;\n                    }\n                    bodyA = collision.bodyA;\n                    bodyB = collision.bodyB;\n                    var minOverlap;\n                    if (_overlapAB.overlap < _overlapBA.overlap) {\n                        minOverlap = _overlapAB;\n                    } else {\n                        minOverlap = _overlapBA;\n                    }\n                    var normal = collision.normal, tangent = collision.tangent, penetration = collision.penetration, supports = collision.supports, depth = minOverlap.overlap, minAxis = minOverlap.axis, normalX = minAxis.x, normalY = minAxis.y, deltaX = bodyB.position.x - bodyA.position.x, deltaY = bodyB.position.y - bodyA.position.y;\n                    // ensure normal is facing away from bodyA\n                    if (normalX * deltaX + normalY * deltaY >= 0) {\n                        normalX = -normalX;\n                        normalY = -normalY;\n                    }\n                    normal.x = normalX;\n                    normal.y = normalY;\n                    tangent.x = -normalY;\n                    tangent.y = normalX;\n                    penetration.x = normalX * depth;\n                    penetration.y = normalY * depth;\n                    collision.depth = depth;\n                    // find support points, there is always either exactly one or two\n                    var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1), supportCount = 0;\n                    // find the supports from bodyB that are inside bodyA\n                    if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n                        supports[supportCount++] = supportsB[0];\n                    }\n                    if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n                        supports[supportCount++] = supportsB[1];\n                    }\n                    // find the supports from bodyA that are inside bodyB\n                    if (supportCount < 2) {\n                        var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n                        if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                            supports[supportCount++] = supportsA[0];\n                        }\n                        if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                            supports[supportCount++] = supportsA[1];\n                        }\n                    }\n                    // account for the edge case of overlapping but no vertex containment\n                    if (supportCount === 0) {\n                        supports[supportCount++] = supportsB[0];\n                    }\n                    // update support count\n                    collision.supportCount = supportCount;\n                    return collision;\n                };\n                /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */ Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n                    var verticesALength = verticesA.length, verticesBLength = verticesB.length, verticesAX = verticesA[0].x, verticesAY = verticesA[0].y, verticesBX = verticesB[0].x, verticesBY = verticesB[0].y, axesLength = axes.length, overlapMin = Number.MAX_VALUE, overlapAxisNumber = 0, overlap, overlapAB, overlapBA, dot, i, j;\n                    for(i = 0; i < axesLength; i++){\n                        var axis = axes[i], axisX = axis.x, axisY = axis.y, minA = verticesAX * axisX + verticesAY * axisY, minB = verticesBX * axisX + verticesBY * axisY, maxA = minA, maxB = minB;\n                        for(j = 1; j < verticesALength; j += 1){\n                            dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n                            if (dot > maxA) {\n                                maxA = dot;\n                            } else if (dot < minA) {\n                                minA = dot;\n                            }\n                        }\n                        for(j = 1; j < verticesBLength; j += 1){\n                            dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n                            if (dot > maxB) {\n                                maxB = dot;\n                            } else if (dot < minB) {\n                                minB = dot;\n                            }\n                        }\n                        overlapAB = maxA - minB;\n                        overlapBA = maxB - minA;\n                        overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n                        if (overlap < overlapMin) {\n                            overlapMin = overlap;\n                            overlapAxisNumber = i;\n                            if (overlap <= 0) {\n                                break;\n                            }\n                        }\n                    }\n                    result.axis = axes[overlapAxisNumber];\n                    result.overlap = overlapMin;\n                };\n                /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */ Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n                    var vertices = bodyB.vertices, verticesLength = vertices.length, bodyAPositionX = bodyA.position.x, bodyAPositionY = bodyA.position.y, normalX = normal.x * direction, normalY = normal.y * direction, vertexA = vertices[0], vertexB = vertexA, nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y), vertexC, distance, j;\n                    // find deepest vertex relative to the axis\n                    for(j = 1; j < verticesLength; j += 1){\n                        vertexB = vertices[j];\n                        distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n                        // convex hill-climbing\n                        if (distance < nearestDistance) {\n                            nearestDistance = distance;\n                            vertexA = vertexB;\n                        }\n                    }\n                    // measure next vertex\n                    vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n                    nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n                    // compare with previous vertex\n                    vertexB = vertices[(vertexA.index + 1) % verticesLength];\n                    if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n                        _supports[0] = vertexA;\n                        _supports[1] = vertexB;\n                        return _supports;\n                    }\n                    _supports[0] = vertexA;\n                    _supports[1] = vertexC;\n                    return _supports;\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */ /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */ /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */ /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */ /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */ /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */ /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */ /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * An array of body vertices that represent the support points in the collision.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     * \n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */ /**\n     * The number of active supports for this collision found in `collision.supports`.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     *\n     * @property supportCount\n     * @type number\n     * @default 0\n     */ })();\n        /***/ },\n        /* 9 */ /***/ function(module1, exports1, __nested_webpack_require_164455__) {\n            /**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/ var Pair = {};\n            module1.exports = Pair;\n            var Contact = __nested_webpack_require_164455__(16);\n            (function() {\n                /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */ Pair.create = function(collision, timestamp) {\n                    var bodyA = collision.bodyA, bodyB = collision.bodyB;\n                    var pair = {\n                        id: Pair.id(bodyA, bodyB),\n                        bodyA: bodyA,\n                        bodyB: bodyB,\n                        collision: collision,\n                        contacts: [\n                            Contact.create(),\n                            Contact.create()\n                        ],\n                        contactCount: 0,\n                        separation: 0,\n                        isActive: true,\n                        isSensor: bodyA.isSensor || bodyB.isSensor,\n                        timeCreated: timestamp,\n                        timeUpdated: timestamp,\n                        inverseMass: 0,\n                        friction: 0,\n                        frictionStatic: 0,\n                        restitution: 0,\n                        slop: 0\n                    };\n                    Pair.update(pair, collision, timestamp);\n                    return pair;\n                };\n                /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */ Pair.update = function(pair, collision, timestamp) {\n                    var supports = collision.supports, supportCount = collision.supportCount, contacts = pair.contacts, parentA = collision.parentA, parentB = collision.parentB;\n                    pair.isActive = true;\n                    pair.timeUpdated = timestamp;\n                    pair.collision = collision;\n                    pair.separation = collision.depth;\n                    pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n                    pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n                    pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n                    pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n                    pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n                    pair.contactCount = supportCount;\n                    collision.pair = pair;\n                    var supportA = supports[0], contactA = contacts[0], supportB = supports[1], contactB = contacts[1];\n                    // match contacts to supports\n                    if (contactB.vertex === supportA || contactA.vertex === supportB) {\n                        contacts[1] = contactA;\n                        contacts[0] = contactA = contactB;\n                        contactB = contacts[1];\n                    }\n                    // update contacts\n                    contactA.vertex = supportA;\n                    contactB.vertex = supportB;\n                };\n                /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */ Pair.setActive = function(pair, isActive, timestamp) {\n                    if (isActive) {\n                        pair.isActive = true;\n                        pair.timeUpdated = timestamp;\n                    } else {\n                        pair.isActive = false;\n                        pair.contactCount = 0;\n                    }\n                };\n                /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */ Pair.id = function(bodyA, bodyB) {\n                    return bodyA.id < bodyB.id ? bodyA.id.toString(36) + \":\" + bodyB.id.toString(36) : bodyB.id.toString(36) + \":\" + bodyA.id.toString(36);\n                };\n            })();\n        /***/ },\n        /* 10 */ /***/ function(module1, exports1, __nested_webpack_require_168859__) {\n            /**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/ var Constraint = {};\n            module1.exports = Constraint;\n            var Vertices = __nested_webpack_require_168859__(3);\n            var Vector = __nested_webpack_require_168859__(2);\n            var Sleeping = __nested_webpack_require_168859__(7);\n            var Bounds = __nested_webpack_require_168859__(1);\n            var Axes = __nested_webpack_require_168859__(11);\n            var Common = __nested_webpack_require_168859__(0);\n            (function() {\n                Constraint._warming = 0.4;\n                Constraint._torqueDampen = 1;\n                Constraint._minLength = 0.000001;\n                /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */ Constraint.create = function(options) {\n                    var constraint = options;\n                    // if bodies defined but no points, use body centre\n                    if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n                        x: 0,\n                        y: 0\n                    };\n                    if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n                        x: 0,\n                        y: 0\n                    };\n                    // calculate static length using initial world space points\n                    var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA, initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB, length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n                    constraint.length = typeof constraint.length !== \"undefined\" ? constraint.length : length;\n                    // option defaults\n                    constraint.id = constraint.id || Common.nextId();\n                    constraint.label = constraint.label || \"Constraint\";\n                    constraint.type = \"constraint\";\n                    constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n                    constraint.damping = constraint.damping || 0;\n                    constraint.angularStiffness = constraint.angularStiffness || 0;\n                    constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n                    constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n                    constraint.plugin = {};\n                    // render\n                    var render = {\n                        visible: true,\n                        lineWidth: 2,\n                        strokeStyle: \"#ffffff\",\n                        type: \"line\",\n                        anchors: true\n                    };\n                    if (constraint.length === 0 && constraint.stiffness > 0.1) {\n                        render.type = \"pin\";\n                        render.anchors = false;\n                    } else if (constraint.stiffness < 0.9) {\n                        render.type = \"spring\";\n                    }\n                    constraint.render = Common.extend(render, constraint.render);\n                    return constraint;\n                };\n                /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */ Constraint.preSolveAll = function(bodies) {\n                    for(var i = 0; i < bodies.length; i += 1){\n                        var body = bodies[i], impulse = body.constraintImpulse;\n                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n                            continue;\n                        }\n                        body.position.x += impulse.x;\n                        body.position.y += impulse.y;\n                        body.angle += impulse.angle;\n                    }\n                };\n                /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */ Constraint.solveAll = function(constraints, delta) {\n                    var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n                    // Solve fixed constraints first.\n                    for(var i = 0; i < constraints.length; i += 1){\n                        var constraint = constraints[i], fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic, fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n                        if (fixedA || fixedB) {\n                            Constraint.solve(constraints[i], timeScale);\n                        }\n                    }\n                    // Solve free constraints last.\n                    for(i = 0; i < constraints.length; i += 1){\n                        constraint = constraints[i];\n                        fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n                        fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n                        if (!fixedA && !fixedB) {\n                            Constraint.solve(constraints[i], timeScale);\n                        }\n                    }\n                };\n                /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */ Constraint.solve = function(constraint, timeScale) {\n                    var bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointA = constraint.pointA, pointB = constraint.pointB;\n                    if (!bodyA && !bodyB) return;\n                    // update reference angle\n                    if (bodyA && !bodyA.isStatic) {\n                        Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n                        constraint.angleA = bodyA.angle;\n                    }\n                    // update reference angle\n                    if (bodyB && !bodyB.isStatic) {\n                        Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n                        constraint.angleB = bodyB.angle;\n                    }\n                    var pointAWorld = pointA, pointBWorld = pointB;\n                    if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n                    if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n                    if (!pointAWorld || !pointBWorld) return;\n                    var delta = Vector.sub(pointAWorld, pointBWorld), currentLength = Vector.magnitude(delta);\n                    // prevent singularity\n                    if (currentLength < Constraint._minLength) {\n                        currentLength = Constraint._minLength;\n                    }\n                    // solve distance constraint with Gauss-Siedel method\n                    var difference = (currentLength - constraint.length) / currentLength, isRigid = constraint.stiffness >= 1 || constraint.length === 0, stiffness = isRigid ? constraint.stiffness * timeScale : constraint.stiffness * timeScale * timeScale, damping = constraint.damping * timeScale, force = Vector.mult(delta, difference * stiffness), massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0), inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0), resistanceTotal = massTotal + inertiaTotal, torque, share, normal, normalVelocity, relativeVelocity;\n                    if (damping > 0) {\n                        var zero = Vector.create();\n                        normal = Vector.div(delta, currentLength);\n                        relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n                        normalVelocity = Vector.dot(normal, relativeVelocity);\n                    }\n                    if (bodyA && !bodyA.isStatic) {\n                        share = bodyA.inverseMass / massTotal;\n                        // keep track of applied impulses for post solving\n                        bodyA.constraintImpulse.x -= force.x * share;\n                        bodyA.constraintImpulse.y -= force.y * share;\n                        // apply forces\n                        bodyA.position.x -= force.x * share;\n                        bodyA.position.y -= force.y * share;\n                        // apply damping\n                        if (damping > 0) {\n                            bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                            bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n                        }\n                        // apply torque\n                        torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n                        bodyA.constraintImpulse.angle -= torque;\n                        bodyA.angle -= torque;\n                    }\n                    if (bodyB && !bodyB.isStatic) {\n                        share = bodyB.inverseMass / massTotal;\n                        // keep track of applied impulses for post solving\n                        bodyB.constraintImpulse.x += force.x * share;\n                        bodyB.constraintImpulse.y += force.y * share;\n                        // apply forces\n                        bodyB.position.x += force.x * share;\n                        bodyB.position.y += force.y * share;\n                        // apply damping\n                        if (damping > 0) {\n                            bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                            bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n                        }\n                        // apply torque\n                        torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n                        bodyB.constraintImpulse.angle += torque;\n                        bodyB.angle += torque;\n                    }\n                };\n                /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */ Constraint.postSolveAll = function(bodies) {\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], impulse = body.constraintImpulse;\n                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n                            continue;\n                        }\n                        Sleeping.set(body, false);\n                        // update geometry and reset\n                        for(var j = 0; j < body.parts.length; j++){\n                            var part = body.parts[j];\n                            Vertices.translate(part.vertices, impulse);\n                            if (j > 0) {\n                                part.position.x += impulse.x;\n                                part.position.y += impulse.y;\n                            }\n                            if (impulse.angle !== 0) {\n                                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                                Axes.rotate(part.axes, impulse.angle);\n                                if (j > 0) {\n                                    Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                                }\n                            }\n                            Bounds.update(part.bounds, part.vertices, body.velocity);\n                        }\n                        // dampen the cached impulse for warming next step\n                        impulse.angle *= Constraint._warming;\n                        impulse.x *= Constraint._warming;\n                        impulse.y *= Constraint._warming;\n                    }\n                };\n                /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */ Constraint.pointAWorld = function(constraint) {\n                    return {\n                        x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0),\n                        y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0)\n                    };\n                };\n                /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */ Constraint.pointBWorld = function(constraint) {\n                    return {\n                        x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0),\n                        y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0)\n                    };\n                };\n                /**\n     * Returns the current length of the constraint. \n     * This is the distance between both of the constraint's end points.\n     * See `constraint.length` for the target rest length.\n     * @method currentLength\n     * @param {constraint} constraint\n     * @returns {number} the current length\n     */ Constraint.currentLength = function(constraint) {\n                    var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0);\n                    var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0);\n                    var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0);\n                    var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0);\n                    var deltaX = pointAX - pointBX;\n                    var deltaY = pointAY - pointBY;\n                    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */ /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */ /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */ /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */ /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */ /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */ /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */ /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */ /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ })();\n        /***/ },\n        /* 11 */ /***/ function(module1, exports1, __nested_webpack_require_188398__) {\n            /**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/ var Axes = {};\n            module1.exports = Axes;\n            var Vector = __nested_webpack_require_188398__(2);\n            var Common = __nested_webpack_require_188398__(0);\n            (function() {\n                /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */ Axes.fromVertices = function(vertices) {\n                    var axes = {};\n                    // find the unique axes, using edge normal gradients\n                    for(var i = 0; i < vertices.length; i++){\n                        var j = (i + 1) % vertices.length, normal = Vector.normalise({\n                            x: vertices[j].y - vertices[i].y,\n                            y: vertices[i].x - vertices[j].x\n                        }), gradient = normal.y === 0 ? Infinity : normal.x / normal.y;\n                        // limit precision\n                        gradient = gradient.toFixed(3).toString();\n                        axes[gradient] = normal;\n                    }\n                    return Common.values(axes);\n                };\n                /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */ Axes.rotate = function(axes, angle) {\n                    if (angle === 0) return;\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    for(var i = 0; i < axes.length; i++){\n                        var axis = axes[i], xx;\n                        xx = axis.x * cos - axis.y * sin;\n                        axis.y = axis.x * sin + axis.y * cos;\n                        axis.x = xx;\n                    }\n                };\n            })();\n        /***/ },\n        /* 12 */ /***/ function(module1, exports1, __nested_webpack_require_190378__) {\n            /**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/ // TODO: true circle bodies\n            var Bodies = {};\n            module1.exports = Bodies;\n            var Vertices = __nested_webpack_require_190378__(3);\n            var Common = __nested_webpack_require_190378__(0);\n            var Body = __nested_webpack_require_190378__(4);\n            var Bounds = __nested_webpack_require_190378__(1);\n            var Vector = __nested_webpack_require_190378__(2);\n            (function() {\n                /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */ Bodies.rectangle = function(x, y, width, height, options) {\n                    options = options || {};\n                    var rectangle = {\n                        label: \"Rectangle Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(\"L 0 0 L \" + width + \" 0 L \" + width + \" \" + height + \" L 0 \" + height)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, rectangle, options));\n                };\n                /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope Must be a number < 1.\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */ Bodies.trapezoid = function(x, y, width, height, slope, options) {\n                    options = options || {};\n                    if (slope >= 1) {\n                        Common.warn(\"Bodies.trapezoid: slope parameter must be < 1.\");\n                    }\n                    slope *= 0.5;\n                    var roof = (1 - slope * 2) * width;\n                    var x1 = width * slope, x2 = x1 + roof, x3 = x2 + x1, verticesPath;\n                    if (slope < 0.5) {\n                        verticesPath = \"L 0 0 L \" + x1 + \" \" + -height + \" L \" + x2 + \" \" + -height + \" L \" + x3 + \" 0\";\n                    } else {\n                        verticesPath = \"L 0 0 L \" + x2 + \" \" + -height + \" L \" + x3 + \" 0\";\n                    }\n                    var trapezoid = {\n                        label: \"Trapezoid Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(verticesPath)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, trapezoid, options));\n                };\n                /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */ Bodies.circle = function(x, y, radius, options, maxSides) {\n                    options = options || {};\n                    var circle = {\n                        label: \"Circle Body\",\n                        circleRadius: radius\n                    };\n                    // approximate circles with polygons until true circles implemented in SAT\n                    maxSides = maxSides || 25;\n                    var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n                    // optimisation: always use even number of sides (half the number of unique axes)\n                    if (sides % 2 === 1) sides += 1;\n                    return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n                };\n                /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */ Bodies.polygon = function(x, y, sides, radius, options) {\n                    options = options || {};\n                    if (sides < 3) return Bodies.circle(x, y, radius, options);\n                    var theta = 2 * Math.PI / sides, path = \"\", offset = theta * 0.5;\n                    for(var i = 0; i < sides; i += 1){\n                        var angle = offset + i * theta, xx = Math.cos(angle) * radius, yy = Math.sin(angle) * radius;\n                        path += \"L \" + xx.toFixed(3) + \" \" + yy.toFixed(3) + \" \";\n                    }\n                    var polygon = {\n                        label: \"Polygon Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(path)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, polygon, options));\n                };\n                /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */ Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n                    var decomp = Common.getDecomp(), canDecomp, body, parts, isConvex, isConcave, vertices, i, j, k, v, z;\n                    // check decomp is as expected\n                    canDecomp = Boolean(decomp && decomp.quickDecomp);\n                    options = options || {};\n                    parts = [];\n                    flagInternal = typeof flagInternal !== \"undefined\" ? flagInternal : false;\n                    removeCollinear = typeof removeCollinear !== \"undefined\" ? removeCollinear : 0.01;\n                    minimumArea = typeof minimumArea !== \"undefined\" ? minimumArea : 10;\n                    removeDuplicatePoints = typeof removeDuplicatePoints !== \"undefined\" ? removeDuplicatePoints : 0.01;\n                    // ensure vertexSets is an array of arrays\n                    if (!Common.isArray(vertexSets[0])) {\n                        vertexSets = [\n                            vertexSets\n                        ];\n                    }\n                    for(v = 0; v < vertexSets.length; v += 1){\n                        vertices = vertexSets[v];\n                        isConvex = Vertices.isConvex(vertices);\n                        isConcave = !isConvex;\n                        if (isConcave && !canDecomp) {\n                            Common.warnOnce(\"Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices.\");\n                        }\n                        if (isConvex || !canDecomp) {\n                            if (isConvex) {\n                                vertices = Vertices.clockwiseSort(vertices);\n                            } else {\n                                // fallback to convex hull when decomposition is not possible\n                                vertices = Vertices.hull(vertices);\n                            }\n                            parts.push({\n                                position: {\n                                    x: x,\n                                    y: y\n                                },\n                                vertices: vertices\n                            });\n                        } else {\n                            // initialise a decomposition\n                            var concave = vertices.map(function(vertex) {\n                                return [\n                                    vertex.x,\n                                    vertex.y\n                                ];\n                            });\n                            // vertices are concave and simple, we can decompose into parts\n                            decomp.makeCCW(concave);\n                            if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n                            if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n                            // use the quick decomposition algorithm (Bayazit)\n                            var decomposed = decomp.quickDecomp(concave);\n                            // for each decomposed chunk\n                            for(i = 0; i < decomposed.length; i++){\n                                var chunk = decomposed[i];\n                                // convert vertices into the correct structure\n                                var chunkVertices = chunk.map(function(vertices) {\n                                    return {\n                                        x: vertices[0],\n                                        y: vertices[1]\n                                    };\n                                });\n                                // skip small chunks\n                                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;\n                                // create a compound part\n                                parts.push({\n                                    position: Vertices.centre(chunkVertices),\n                                    vertices: chunkVertices\n                                });\n                            }\n                        }\n                    }\n                    // create body parts\n                    for(i = 0; i < parts.length; i++){\n                        parts[i] = Body.create(Common.extend(parts[i], options));\n                    }\n                    // flag internal edges (coincident part edges)\n                    if (flagInternal) {\n                        var coincident_max_dist = 5;\n                        for(i = 0; i < parts.length; i++){\n                            var partA = parts[i];\n                            for(j = i + 1; j < parts.length; j++){\n                                var partB = parts[j];\n                                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                                    var pav = partA.vertices, pbv = partB.vertices;\n                                    // iterate vertices of both parts\n                                    for(k = 0; k < partA.vertices.length; k++){\n                                        for(z = 0; z < partB.vertices.length; z++){\n                                            // find distances between the vertices\n                                            var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])), db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n                                            // if both vertices are very close, consider the edge concident (internal)\n                                            if (da < coincident_max_dist && db < coincident_max_dist) {\n                                                pav[k].isInternal = true;\n                                                pbv[z].isInternal = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (parts.length > 1) {\n                        // create the parent body to be returned, that contains generated compound parts\n                        body = Body.create(Common.extend({\n                            parts: parts.slice(0)\n                        }, options));\n                        // offset such that body.position is at the centre off mass\n                        Body.setPosition(body, {\n                            x: x,\n                            y: y\n                        });\n                        return body;\n                    } else {\n                        return parts[0];\n                    }\n                };\n            })();\n        /***/ },\n        /* 13 */ /***/ function(module1, exports1, __nested_webpack_require_206880__) {\n            /**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/ var Detector = {};\n            module1.exports = Detector;\n            var Common = __nested_webpack_require_206880__(0);\n            var Collision = __nested_webpack_require_206880__(8);\n            (function() {\n                /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */ Detector.create = function(options) {\n                    var defaults = {\n                        bodies: [],\n                        collisions: [],\n                        pairs: null\n                    };\n                    return Common.extend(defaults, options);\n                };\n                /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */ Detector.setBodies = function(detector, bodies) {\n                    detector.bodies = bodies.slice(0);\n                };\n                /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */ Detector.clear = function(detector) {\n                    detector.bodies = [];\n                    detector.collisions = [];\n                };\n                /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */ Detector.collisions = function(detector) {\n                    var pairs = detector.pairs, bodies = detector.bodies, bodiesLength = bodies.length, canCollide = Detector.canCollide, collides = Collision.collides, collisions = detector.collisions, collisionIndex = 0, i, j;\n                    bodies.sort(Detector._compareBoundsX);\n                    for(i = 0; i < bodiesLength; i++){\n                        var bodyA = bodies[i], boundsA = bodyA.bounds, boundXMax = bodyA.bounds.max.x, boundYMax = bodyA.bounds.max.y, boundYMin = bodyA.bounds.min.y, bodyAStatic = bodyA.isStatic || bodyA.isSleeping, partsALength = bodyA.parts.length, partsASingle = partsALength === 1;\n                        for(j = i + 1; j < bodiesLength; j++){\n                            var bodyB = bodies[j], boundsB = bodyB.bounds;\n                            if (boundsB.min.x > boundXMax) {\n                                break;\n                            }\n                            if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                                continue;\n                            }\n                            if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                                continue;\n                            }\n                            if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                                continue;\n                            }\n                            var partsBLength = bodyB.parts.length;\n                            if (partsASingle && partsBLength === 1) {\n                                var collision = collides(bodyA, bodyB, pairs);\n                                if (collision) {\n                                    collisions[collisionIndex++] = collision;\n                                }\n                            } else {\n                                var partsAStart = partsALength > 1 ? 1 : 0, partsBStart = partsBLength > 1 ? 1 : 0;\n                                for(var k = partsAStart; k < partsALength; k++){\n                                    var partA = bodyA.parts[k], boundsA = partA.bounds;\n                                    for(var z = partsBStart; z < partsBLength; z++){\n                                        var partB = bodyB.parts[z], boundsB = partB.bounds;\n                                        if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                            continue;\n                                        }\n                                        var collision = collides(partA, partB, pairs);\n                                        if (collision) {\n                                            collisions[collisionIndex++] = collision;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (collisions.length !== collisionIndex) {\n                        collisions.length = collisionIndex;\n                    }\n                    return collisions;\n                };\n                /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */ Detector.canCollide = function(filterA, filterB) {\n                    if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n                    return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n                };\n                /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */ Detector._compareBoundsX = function(bodyA, bodyB) {\n                    return bodyA.bounds.min.x - bodyB.bounds.min.x;\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */ /**\n     * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n     * @property collisions\n     * @type collision[]\n     * @default []\n     */ /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */ })();\n        /***/ },\n        /* 14 */ /***/ function(module1, exports1, __nested_webpack_require_213837__) {\n            /**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/ var Mouse = {};\n            module1.exports = Mouse;\n            var Common = __nested_webpack_require_213837__(0);\n            (function() {\n                /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */ Mouse.create = function(element) {\n                    var mouse = {};\n                    if (!element) {\n                        Common.log(\"Mouse.create: element was undefined, defaulting to document.body\", \"warn\");\n                    }\n                    mouse.element = element || document.body;\n                    mouse.absolute = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.position = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.mousedownPosition = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.mouseupPosition = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.offset = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.scale = {\n                        x: 1,\n                        y: 1\n                    };\n                    mouse.wheelDelta = 0;\n                    mouse.button = -1;\n                    mouse.pixelRatio = parseInt(mouse.element.getAttribute(\"data-pixel-ratio\"), 10) || 1;\n                    mouse.sourceEvents = {\n                        mousemove: null,\n                        mousedown: null,\n                        mouseup: null,\n                        mousewheel: null\n                    };\n                    mouse.mousemove = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) {\n                            mouse.button = 0;\n                            event.preventDefault();\n                        }\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.sourceEvents.mousemove = event;\n                    };\n                    mouse.mousedown = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) {\n                            mouse.button = 0;\n                            event.preventDefault();\n                        } else {\n                            mouse.button = event.button;\n                        }\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.mousedownPosition.x = mouse.position.x;\n                        mouse.mousedownPosition.y = mouse.position.y;\n                        mouse.sourceEvents.mousedown = event;\n                    };\n                    mouse.mouseup = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) {\n                            event.preventDefault();\n                        }\n                        mouse.button = -1;\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.mouseupPosition.x = mouse.position.x;\n                        mouse.mouseupPosition.y = mouse.position.y;\n                        mouse.sourceEvents.mouseup = event;\n                    };\n                    mouse.mousewheel = function(event) {\n                        mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n                        event.preventDefault();\n                        mouse.sourceEvents.mousewheel = event;\n                    };\n                    Mouse.setElement(mouse, mouse.element);\n                    return mouse;\n                };\n                /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */ Mouse.setElement = function(mouse, element) {\n                    mouse.element = element;\n                    element.addEventListener(\"mousemove\", mouse.mousemove, {\n                        passive: true\n                    });\n                    element.addEventListener(\"mousedown\", mouse.mousedown, {\n                        passive: true\n                    });\n                    element.addEventListener(\"mouseup\", mouse.mouseup, {\n                        passive: true\n                    });\n                    element.addEventListener(\"wheel\", mouse.mousewheel, {\n                        passive: false\n                    });\n                    element.addEventListener(\"touchmove\", mouse.mousemove, {\n                        passive: false\n                    });\n                    element.addEventListener(\"touchstart\", mouse.mousedown, {\n                        passive: false\n                    });\n                    element.addEventListener(\"touchend\", mouse.mouseup, {\n                        passive: false\n                    });\n                };\n                /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */ Mouse.clearSourceEvents = function(mouse) {\n                    mouse.sourceEvents.mousemove = null;\n                    mouse.sourceEvents.mousedown = null;\n                    mouse.sourceEvents.mouseup = null;\n                    mouse.sourceEvents.mousewheel = null;\n                    mouse.wheelDelta = 0;\n                };\n                /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */ Mouse.setOffset = function(mouse, offset) {\n                    mouse.offset.x = offset.x;\n                    mouse.offset.y = offset.y;\n                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                };\n                /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */ Mouse.setScale = function(mouse, scale) {\n                    mouse.scale.x = scale.x;\n                    mouse.scale.y = scale.y;\n                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                };\n                /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */ Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n                    var elementBounds = element.getBoundingClientRect(), rootNode = document.documentElement || document.body.parentNode || document.body, scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft, scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop, touches = event.changedTouches, x, y;\n                    if (touches) {\n                        x = touches[0].pageX - elementBounds.left - scrollX;\n                        y = touches[0].pageY - elementBounds.top - scrollY;\n                    } else {\n                        x = event.pageX - elementBounds.left - scrollX;\n                        y = event.pageY - elementBounds.top - scrollY;\n                    }\n                    return {\n                        x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n                        y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n                    };\n                };\n            })();\n        /***/ },\n        /* 15 */ /***/ function(module1, exports1, __nested_webpack_require_222877__) {\n            /**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/ var Plugin = {};\n            module1.exports = Plugin;\n            var Common = __nested_webpack_require_222877__(0);\n            (function() {\n                Plugin._registry = {};\n                /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */ Plugin.register = function(plugin) {\n                    if (!Plugin.isPlugin(plugin)) {\n                        Common.warn(\"Plugin.register:\", Plugin.toString(plugin), \"does not implement all required fields.\");\n                    }\n                    if (plugin.name in Plugin._registry) {\n                        var registered = Plugin._registry[plugin.name], pluginVersion = Plugin.versionParse(plugin.version).number, registeredVersion = Plugin.versionParse(registered.version).number;\n                        if (pluginVersion > registeredVersion) {\n                            Common.warn(\"Plugin.register:\", Plugin.toString(registered), \"was upgraded to\", Plugin.toString(plugin));\n                            Plugin._registry[plugin.name] = plugin;\n                        } else if (pluginVersion < registeredVersion) {\n                            Common.warn(\"Plugin.register:\", Plugin.toString(registered), \"can not be downgraded to\", Plugin.toString(plugin));\n                        } else if (plugin !== registered) {\n                            Common.warn(\"Plugin.register:\", Plugin.toString(plugin), \"is already registered to different plugin object\");\n                        }\n                    } else {\n                        Plugin._registry[plugin.name] = plugin;\n                    }\n                    return plugin;\n                };\n                /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */ Plugin.resolve = function(dependency) {\n                    return Plugin._registry[Plugin.dependencyParse(dependency).name];\n                };\n                /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */ Plugin.toString = function(plugin) {\n                    return typeof plugin === \"string\" ? plugin : (plugin.name || \"anonymous\") + \"@\" + (plugin.version || plugin.range || \"0.0.0\");\n                };\n                /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */ Plugin.isPlugin = function(obj) {\n                    return obj && obj.name && obj.version && obj.install;\n                };\n                /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */ Plugin.isUsed = function(module1, name) {\n                    return module1.used.indexOf(name) > -1;\n                };\n                /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */ Plugin.isFor = function(plugin, module1) {\n                    var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n                    return !plugin.for || module1.name === parsed.name && Plugin.versionSatisfies(module1.version, parsed.range);\n                };\n                /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */ Plugin.use = function(module1, plugins) {\n                    module1.uses = (module1.uses || []).concat(plugins || []);\n                    if (module1.uses.length === 0) {\n                        Common.warn(\"Plugin.use:\", Plugin.toString(module1), \"does not specify any dependencies to install.\");\n                        return;\n                    }\n                    var dependencies = Plugin.dependencies(module1), sortedDependencies = Common.topologicalSort(dependencies), status = [];\n                    for(var i = 0; i < sortedDependencies.length; i += 1){\n                        if (sortedDependencies[i] === module1.name) {\n                            continue;\n                        }\n                        var plugin = Plugin.resolve(sortedDependencies[i]);\n                        if (!plugin) {\n                            status.push(\"❌ \" + sortedDependencies[i]);\n                            continue;\n                        }\n                        if (Plugin.isUsed(module1, plugin.name)) {\n                            continue;\n                        }\n                        if (!Plugin.isFor(plugin, module1)) {\n                            Common.warn(\"Plugin.use:\", Plugin.toString(plugin), \"is for\", plugin.for, \"but installed on\", Plugin.toString(module1) + \".\");\n                            plugin._warned = true;\n                        }\n                        if (plugin.install) {\n                            plugin.install(module1);\n                        } else {\n                            Common.warn(\"Plugin.use:\", Plugin.toString(plugin), \"does not specify an install function.\");\n                            plugin._warned = true;\n                        }\n                        if (plugin._warned) {\n                            status.push(\"\\uD83D\\uDD36 \" + Plugin.toString(plugin));\n                            delete plugin._warned;\n                        } else {\n                            status.push(\"✅ \" + Plugin.toString(plugin));\n                        }\n                        module1.used.push(plugin.name);\n                    }\n                    if (status.length > 0) {\n                        Common.info(status.join(\"  \"));\n                    }\n                };\n                /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */ Plugin.dependencies = function(module1, tracked) {\n                    var parsedBase = Plugin.dependencyParse(module1), name = parsedBase.name;\n                    tracked = tracked || {};\n                    if (name in tracked) {\n                        return;\n                    }\n                    module1 = Plugin.resolve(module1) || module1;\n                    tracked[name] = Common.map(module1.uses || [], function(dependency) {\n                        if (Plugin.isPlugin(dependency)) {\n                            Plugin.register(dependency);\n                        }\n                        var parsed = Plugin.dependencyParse(dependency), resolved = Plugin.resolve(dependency);\n                        if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                            Common.warn(\"Plugin.dependencies:\", Plugin.toString(resolved), \"does not satisfy\", Plugin.toString(parsed), \"used by\", Plugin.toString(parsedBase) + \".\");\n                            resolved._warned = true;\n                            module1._warned = true;\n                        } else if (!resolved) {\n                            Common.warn(\"Plugin.dependencies:\", Plugin.toString(dependency), \"used by\", Plugin.toString(parsedBase), \"could not be resolved.\");\n                            module1._warned = true;\n                        }\n                        return parsed.name;\n                    });\n                    for(var i = 0; i < tracked[name].length; i += 1){\n                        Plugin.dependencies(tracked[name][i], tracked);\n                    }\n                    return tracked;\n                };\n                /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */ Plugin.dependencyParse = function(dependency) {\n                    if (Common.isString(dependency)) {\n                        var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n                        if (!pattern.test(dependency)) {\n                            Common.warn(\"Plugin.dependencyParse:\", dependency, \"is not a valid dependency string.\");\n                        }\n                        return {\n                            name: dependency.split(\"@\")[0],\n                            range: dependency.split(\"@\")[1] || \"*\"\n                        };\n                    }\n                    return {\n                        name: dependency.name,\n                        range: dependency.range || dependency.version\n                    };\n                };\n                /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */ Plugin.versionParse = function(range) {\n                    var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n                    if (!pattern.test(range)) {\n                        Common.warn(\"Plugin.versionParse:\", range, \"is not a valid version or range.\");\n                    }\n                    var parts = pattern.exec(range);\n                    var major = Number(parts[4]);\n                    var minor = Number(parts[5]);\n                    var patch = Number(parts[6]);\n                    return {\n                        isRange: Boolean(parts[1] || parts[2]),\n                        version: parts[3],\n                        range: range,\n                        operator: parts[1] || parts[2] || \"\",\n                        major: major,\n                        minor: minor,\n                        patch: patch,\n                        parts: [\n                            major,\n                            minor,\n                            patch\n                        ],\n                        prerelease: parts[7],\n                        number: major * 1e8 + minor * 1e4 + patch\n                    };\n                };\n                /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */ Plugin.versionSatisfies = function(version, range) {\n                    range = range || \"*\";\n                    var r = Plugin.versionParse(range), v = Plugin.versionParse(version);\n                    if (r.isRange) {\n                        if (r.operator === \"*\" || version === \"*\") {\n                            return true;\n                        }\n                        if (r.operator === \">\") {\n                            return v.number > r.number;\n                        }\n                        if (r.operator === \">=\") {\n                            return v.number >= r.number;\n                        }\n                        if (r.operator === \"~\") {\n                            return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n                        }\n                        if (r.operator === \"^\") {\n                            if (r.major > 0) {\n                                return v.major === r.major && v.number >= r.number;\n                            }\n                            if (r.minor > 0) {\n                                return v.minor === r.minor && v.patch >= r.patch;\n                            }\n                            return v.patch === r.patch;\n                        }\n                    }\n                    return version === range || version === \"*\";\n                };\n            })();\n        /***/ },\n        /* 16 */ /***/ function(module1, exports1) {\n            /**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/ var Contact = {};\n            module1.exports = Contact;\n            (function() {\n                /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} [vertex]\n     * @return {contact} A new contact\n     */ Contact.create = function(vertex) {\n                    return {\n                        vertex: vertex,\n                        normalImpulse: 0,\n                        tangentImpulse: 0\n                    };\n                };\n            })();\n        /***/ },\n        /* 17 */ /***/ function(module1, exports1, __nested_webpack_require_238860__) {\n            /**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/ var Engine = {};\n            module1.exports = Engine;\n            var Sleeping = __nested_webpack_require_238860__(7);\n            var Resolver = __nested_webpack_require_238860__(18);\n            var Detector = __nested_webpack_require_238860__(13);\n            var Pairs = __nested_webpack_require_238860__(19);\n            var Events = __nested_webpack_require_238860__(5);\n            var Composite = __nested_webpack_require_238860__(6);\n            var Constraint = __nested_webpack_require_238860__(10);\n            var Common = __nested_webpack_require_238860__(0);\n            var Body = __nested_webpack_require_238860__(4);\n            (function() {\n                Engine._deltaMax = 1000 / 60;\n                /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */ Engine.create = function(options) {\n                    options = options || {};\n                    var defaults = {\n                        positionIterations: 6,\n                        velocityIterations: 4,\n                        constraintIterations: 2,\n                        enableSleeping: false,\n                        events: [],\n                        plugin: {},\n                        gravity: {\n                            x: 0,\n                            y: 1,\n                            scale: 0.001\n                        },\n                        timing: {\n                            timestamp: 0,\n                            timeScale: 1,\n                            lastDelta: 0,\n                            lastElapsed: 0,\n                            lastUpdatesPerFrame: 0\n                        }\n                    };\n                    var engine = Common.extend(defaults, options);\n                    engine.world = options.world || Composite.create({\n                        label: \"World\"\n                    });\n                    engine.pairs = options.pairs || Pairs.create();\n                    engine.detector = options.detector || Detector.create();\n                    engine.detector.pairs = engine.pairs;\n                    // for temporary back compatibility only\n                    engine.grid = {\n                        buckets: []\n                    };\n                    engine.world.gravity = engine.gravity;\n                    engine.broadphase = engine.grid;\n                    engine.metrics = {};\n                    return engine;\n                };\n                /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */ Engine.update = function(engine, delta) {\n                    var startTime = Common.now();\n                    var world = engine.world, detector = engine.detector, pairs = engine.pairs, timing = engine.timing, timestamp = timing.timestamp, i;\n                    // warn if high delta\n                    if (delta > Engine._deltaMax) {\n                        Common.warnOnce(\"Matter.Engine.update: delta argument is recommended to be less than or equal to\", Engine._deltaMax.toFixed(3), \"ms.\");\n                    }\n                    delta = typeof delta !== \"undefined\" ? delta : Common._baseDelta;\n                    delta *= timing.timeScale;\n                    // increment timestamp\n                    timing.timestamp += delta;\n                    timing.lastDelta = delta;\n                    // create an event object\n                    var event = {\n                        timestamp: timing.timestamp,\n                        delta: delta\n                    };\n                    Events.trigger(engine, \"beforeUpdate\", event);\n                    // get all bodies and all constraints in the world\n                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world);\n                    // if the world has changed\n                    if (world.isModified) {\n                        // update the detector bodies\n                        Detector.setBodies(detector, allBodies);\n                        // reset all composite modified flags\n                        Composite.setModified(world, false, false, true);\n                    }\n                    // update sleeping if enabled\n                    if (engine.enableSleeping) Sleeping.update(allBodies, delta);\n                    // apply gravity to all bodies\n                    Engine._bodiesApplyGravity(allBodies, engine.gravity);\n                    // update all body position and rotation by integration\n                    if (delta > 0) {\n                        Engine._bodiesUpdate(allBodies, delta);\n                    }\n                    Events.trigger(engine, \"beforeSolve\", event);\n                    // update all constraints (first pass)\n                    Constraint.preSolveAll(allBodies);\n                    for(i = 0; i < engine.constraintIterations; i++){\n                        Constraint.solveAll(allConstraints, delta);\n                    }\n                    Constraint.postSolveAll(allBodies);\n                    // find all collisions\n                    var collisions = Detector.collisions(detector);\n                    // update collision pairs\n                    Pairs.update(pairs, collisions, timestamp);\n                    // wake up bodies involved in collisions\n                    if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list);\n                    // trigger collision events\n                    if (pairs.collisionStart.length > 0) {\n                        Events.trigger(engine, \"collisionStart\", {\n                            pairs: pairs.collisionStart,\n                            timestamp: timing.timestamp,\n                            delta: delta\n                        });\n                    }\n                    // iteratively resolve position between collisions\n                    var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n                    Resolver.preSolvePosition(pairs.list);\n                    for(i = 0; i < engine.positionIterations; i++){\n                        Resolver.solvePosition(pairs.list, delta, positionDamping);\n                    }\n                    Resolver.postSolvePosition(allBodies);\n                    // update all constraints (second pass)\n                    Constraint.preSolveAll(allBodies);\n                    for(i = 0; i < engine.constraintIterations; i++){\n                        Constraint.solveAll(allConstraints, delta);\n                    }\n                    Constraint.postSolveAll(allBodies);\n                    // iteratively resolve velocity between collisions\n                    Resolver.preSolveVelocity(pairs.list);\n                    for(i = 0; i < engine.velocityIterations; i++){\n                        Resolver.solveVelocity(pairs.list, delta);\n                    }\n                    // update body speed and velocity properties\n                    Engine._bodiesUpdateVelocities(allBodies);\n                    // trigger collision events\n                    if (pairs.collisionActive.length > 0) {\n                        Events.trigger(engine, \"collisionActive\", {\n                            pairs: pairs.collisionActive,\n                            timestamp: timing.timestamp,\n                            delta: delta\n                        });\n                    }\n                    if (pairs.collisionEnd.length > 0) {\n                        Events.trigger(engine, \"collisionEnd\", {\n                            pairs: pairs.collisionEnd,\n                            timestamp: timing.timestamp,\n                            delta: delta\n                        });\n                    }\n                    // clear force buffers\n                    Engine._bodiesClearForces(allBodies);\n                    Events.trigger(engine, \"afterUpdate\", event);\n                    // log the time elapsed computing this update\n                    engine.timing.lastElapsed = Common.now() - startTime;\n                    return engine;\n                };\n                /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */ Engine.merge = function(engineA, engineB) {\n                    Common.extend(engineA, engineB);\n                    if (engineB.world) {\n                        engineA.world = engineB.world;\n                        Engine.clear(engineA);\n                        var bodies = Composite.allBodies(engineA.world);\n                        for(var i = 0; i < bodies.length; i++){\n                            var body = bodies[i];\n                            Sleeping.set(body, false);\n                            body.id = Common.nextId();\n                        }\n                    }\n                };\n                /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */ Engine.clear = function(engine) {\n                    Pairs.clear(engine.pairs);\n                    Detector.clear(engine.detector);\n                };\n                /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */ Engine._bodiesClearForces = function(bodies) {\n                    var bodiesLength = bodies.length;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var body = bodies[i];\n                        // reset force buffers\n                        body.force.x = 0;\n                        body.force.y = 0;\n                        body.torque = 0;\n                    }\n                };\n                /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */ Engine._bodiesApplyGravity = function(bodies, gravity) {\n                    var gravityScale = typeof gravity.scale !== \"undefined\" ? gravity.scale : 0.001, bodiesLength = bodies.length;\n                    if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n                        return;\n                    }\n                    for(var i = 0; i < bodiesLength; i++){\n                        var body = bodies[i];\n                        if (body.isStatic || body.isSleeping) continue;\n                        // add the resultant force of gravity\n                        body.force.y += body.mass * gravity.y * gravityScale;\n                        body.force.x += body.mass * gravity.x * gravityScale;\n                    }\n                };\n                /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */ Engine._bodiesUpdate = function(bodies, delta) {\n                    var bodiesLength = bodies.length;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var body = bodies[i];\n                        if (body.isStatic || body.isSleeping) continue;\n                        Body.update(body, delta);\n                    }\n                };\n                /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */ Engine._bodiesUpdateVelocities = function(bodies) {\n                    var bodiesLength = bodies.length;\n                    for(var i = 0; i < bodiesLength; i++){\n                        Body.updateVelocities(bodies[i]);\n                    }\n                };\n            /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */ /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n    *\n    * @event beforeSolve\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */ /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */ /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */ /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */ /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */ /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */ /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */ /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */ /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */ /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */ /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */ /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */ /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */ })();\n        /***/ },\n        /* 18 */ /***/ function(module1, exports1, __nested_webpack_require_259572__) {\n            /**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/ var Resolver = {};\n            module1.exports = Resolver;\n            var Vertices = __nested_webpack_require_259572__(3);\n            var Common = __nested_webpack_require_259572__(0);\n            var Bounds = __nested_webpack_require_259572__(1);\n            (function() {\n                Resolver._restingThresh = 2;\n                Resolver._restingThreshTangent = Math.sqrt(6);\n                Resolver._positionDampen = 0.9;\n                Resolver._positionWarming = 0.8;\n                Resolver._frictionNormalMultiplier = 5;\n                Resolver._frictionMaxStatic = Number.MAX_VALUE;\n                /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */ Resolver.preSolvePosition = function(pairs) {\n                    var i, pair, contactCount, pairsLength = pairs.length;\n                    // find total contacts on each body\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        contactCount = pair.contactCount;\n                        pair.collision.parentA.totalContacts += contactCount;\n                        pair.collision.parentB.totalContacts += contactCount;\n                    }\n                };\n                /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */ Resolver.solvePosition = function(pairs, delta, damping) {\n                    var i, pair, collision, bodyA, bodyB, normal, contactShare, positionImpulse, positionDampen = Resolver._positionDampen * (damping || 1), slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1), pairsLength = pairs.length;\n                    // find impulses required to resolve penetration\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        collision = pair.collision;\n                        bodyA = collision.parentA;\n                        bodyB = collision.parentB;\n                        normal = collision.normal;\n                        // get current separation between body edges involved in collision\n                        pair.separation = collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n                    }\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        collision = pair.collision;\n                        bodyA = collision.parentA;\n                        bodyB = collision.parentB;\n                        normal = collision.normal;\n                        positionImpulse = pair.separation - pair.slop * slopDampen;\n                        if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n                        if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                            contactShare = positionDampen / bodyA.totalContacts;\n                            bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                            bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n                        }\n                        if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                            contactShare = positionDampen / bodyB.totalContacts;\n                            bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                            bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n                        }\n                    }\n                };\n                /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */ Resolver.postSolvePosition = function(bodies) {\n                    var positionWarming = Resolver._positionWarming, bodiesLength = bodies.length, verticesTranslate = Vertices.translate, boundsUpdate = Bounds.update;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var body = bodies[i], positionImpulse = body.positionImpulse, positionImpulseX = positionImpulse.x, positionImpulseY = positionImpulse.y, velocity = body.velocity;\n                        // reset contact count\n                        body.totalContacts = 0;\n                        if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                            // update body geometry\n                            for(var j = 0; j < body.parts.length; j++){\n                                var part = body.parts[j];\n                                verticesTranslate(part.vertices, positionImpulse);\n                                boundsUpdate(part.bounds, part.vertices, velocity);\n                                part.position.x += positionImpulseX;\n                                part.position.y += positionImpulseY;\n                            }\n                            // move the body without changing velocity\n                            body.positionPrev.x += positionImpulseX;\n                            body.positionPrev.y += positionImpulseY;\n                            if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                                // reset cached impulse if the body has velocity along it\n                                positionImpulse.x = 0;\n                                positionImpulse.y = 0;\n                            } else {\n                                // warm the next iteration\n                                positionImpulse.x *= positionWarming;\n                                positionImpulse.y *= positionWarming;\n                            }\n                        }\n                    }\n                };\n                /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */ Resolver.preSolveVelocity = function(pairs) {\n                    var pairsLength = pairs.length, i, j;\n                    for(i = 0; i < pairsLength; i++){\n                        var pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        var contacts = pair.contacts, contactCount = pair.contactCount, collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normal = collision.normal, tangent = collision.tangent;\n                        // resolve each contact\n                        for(j = 0; j < contactCount; j++){\n                            var contact = contacts[j], contactVertex = contact.vertex, normalImpulse = contact.normalImpulse, tangentImpulse = contact.tangentImpulse;\n                            if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                                // total impulse from contact\n                                var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse, impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                                // apply impulse from contact\n                                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                                    bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n                                }\n                                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                                    bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n                                }\n                            }\n                        }\n                    }\n                };\n                /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */ Resolver.solveVelocity = function(pairs, delta) {\n                    var timeScale = delta / Common._baseDelta, timeScaleSquared = timeScale * timeScale, timeScaleCubed = timeScaleSquared * timeScale, restingThresh = -Resolver._restingThresh * timeScale, restingThreshTangent = Resolver._restingThreshTangent, frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale, frictionMaxStatic = Resolver._frictionMaxStatic, pairsLength = pairs.length, tangentImpulse, maxFriction, i, j;\n                    for(i = 0; i < pairsLength; i++){\n                        var pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        var collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normalX = collision.normal.x, normalY = collision.normal.y, tangentX = collision.tangent.x, tangentY = collision.tangent.y, inverseMassTotal = pair.inverseMass, friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier, contacts = pair.contacts, contactCount = pair.contactCount, contactShare = 1 / contactCount;\n                        // get body velocities\n                        var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x, bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y, bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev, bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x, bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y, bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n                        // resolve each contact\n                        for(j = 0; j < contactCount; j++){\n                            var contact = contacts[j], contactVertex = contact.vertex;\n                            var offsetAX = contactVertex.x - bodyA.position.x, offsetAY = contactVertex.y - bodyA.position.y, offsetBX = contactVertex.x - bodyB.position.x, offsetBY = contactVertex.y - bodyB.position.y;\n                            var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity, velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity, velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity, velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n                            var relativeVelocityX = velocityPointAX - velocityPointBX, relativeVelocityY = velocityPointAY - velocityPointBY;\n                            var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY, tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n                            // coulomb friction\n                            var normalOverlap = pair.separation + normalVelocity;\n                            var normalForce = Math.min(normalOverlap, 1);\n                            normalForce = normalOverlap < 0 ? 0 : normalForce;\n                            var frictionLimit = normalForce * friction;\n                            if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                                maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                                tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                                if (tangentImpulse < -maxFriction) {\n                                    tangentImpulse = -maxFriction;\n                                } else if (tangentImpulse > maxFriction) {\n                                    tangentImpulse = maxFriction;\n                                }\n                            } else {\n                                tangentImpulse = tangentVelocity;\n                                maxFriction = frictionMaxStatic;\n                            }\n                            // account for mass, inertia and contact offset\n                            var oAcN = offsetAX * normalY - offsetAY * normalX, oBcN = offsetBX * normalY - offsetBY * normalX, share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n                            // raw impulses\n                            var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                            tangentImpulse *= share;\n                            // handle high velocity and resting collisions separately\n                            if (normalVelocity < restingThresh) {\n                                // high normal velocity so clear cached contact normal impulse\n                                contact.normalImpulse = 0;\n                            } else {\n                                // solve resting collision constraints using Erin Catto's method (GDC08)\n                                // impulse constraint tends to 0\n                                var contactNormalImpulse = contact.normalImpulse;\n                                contact.normalImpulse += normalImpulse;\n                                if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                            }\n                            // handle high velocity and resting collisions separately\n                            if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                                // high tangent velocity so clear cached contact tangent impulse\n                                contact.tangentImpulse = 0;\n                            } else {\n                                // solve resting collision constraints using Erin Catto's method (GDC08)\n                                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                                var contactTangentImpulse = contact.tangentImpulse;\n                                contact.tangentImpulse += tangentImpulse;\n                                if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                                if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                            }\n                            // total impulse from contact\n                            var impulseX = normalX * normalImpulse + tangentX * tangentImpulse, impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                            // apply impulse from contact\n                            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                                bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                            }\n                            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                                bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                            }\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 19 */ /***/ function(module1, exports1, __nested_webpack_require_275616__) {\n            /**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/ var Pairs = {};\n            module1.exports = Pairs;\n            var Pair = __nested_webpack_require_275616__(9);\n            var Common = __nested_webpack_require_275616__(0);\n            (function() {\n                /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */ Pairs.create = function(options) {\n                    return Common.extend({\n                        table: {},\n                        list: [],\n                        collisionStart: [],\n                        collisionActive: [],\n                        collisionEnd: []\n                    }, options);\n                };\n                /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */ Pairs.update = function(pairs, collisions, timestamp) {\n                    var pairUpdate = Pair.update, pairCreate = Pair.create, pairSetActive = Pair.setActive, pairsTable = pairs.table, pairsList = pairs.list, pairsListLength = pairsList.length, pairsListIndex = pairsListLength, collisionStart = pairs.collisionStart, collisionEnd = pairs.collisionEnd, collisionActive = pairs.collisionActive, collisionsLength = collisions.length, collisionStartIndex = 0, collisionEndIndex = 0, collisionActiveIndex = 0, collision, pair, i;\n                    for(i = 0; i < collisionsLength; i++){\n                        collision = collisions[i];\n                        pair = collision.pair;\n                        if (pair) {\n                            // pair already exists (but may or may not be active)\n                            if (pair.isActive) {\n                                // pair exists and is active\n                                collisionActive[collisionActiveIndex++] = pair;\n                            }\n                            // update the pair\n                            pairUpdate(pair, collision, timestamp);\n                        } else {\n                            // pair did not exist, create a new pair\n                            pair = pairCreate(collision, timestamp);\n                            pairsTable[pair.id] = pair;\n                            // add the new pair\n                            collisionStart[collisionStartIndex++] = pair;\n                            pairsList[pairsListIndex++] = pair;\n                        }\n                    }\n                    // find pairs that are no longer active\n                    pairsListIndex = 0;\n                    pairsListLength = pairsList.length;\n                    for(i = 0; i < pairsListLength; i++){\n                        pair = pairsList[i];\n                        // pair is active if updated this timestep\n                        if (pair.timeUpdated >= timestamp) {\n                            // keep active pairs\n                            pairsList[pairsListIndex++] = pair;\n                        } else {\n                            pairSetActive(pair, false, timestamp);\n                            // keep inactive pairs if both bodies may be sleeping\n                            if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n                                pairsList[pairsListIndex++] = pair;\n                            } else {\n                                // remove inactive pairs if either body awake\n                                collisionEnd[collisionEndIndex++] = pair;\n                                delete pairsTable[pair.id];\n                            }\n                        }\n                    }\n                    // update array lengths if changed\n                    if (pairsList.length !== pairsListIndex) {\n                        pairsList.length = pairsListIndex;\n                    }\n                    if (collisionStart.length !== collisionStartIndex) {\n                        collisionStart.length = collisionStartIndex;\n                    }\n                    if (collisionEnd.length !== collisionEndIndex) {\n                        collisionEnd.length = collisionEndIndex;\n                    }\n                    if (collisionActive.length !== collisionActiveIndex) {\n                        collisionActive.length = collisionActiveIndex;\n                    }\n                };\n                /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */ Pairs.clear = function(pairs) {\n                    pairs.table = {};\n                    pairs.list.length = 0;\n                    pairs.collisionStart.length = 0;\n                    pairs.collisionActive.length = 0;\n                    pairs.collisionEnd.length = 0;\n                    return pairs;\n                };\n            })();\n        /***/ },\n        /* 20 */ /***/ function(module1, exports1, __nested_webpack_require_280695__) {\n            var Matter = module1.exports = __nested_webpack_require_280695__(21);\n            Matter.Axes = __nested_webpack_require_280695__(11);\n            Matter.Bodies = __nested_webpack_require_280695__(12);\n            Matter.Body = __nested_webpack_require_280695__(4);\n            Matter.Bounds = __nested_webpack_require_280695__(1);\n            Matter.Collision = __nested_webpack_require_280695__(8);\n            Matter.Common = __nested_webpack_require_280695__(0);\n            Matter.Composite = __nested_webpack_require_280695__(6);\n            Matter.Composites = __nested_webpack_require_280695__(22);\n            Matter.Constraint = __nested_webpack_require_280695__(10);\n            Matter.Contact = __nested_webpack_require_280695__(16);\n            Matter.Detector = __nested_webpack_require_280695__(13);\n            Matter.Engine = __nested_webpack_require_280695__(17);\n            Matter.Events = __nested_webpack_require_280695__(5);\n            Matter.Grid = __nested_webpack_require_280695__(23);\n            Matter.Mouse = __nested_webpack_require_280695__(14);\n            Matter.MouseConstraint = __nested_webpack_require_280695__(24);\n            Matter.Pair = __nested_webpack_require_280695__(9);\n            Matter.Pairs = __nested_webpack_require_280695__(19);\n            Matter.Plugin = __nested_webpack_require_280695__(15);\n            Matter.Query = __nested_webpack_require_280695__(25);\n            Matter.Render = __nested_webpack_require_280695__(26);\n            Matter.Resolver = __nested_webpack_require_280695__(18);\n            Matter.Runner = __nested_webpack_require_280695__(27);\n            Matter.SAT = __nested_webpack_require_280695__(28);\n            Matter.Sleeping = __nested_webpack_require_280695__(7);\n            Matter.Svg = __nested_webpack_require_280695__(29);\n            Matter.Vector = __nested_webpack_require_280695__(2);\n            Matter.Vertices = __nested_webpack_require_280695__(3);\n            Matter.World = __nested_webpack_require_280695__(30);\n            // temporary back compatibility\n            Matter.Engine.run = Matter.Runner.run;\n            Matter.Common.deprecated(Matter.Engine, \"run\", \"Engine.run ➤ use Matter.Runner.run(engine) instead\");\n        /***/ },\n        /* 21 */ /***/ function(module1, exports1, __nested_webpack_require_282604__) {\n            /**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/ var Matter = {};\n            module1.exports = Matter;\n            var Plugin = __nested_webpack_require_282604__(15);\n            var Common = __nested_webpack_require_282604__(0);\n            (function() {\n                /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */ Matter.name = \"matter-js\";\n                /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */ Matter.version =  true ? \"0.20.0\" : 0;\n                /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */ Matter.uses = [];\n                /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */ Matter.used = [];\n                /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */ Matter.use = function() {\n                    Plugin.use(Matter, Array.prototype.slice.call(arguments));\n                };\n                /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */ Matter.before = function(path, func) {\n                    path = path.replace(/^Matter./, \"\");\n                    return Common.chainPathBefore(Matter, path, func);\n                };\n                /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */ Matter.after = function(path, func) {\n                    path = path.replace(/^Matter./, \"\");\n                    return Common.chainPathAfter(Matter, path, func);\n                };\n            })();\n        /***/ },\n        /* 22 */ /***/ function(module1, exports1, __nested_webpack_require_285696__) {\n            /**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/ var Composites = {};\n            module1.exports = Composites;\n            var Composite = __nested_webpack_require_285696__(6);\n            var Constraint = __nested_webpack_require_285696__(10);\n            var Common = __nested_webpack_require_285696__(0);\n            var Body = __nested_webpack_require_285696__(4);\n            var Bodies = __nested_webpack_require_285696__(12);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */ Composites.stack = function(x, y, columns, rows, columnGap, rowGap, callback) {\n                    var stack = Composite.create({\n                        label: \"Stack\"\n                    }), currentX = x, currentY = y, lastBody, i = 0;\n                    for(var row = 0; row < rows; row++){\n                        var maxHeight = 0;\n                        for(var column = 0; column < columns; column++){\n                            var body = callback(currentX, currentY, column, row, lastBody, i);\n                            if (body) {\n                                var bodyHeight = body.bounds.max.y - body.bounds.min.y, bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                                Body.translate(body, {\n                                    x: bodyWidth * 0.5,\n                                    y: bodyHeight * 0.5\n                                });\n                                currentX = body.bounds.max.x + columnGap;\n                                Composite.addBody(stack, body);\n                                lastBody = body;\n                                i += 1;\n                            } else {\n                                currentX += columnGap;\n                            }\n                        }\n                        currentY += maxHeight + rowGap;\n                        currentX = x;\n                    }\n                    return stack;\n                };\n                /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */ Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n                    var bodies = composite.bodies;\n                    for(var i = 1; i < bodies.length; i++){\n                        var bodyA = bodies[i - 1], bodyB = bodies[i], bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y, bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y, bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n                        var defaults = {\n                            bodyA: bodyA,\n                            pointA: {\n                                x: bodyAWidth * xOffsetA,\n                                y: bodyAHeight * yOffsetA\n                            },\n                            bodyB: bodyB,\n                            pointB: {\n                                x: bodyBWidth * xOffsetB,\n                                y: bodyBHeight * yOffsetB\n                            }\n                        };\n                        var constraint = Common.extend(defaults, options);\n                        Composite.addConstraint(composite, Constraint.create(constraint));\n                    }\n                    composite.label += \" Chain\";\n                    return composite;\n                };\n                /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */ Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n                    var bodies = composite.bodies, row, col, bodyA, bodyB, bodyC;\n                    for(row = 0; row < rows; row++){\n                        for(col = 1; col < columns; col++){\n                            bodyA = bodies[col - 1 + row * columns];\n                            bodyB = bodies[col + row * columns];\n                            Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                bodyA: bodyA,\n                                bodyB: bodyB\n                            }, options)));\n                        }\n                        if (row > 0) {\n                            for(col = 0; col < columns; col++){\n                                bodyA = bodies[col + (row - 1) * columns];\n                                bodyB = bodies[col + row * columns];\n                                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                    bodyA: bodyA,\n                                    bodyB: bodyB\n                                }, options)));\n                                if (crossBrace && col > 0) {\n                                    bodyC = bodies[col - 1 + (row - 1) * columns];\n                                    Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                        bodyA: bodyC,\n                                        bodyB: bodyB\n                                    }, options)));\n                                }\n                                if (crossBrace && col < columns - 1) {\n                                    bodyC = bodies[col + 1 + (row - 1) * columns];\n                                    Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                        bodyA: bodyC,\n                                        bodyB: bodyB\n                                    }, options)));\n                                }\n                            }\n                        }\n                    }\n                    composite.label += \" Mesh\";\n                    return composite;\n                };\n                /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */ Composites.pyramid = function(x, y, columns, rows, columnGap, rowGap, callback) {\n                    return Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY, column, row, lastBody, i) {\n                        var actualRows = Math.min(rows, Math.ceil(columns / 2)), lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n                        if (row > actualRows) return;\n                        // reverse row order\n                        row = actualRows - row;\n                        var start = row, end = columns - 1 - row;\n                        if (column < start || column > end) return;\n                        // retroactively fix the first body's position, since width was unknown\n                        if (i === 1) {\n                            Body.translate(lastBody, {\n                                x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                                y: 0\n                            });\n                        }\n                        var xOffset = lastBody ? column * lastBodyWidth : 0;\n                        return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n                    });\n                };\n                /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */ Composites.newtonsCradle = function(x, y, number, size, length) {\n                    var newtonsCradle = Composite.create({\n                        label: \"Newtons Cradle\"\n                    });\n                    for(var i = 0; i < number; i++){\n                        var separation = 1.9, circle = Bodies.circle(x + i * (size * separation), y + length, size, {\n                            inertia: Infinity,\n                            restitution: 1,\n                            friction: 0,\n                            frictionAir: 0.0001,\n                            slop: 1\n                        }), constraint = Constraint.create({\n                            pointA: {\n                                x: x + i * (size * separation),\n                                y: y\n                            },\n                            bodyB: circle\n                        });\n                        Composite.addBody(newtonsCradle, circle);\n                        Composite.addConstraint(newtonsCradle, constraint);\n                    }\n                    return newtonsCradle;\n                };\n                deprecated(Composites, \"newtonsCradle\", \"Composites.newtonsCradle ➤ moved to newtonsCradle example\");\n                /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */ Composites.car = function(x, y, width, height, wheelSize) {\n                    var group = Body.nextGroup(true), wheelBase = 20, wheelAOffset = -width * 0.5 + wheelBase, wheelBOffset = width * 0.5 - wheelBase, wheelYOffset = 0;\n                    var car = Composite.create({\n                        label: \"Car\"\n                    }), body = Bodies.rectangle(x, y, width, height, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        chamfer: {\n                            radius: height * 0.5\n                        },\n                        density: 0.0002\n                    });\n                    var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        friction: 0.8\n                    });\n                    var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        friction: 0.8\n                    });\n                    var axelA = Constraint.create({\n                        bodyB: body,\n                        pointB: {\n                            x: wheelAOffset,\n                            y: wheelYOffset\n                        },\n                        bodyA: wheelA,\n                        stiffness: 1,\n                        length: 0\n                    });\n                    var axelB = Constraint.create({\n                        bodyB: body,\n                        pointB: {\n                            x: wheelBOffset,\n                            y: wheelYOffset\n                        },\n                        bodyA: wheelB,\n                        stiffness: 1,\n                        length: 0\n                    });\n                    Composite.addBody(car, body);\n                    Composite.addBody(car, wheelA);\n                    Composite.addBody(car, wheelB);\n                    Composite.addConstraint(car, axelA);\n                    Composite.addConstraint(car, axelB);\n                    return car;\n                };\n                deprecated(Composites, \"car\", \"Composites.car ➤ moved to car example\");\n                /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */ Composites.softBody = function(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n                    particleOptions = Common.extend({\n                        inertia: Infinity\n                    }, particleOptions);\n                    constraintOptions = Common.extend({\n                        stiffness: 0.2,\n                        render: {\n                            type: \"line\",\n                            anchors: false\n                        }\n                    }, constraintOptions);\n                    var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY) {\n                        return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n                    });\n                    Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n                    softBody.label = \"Soft Body\";\n                    return softBody;\n                };\n                deprecated(Composites, \"softBody\", \"Composites.softBody ➤ moved to softBody and cloth examples\");\n            })();\n        /***/ },\n        /* 23 */ /***/ function(module1, exports1, __nested_webpack_require_301274__) {\n            /**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/ var Grid = {};\n            module1.exports = Grid;\n            var Pair = __nested_webpack_require_301274__(9);\n            var Common = __nested_webpack_require_301274__(0);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */ Grid.create = function(options) {\n                    var defaults = {\n                        buckets: {},\n                        pairs: {},\n                        pairsList: [],\n                        bucketWidth: 48,\n                        bucketHeight: 48\n                    };\n                    return Common.extend(defaults, options);\n                };\n                /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */ /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */ /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */ Grid.update = function(grid, bodies, engine, forceUpdate) {\n                    var i, col, row, world = engine.world, buckets = grid.buckets, bucket, bucketId, gridChanged = false;\n                    for(i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.isSleeping && !forceUpdate) continue;\n                        // temporary back compatibility bounds check\n                        if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n                        var newRegion = Grid._getRegion(grid, body);\n                        // if the body has changed grid region\n                        if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n                            if (!body.region || forceUpdate) body.region = newRegion;\n                            var union = Grid._regionUnion(newRegion, body.region);\n                            // update grid buckets affected by region change\n                            // iterate over the union of both regions\n                            for(col = union.startCol; col <= union.endCol; col++){\n                                for(row = union.startRow; row <= union.endRow; row++){\n                                    bucketId = Grid._getBucketId(col, row);\n                                    bucket = buckets[bucketId];\n                                    var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                                    var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;\n                                    // remove from old region buckets\n                                    if (!isInsideNewRegion && isInsideOldRegion) {\n                                        if (isInsideOldRegion) {\n                                            if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                                        }\n                                    }\n                                    // add to new region buckets\n                                    if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                                        if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n                                        Grid._bucketAddBody(grid, bucket, body);\n                                    }\n                                }\n                            }\n                            // set the new region\n                            body.region = newRegion;\n                            // flag changes so we can update pairs\n                            gridChanged = true;\n                        }\n                    }\n                    // update pairs list only if pairs changed (i.e. a body changed region)\n                    if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n                };\n                deprecated(Grid, \"update\", \"Grid.update ➤ replaced by Matter.Detector\");\n                /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */ Grid.clear = function(grid) {\n                    grid.buckets = {};\n                    grid.pairs = {};\n                    grid.pairsList = [];\n                };\n                deprecated(Grid, \"clear\", \"Grid.clear ➤ replaced by Matter.Detector\");\n                /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */ Grid._regionUnion = function(regionA, regionB) {\n                    var startCol = Math.min(regionA.startCol, regionB.startCol), endCol = Math.max(regionA.endCol, regionB.endCol), startRow = Math.min(regionA.startRow, regionB.startRow), endRow = Math.max(regionA.endRow, regionB.endRow);\n                    return Grid._createRegion(startCol, endCol, startRow, endRow);\n                };\n                /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */ Grid._getRegion = function(grid, body) {\n                    var bounds = body.bounds, startCol = Math.floor(bounds.min.x / grid.bucketWidth), endCol = Math.floor(bounds.max.x / grid.bucketWidth), startRow = Math.floor(bounds.min.y / grid.bucketHeight), endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n                    return Grid._createRegion(startCol, endCol, startRow, endRow);\n                };\n                /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */ Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n                    return {\n                        id: startCol + \",\" + endCol + \",\" + startRow + \",\" + endRow,\n                        startCol: startCol,\n                        endCol: endCol,\n                        startRow: startRow,\n                        endRow: endRow\n                    };\n                };\n                /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */ Grid._getBucketId = function(column, row) {\n                    return \"C\" + column + \"R\" + row;\n                };\n                /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */ Grid._createBucket = function(buckets, bucketId) {\n                    var bucket = buckets[bucketId] = [];\n                    return bucket;\n                };\n                /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */ Grid._bucketAddBody = function(grid, bucket, body) {\n                    var gridPairs = grid.pairs, pairId = Pair.id, bucketLength = bucket.length, i;\n                    // add new pairs\n                    for(i = 0; i < bucketLength; i++){\n                        var bodyB = bucket[i];\n                        if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;\n                        // keep track of the number of buckets the pair exists in\n                        // important for Grid.update to work\n                        var id = pairId(body, bodyB), pair = gridPairs[id];\n                        if (pair) {\n                            pair[2] += 1;\n                        } else {\n                            gridPairs[id] = [\n                                body,\n                                bodyB,\n                                1\n                            ];\n                        }\n                    }\n                    // add to bodies (after pairs, otherwise pairs with self)\n                    bucket.push(body);\n                };\n                /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */ Grid._bucketRemoveBody = function(grid, bucket, body) {\n                    var gridPairs = grid.pairs, pairId = Pair.id, i;\n                    // remove from bucket\n                    bucket.splice(Common.indexOf(bucket, body), 1);\n                    var bucketLength = bucket.length;\n                    // update pair counts\n                    for(i = 0; i < bucketLength; i++){\n                        // keep track of the number of buckets the pair exists in\n                        // important for _createActivePairsList to work\n                        var pair = gridPairs[pairId(body, bucket[i])];\n                        if (pair) pair[2] -= 1;\n                    }\n                };\n                /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */ Grid._createActivePairsList = function(grid) {\n                    var pair, gridPairs = grid.pairs, pairKeys = Common.keys(gridPairs), pairKeysLength = pairKeys.length, pairs = [], k;\n                    // iterate over grid.pairs\n                    for(k = 0; k < pairKeysLength; k++){\n                        pair = gridPairs[pairKeys[k]];\n                        // if pair exists in at least one bucket\n                        // it is a pair that needs further collision testing so push it\n                        if (pair[2] > 0) {\n                            pairs.push(pair);\n                        } else {\n                            delete gridPairs[pairKeys[k]];\n                        }\n                    }\n                    return pairs;\n                };\n            })();\n        /***/ },\n        /* 24 */ /***/ function(module1, exports1, __nested_webpack_require_312689__) {\n            /**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/ var MouseConstraint = {};\n            module1.exports = MouseConstraint;\n            var Vertices = __nested_webpack_require_312689__(3);\n            var Sleeping = __nested_webpack_require_312689__(7);\n            var Mouse = __nested_webpack_require_312689__(14);\n            var Events = __nested_webpack_require_312689__(5);\n            var Detector = __nested_webpack_require_312689__(13);\n            var Constraint = __nested_webpack_require_312689__(10);\n            var Composite = __nested_webpack_require_312689__(6);\n            var Common = __nested_webpack_require_312689__(0);\n            var Bounds = __nested_webpack_require_312689__(1);\n            (function() {\n                /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */ MouseConstraint.create = function(engine, options) {\n                    var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n                    if (!mouse) {\n                        if (engine && engine.render && engine.render.canvas) {\n                            mouse = Mouse.create(engine.render.canvas);\n                        } else if (options && options.element) {\n                            mouse = Mouse.create(options.element);\n                        } else {\n                            mouse = Mouse.create();\n                            Common.warn(\"MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected\");\n                        }\n                    }\n                    var constraint = Constraint.create({\n                        label: \"Mouse Constraint\",\n                        pointA: mouse.position,\n                        pointB: {\n                            x: 0,\n                            y: 0\n                        },\n                        length: 0.01,\n                        stiffness: 0.1,\n                        angularStiffness: 1,\n                        render: {\n                            strokeStyle: \"#90EE90\",\n                            lineWidth: 3\n                        }\n                    });\n                    var defaults = {\n                        type: \"mouseConstraint\",\n                        mouse: mouse,\n                        element: null,\n                        body: null,\n                        constraint: constraint,\n                        collisionFilter: {\n                            category: 0x0001,\n                            mask: 0xFFFFFFFF,\n                            group: 0\n                        }\n                    };\n                    var mouseConstraint = Common.extend(defaults, options);\n                    Events.on(engine, \"beforeUpdate\", function() {\n                        var allBodies = Composite.allBodies(engine.world);\n                        MouseConstraint.update(mouseConstraint, allBodies);\n                        MouseConstraint._triggerEvents(mouseConstraint);\n                    });\n                    return mouseConstraint;\n                };\n                /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */ MouseConstraint.update = function(mouseConstraint, bodies) {\n                    var mouse = mouseConstraint.mouse, constraint = mouseConstraint.constraint, body = mouseConstraint.body;\n                    if (mouse.button === 0) {\n                        if (!constraint.bodyB) {\n                            for(var i = 0; i < bodies.length; i++){\n                                body = bodies[i];\n                                if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                                    for(var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++){\n                                        var part = body.parts[j];\n                                        if (Vertices.contains(part.vertices, mouse.position)) {\n                                            constraint.pointA = mouse.position;\n                                            constraint.bodyB = mouseConstraint.body = body;\n                                            constraint.pointB = {\n                                                x: mouse.position.x - body.position.x,\n                                                y: mouse.position.y - body.position.y\n                                            };\n                                            constraint.angleB = body.angle;\n                                            Sleeping.set(body, false);\n                                            Events.trigger(mouseConstraint, \"startdrag\", {\n                                                mouse: mouse,\n                                                body: body\n                                            });\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            Sleeping.set(constraint.bodyB, false);\n                            constraint.pointA = mouse.position;\n                        }\n                    } else {\n                        constraint.bodyB = mouseConstraint.body = null;\n                        constraint.pointB = null;\n                        if (body) Events.trigger(mouseConstraint, \"enddrag\", {\n                            mouse: mouse,\n                            body: body\n                        });\n                    }\n                };\n                /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */ MouseConstraint._triggerEvents = function(mouseConstraint) {\n                    var mouse = mouseConstraint.mouse, mouseEvents = mouse.sourceEvents;\n                    if (mouseEvents.mousemove) Events.trigger(mouseConstraint, \"mousemove\", {\n                        mouse: mouse\n                    });\n                    if (mouseEvents.mousedown) Events.trigger(mouseConstraint, \"mousedown\", {\n                        mouse: mouse\n                    });\n                    if (mouseEvents.mouseup) Events.trigger(mouseConstraint, \"mouseup\", {\n                        mouse: mouse\n                    });\n                    // reset the mouse state ready for the next step\n                    Mouse.clearSourceEvents(mouse);\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */ /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */ /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */ /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */ /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */ })();\n        /***/ },\n        /* 25 */ /***/ function(module1, exports1, __nested_webpack_require_322705__) {\n            /**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/ var Query = {};\n            module1.exports = Query;\n            var Vector = __nested_webpack_require_322705__(2);\n            var Collision = __nested_webpack_require_322705__(8);\n            var Bounds = __nested_webpack_require_322705__(1);\n            var Bodies = __nested_webpack_require_322705__(12);\n            var Vertices = __nested_webpack_require_322705__(3);\n            (function() {\n                /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */ Query.collides = function(body, bodies) {\n                    var collisions = [], bodiesLength = bodies.length, bounds = body.bounds, collides = Collision.collides, overlaps = Bounds.overlaps;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var bodyA = bodies[i], partsALength = bodyA.parts.length, partsAStart = partsALength === 1 ? 0 : 1;\n                        if (overlaps(bodyA.bounds, bounds)) {\n                            for(var j = partsAStart; j < partsALength; j++){\n                                var part = bodyA.parts[j];\n                                if (overlaps(part.bounds, bounds)) {\n                                    var collision = collides(part, body);\n                                    if (collision) {\n                                        collisions.push(collision);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return collisions;\n                };\n                /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */ Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n                    rayWidth = rayWidth || 1e-100;\n                    var rayAngle = Vector.angle(startPoint, endPoint), rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)), rayX = (endPoint.x + startPoint.x) * 0.5, rayY = (endPoint.y + startPoint.y) * 0.5, ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n                        angle: rayAngle\n                    }), collisions = Query.collides(ray, bodies);\n                    for(var i = 0; i < collisions.length; i += 1){\n                        var collision = collisions[i];\n                        collision.body = collision.bodyB = collision.bodyA;\n                    }\n                    return collisions;\n                };\n                /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */ Query.region = function(bodies, bounds, outside) {\n                    var result = [];\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], overlaps = Bounds.overlaps(body.bounds, bounds);\n                        if (overlaps && !outside || !overlaps && outside) result.push(body);\n                    }\n                    return result;\n                };\n                /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */ Query.point = function(bodies, point) {\n                    var result = [];\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (Bounds.contains(body.bounds, point)) {\n                            for(var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++){\n                                var part = body.parts[j];\n                                if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                                    result.push(body);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return result;\n                };\n            })();\n        /***/ },\n        /* 26 */ /***/ function(module1, exports1, __nested_webpack_require_327583__) {\n            /**\n* The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/ var Render = {};\n            module1.exports = Render;\n            var Body = __nested_webpack_require_327583__(4);\n            var Common = __nested_webpack_require_327583__(0);\n            var Composite = __nested_webpack_require_327583__(6);\n            var Bounds = __nested_webpack_require_327583__(1);\n            var Events = __nested_webpack_require_327583__(5);\n            var Vector = __nested_webpack_require_327583__(2);\n            var Mouse = __nested_webpack_require_327583__(14);\n            (function() {\n                var _requestAnimationFrame, _cancelAnimationFrame;\n                if (true) {\n                    _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {\n                        window.setTimeout(function() {\n                            callback(Common.now());\n                        }, 1000 / 60);\n                    };\n                    _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n                }\n                Render._goodFps = 30;\n                Render._goodDelta = 1000 / 60;\n                /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */ Render.create = function(options) {\n                    var defaults = {\n                        engine: null,\n                        element: null,\n                        canvas: null,\n                        mouse: null,\n                        frameRequestId: null,\n                        timing: {\n                            historySize: 60,\n                            delta: 0,\n                            deltaHistory: [],\n                            lastTime: 0,\n                            lastTimestamp: 0,\n                            lastElapsed: 0,\n                            timestampElapsed: 0,\n                            timestampElapsedHistory: [],\n                            engineDeltaHistory: [],\n                            engineElapsedHistory: [],\n                            engineUpdatesHistory: [],\n                            elapsedHistory: []\n                        },\n                        options: {\n                            width: 800,\n                            height: 600,\n                            pixelRatio: 1,\n                            background: \"#14151f\",\n                            wireframeBackground: \"#14151f\",\n                            wireframeStrokeStyle: \"#bbb\",\n                            hasBounds: !!options.bounds,\n                            enabled: true,\n                            wireframes: true,\n                            showSleeping: true,\n                            showDebug: false,\n                            showStats: false,\n                            showPerformance: false,\n                            showBounds: false,\n                            showVelocity: false,\n                            showCollisions: false,\n                            showSeparations: false,\n                            showAxes: false,\n                            showPositions: false,\n                            showAngleIndicator: false,\n                            showIds: false,\n                            showVertexNumbers: false,\n                            showConvexHulls: false,\n                            showInternalEdges: false,\n                            showMousePosition: false\n                        }\n                    };\n                    var render = Common.extend(defaults, options);\n                    if (render.canvas) {\n                        render.canvas.width = render.options.width || render.canvas.width;\n                        render.canvas.height = render.options.height || render.canvas.height;\n                    }\n                    render.mouse = options.mouse;\n                    render.engine = options.engine;\n                    render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n                    render.context = render.canvas.getContext(\"2d\");\n                    render.textures = {};\n                    render.bounds = render.bounds || {\n                        min: {\n                            x: 0,\n                            y: 0\n                        },\n                        max: {\n                            x: render.canvas.width,\n                            y: render.canvas.height\n                        }\n                    };\n                    // for temporary back compatibility only\n                    render.controller = Render;\n                    render.options.showBroadphase = false;\n                    if (render.options.pixelRatio !== 1) {\n                        Render.setPixelRatio(render, render.options.pixelRatio);\n                    }\n                    if (Common.isElement(render.element)) {\n                        render.element.appendChild(render.canvas);\n                    }\n                    return render;\n                };\n                /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */ Render.run = function(render) {\n                    (function loop(time) {\n                        render.frameRequestId = _requestAnimationFrame(loop);\n                        _updateTiming(render, time);\n                        Render.world(render, time);\n                        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n                        if (render.options.showStats || render.options.showDebug) {\n                            Render.stats(render, render.context, time);\n                        }\n                        if (render.options.showPerformance || render.options.showDebug) {\n                            Render.performance(render, render.context, time);\n                        }\n                        render.context.setTransform(1, 0, 0, 1, 0, 0);\n                    })();\n                };\n                /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */ Render.stop = function(render) {\n                    _cancelAnimationFrame(render.frameRequestId);\n                };\n                /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */ Render.setPixelRatio = function(render, pixelRatio) {\n                    var options = render.options, canvas = render.canvas;\n                    if (pixelRatio === \"auto\") {\n                        pixelRatio = _getPixelRatio(canvas);\n                    }\n                    options.pixelRatio = pixelRatio;\n                    canvas.setAttribute(\"data-pixel-ratio\", pixelRatio);\n                    canvas.width = options.width * pixelRatio;\n                    canvas.height = options.height * pixelRatio;\n                    canvas.style.width = options.width + \"px\";\n                    canvas.style.height = options.height + \"px\";\n                };\n                /**\n     * Sets the render `width` and `height`.\n     * \n     * Updates the canvas accounting for `render.options.pixelRatio`.  \n     * \n     * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n     * The top left render bound `render.bounds.min` isn't changed.\n     * \n     * Follow this call with `Render.lookAt` if you need to change the render bounds.\n     * \n     * See also `Render.setPixelRatio`.\n     * @method setSize\n     * @param {render} render\n     * @param {number} width The width (in CSS pixels)\n     * @param {number} height The height (in CSS pixels)\n     */ Render.setSize = function(render, width, height) {\n                    render.options.width = width;\n                    render.options.height = height;\n                    render.bounds.max.x = render.bounds.min.x + width;\n                    render.bounds.max.y = render.bounds.min.y + height;\n                    if (render.options.pixelRatio !== 1) {\n                        Render.setPixelRatio(render, render.options.pixelRatio);\n                    } else {\n                        render.canvas.width = width;\n                        render.canvas.height = height;\n                    }\n                };\n                /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */ Render.lookAt = function(render, objects, padding, center) {\n                    center = typeof center !== \"undefined\" ? center : true;\n                    objects = Common.isArray(objects) ? objects : [\n                        objects\n                    ];\n                    padding = padding || {\n                        x: 0,\n                        y: 0\n                    };\n                    // find bounds of all objects\n                    var bounds = {\n                        min: {\n                            x: Infinity,\n                            y: Infinity\n                        },\n                        max: {\n                            x: -Infinity,\n                            y: -Infinity\n                        }\n                    };\n                    for(var i = 0; i < objects.length; i += 1){\n                        var object = objects[i], min = object.bounds ? object.bounds.min : object.min || object.position || object, max = object.bounds ? object.bounds.max : object.max || object.position || object;\n                        if (min && max) {\n                            if (min.x < bounds.min.x) bounds.min.x = min.x;\n                            if (max.x > bounds.max.x) bounds.max.x = max.x;\n                            if (min.y < bounds.min.y) bounds.min.y = min.y;\n                            if (max.y > bounds.max.y) bounds.max.y = max.y;\n                        }\n                    }\n                    // find ratios\n                    var width = bounds.max.x - bounds.min.x + 2 * padding.x, height = bounds.max.y - bounds.min.y + 2 * padding.y, viewHeight = render.canvas.height, viewWidth = render.canvas.width, outerRatio = viewWidth / viewHeight, innerRatio = width / height, scaleX = 1, scaleY = 1;\n                    // find scale factor\n                    if (innerRatio > outerRatio) {\n                        scaleY = innerRatio / outerRatio;\n                    } else {\n                        scaleX = outerRatio / innerRatio;\n                    }\n                    // enable bounds\n                    render.options.hasBounds = true;\n                    // position and size\n                    render.bounds.min.x = bounds.min.x;\n                    render.bounds.max.x = bounds.min.x + width * scaleX;\n                    render.bounds.min.y = bounds.min.y;\n                    render.bounds.max.y = bounds.min.y + height * scaleY;\n                    // center\n                    if (center) {\n                        render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n                        render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n                        render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n                        render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n                    }\n                    // padding\n                    render.bounds.min.x -= padding.x;\n                    render.bounds.max.x -= padding.x;\n                    render.bounds.min.y -= padding.y;\n                    render.bounds.max.y -= padding.y;\n                    // update mouse\n                    if (render.mouse) {\n                        Mouse.setScale(render.mouse, {\n                            x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                            y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                        });\n                        Mouse.setOffset(render.mouse, render.bounds.min);\n                    }\n                };\n                /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */ Render.startViewTransform = function(render) {\n                    var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;\n                    render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n                    render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n                };\n                /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */ Render.endViewTransform = function(render) {\n                    render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n                };\n                /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */ Render.world = function(render, time) {\n                    var startTime = Common.now(), engine = render.engine, world = engine.world, canvas = render.canvas, context = render.context, options = render.options, timing = render.timing;\n                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world), background = options.wireframes ? options.wireframeBackground : options.background, bodies = [], constraints = [], i;\n                    var event = {\n                        timestamp: engine.timing.timestamp\n                    };\n                    Events.trigger(render, \"beforeRender\", event);\n                    // apply background if it has changed\n                    if (render.currentBackground !== background) _applyBackground(render, background);\n                    // clear the canvas with a transparent fill, to allow the canvas background to show\n                    context.globalCompositeOperation = \"source-in\";\n                    context.fillStyle = \"transparent\";\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                    context.globalCompositeOperation = \"source-over\";\n                    // handle bounds\n                    if (options.hasBounds) {\n                        // filter out bodies that are not in view\n                        for(i = 0; i < allBodies.length; i++){\n                            var body = allBodies[i];\n                            if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n                        }\n                        // filter out constraints that are not in view\n                        for(i = 0; i < allConstraints.length; i++){\n                            var constraint = allConstraints[i], bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointAWorld = constraint.pointA, pointBWorld = constraint.pointB;\n                            if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                            if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n                            if (!pointAWorld || !pointBWorld) continue;\n                            if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n                        }\n                        // transform the view\n                        Render.startViewTransform(render);\n                        // update mouse\n                        if (render.mouse) {\n                            Mouse.setScale(render.mouse, {\n                                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                            });\n                            Mouse.setOffset(render.mouse, render.bounds.min);\n                        }\n                    } else {\n                        constraints = allConstraints;\n                        bodies = allBodies;\n                        if (render.options.pixelRatio !== 1) {\n                            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n                        }\n                    }\n                    if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n                        // fully featured rendering of bodies\n                        Render.bodies(render, bodies, context);\n                    } else {\n                        if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);\n                        // optimised method for wireframes only\n                        Render.bodyWireframes(render, bodies, context);\n                    }\n                    if (options.showBounds) Render.bodyBounds(render, bodies, context);\n                    if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n                    if (options.showPositions) Render.bodyPositions(render, bodies, context);\n                    if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n                    if (options.showIds) Render.bodyIds(render, bodies, context);\n                    if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n                    if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n                    if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n                    if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n                    Render.constraints(constraints, context);\n                    if (options.hasBounds) {\n                        // revert view transforms\n                        Render.endViewTransform(render);\n                    }\n                    Events.trigger(render, \"afterRender\", event);\n                    // log the time elapsed computing this update\n                    timing.lastElapsed = Common.now() - startTime;\n                };\n                /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */ Render.stats = function(render, context, time) {\n                    var engine = render.engine, world = engine.world, bodies = Composite.allBodies(world), parts = 0, width = 55, height = 44, x = 0, y = 0;\n                    // count parts\n                    for(var i = 0; i < bodies.length; i += 1){\n                        parts += bodies[i].parts.length;\n                    }\n                    // sections\n                    var sections = {\n                        \"Part\": parts,\n                        \"Body\": bodies.length,\n                        \"Cons\": Composite.allConstraints(world).length,\n                        \"Comp\": Composite.allComposites(world).length,\n                        \"Pair\": engine.pairs.list.length\n                    };\n                    // background\n                    context.fillStyle = \"#0e0f19\";\n                    context.fillRect(x, y, width * 5.5, height);\n                    context.font = \"12px Arial\";\n                    context.textBaseline = \"top\";\n                    context.textAlign = \"right\";\n                    // sections\n                    for(var key in sections){\n                        var section = sections[key];\n                        // label\n                        context.fillStyle = \"#aaa\";\n                        context.fillText(key, x + width, y + 8);\n                        // value\n                        context.fillStyle = \"#eee\";\n                        context.fillText(section, x + width, y + 26);\n                        x += width;\n                    }\n                };\n                /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */ Render.performance = function(render, context) {\n                    var engine = render.engine, timing = render.timing, deltaHistory = timing.deltaHistory, elapsedHistory = timing.elapsedHistory, timestampElapsedHistory = timing.timestampElapsedHistory, engineDeltaHistory = timing.engineDeltaHistory, engineUpdatesHistory = timing.engineUpdatesHistory, engineElapsedHistory = timing.engineElapsedHistory, lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame, lastEngineDelta = engine.timing.lastDelta;\n                    var deltaMean = _mean(deltaHistory), elapsedMean = _mean(elapsedHistory), engineDeltaMean = _mean(engineDeltaHistory), engineUpdatesMean = _mean(engineUpdatesHistory), engineElapsedMean = _mean(engineElapsedHistory), timestampElapsedMean = _mean(timestampElapsedHistory), rateMean = timestampElapsedMean / deltaMean || 0, neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta), fps = 1000 / deltaMean || 0;\n                    var graphHeight = 4, gap = 12, width = 60, height = 34, x = 10, y = 69;\n                    // background\n                    context.fillStyle = \"#0e0f19\";\n                    context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n                    // show FPS\n                    Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + \" fps\", fps / Render._goodFps, function(i) {\n                        return deltaHistory[i] / deltaMean - 1;\n                    });\n                    // show engine delta\n                    Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + \" dt\", Render._goodDelta / lastEngineDelta, function(i) {\n                        return engineDeltaHistory[i] / engineDeltaMean - 1;\n                    });\n                    // show engine updates per frame\n                    Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length, lastEngineUpdatesPerFrame + \" upf\", Math.pow(Common.clamp(engineUpdatesMean / neededUpdatesPerFrame || 1, 0, 1), 4), function(i) {\n                        return engineUpdatesHistory[i] / engineUpdatesMean - 1;\n                    });\n                    // show engine update time\n                    Render.status(context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + \" ut\", 1 - lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps, function(i) {\n                        return engineElapsedHistory[i] / engineElapsedMean - 1;\n                    });\n                    // show render time\n                    Render.status(context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + \" rt\", 1 - elapsedMean / Render._goodFps, function(i) {\n                        return elapsedHistory[i] / elapsedMean - 1;\n                    });\n                    // show effective speed\n                    Render.status(context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + \" x\", rateMean * rateMean * rateMean, function(i) {\n                        return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n                    });\n                };\n                /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */ Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n                    // background\n                    context.strokeStyle = \"#888\";\n                    context.fillStyle = \"#444\";\n                    context.lineWidth = 1;\n                    context.fillRect(x, y + 7, width, 1);\n                    // chart\n                    context.beginPath();\n                    context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n                    for(var i = 0; i < width; i += 1){\n                        context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n                    }\n                    context.stroke();\n                    // indicator\n                    context.fillStyle = \"hsl(\" + Common.clamp(25 + 95 * indicator, 0, 120) + \",100%,60%)\";\n                    context.fillRect(x, y - 7, 4, 4);\n                    // label\n                    context.font = \"12px Arial\";\n                    context.textBaseline = \"middle\";\n                    context.textAlign = \"right\";\n                    context.fillStyle = \"#eee\";\n                    context.fillText(label, x + width, y - 5);\n                };\n                /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */ Render.constraints = function(constraints, context) {\n                    var c = context;\n                    for(var i = 0; i < constraints.length; i++){\n                        var constraint = constraints[i];\n                        if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n                        var bodyA = constraint.bodyA, bodyB = constraint.bodyB, start, end;\n                        if (bodyA) {\n                            start = Vector.add(bodyA.position, constraint.pointA);\n                        } else {\n                            start = constraint.pointA;\n                        }\n                        if (constraint.render.type === \"pin\") {\n                            c.beginPath();\n                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                            c.closePath();\n                        } else {\n                            if (bodyB) {\n                                end = Vector.add(bodyB.position, constraint.pointB);\n                            } else {\n                                end = constraint.pointB;\n                            }\n                            c.beginPath();\n                            c.moveTo(start.x, start.y);\n                            if (constraint.render.type === \"spring\") {\n                                var delta = Vector.sub(end, start), normal = Vector.perp(Vector.normalise(delta)), coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)), offset;\n                                for(var j = 1; j < coils; j += 1){\n                                    offset = j % 2 === 0 ? 1 : -1;\n                                    c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                                }\n                            }\n                            c.lineTo(end.x, end.y);\n                        }\n                        if (constraint.render.lineWidth) {\n                            c.lineWidth = constraint.render.lineWidth;\n                            c.strokeStyle = constraint.render.strokeStyle;\n                            c.stroke();\n                        }\n                        if (constraint.render.anchors) {\n                            c.fillStyle = constraint.render.strokeStyle;\n                            c.beginPath();\n                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                            c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                            c.closePath();\n                            c.fill();\n                        }\n                    }\n                };\n                /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodies = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, showInternalEdges = options.showInternalEdges || !options.wireframes, body, part, i, k;\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            if (!part.render.visible) continue;\n                            if (options.showSleeping && body.isSleeping) {\n                                c.globalAlpha = 0.5 * part.render.opacity;\n                            } else if (part.render.opacity !== 1) {\n                                c.globalAlpha = part.render.opacity;\n                            }\n                            if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                                // part sprite\n                                var sprite = part.render.sprite, texture = _getTexture(render, sprite.texture);\n                                c.translate(part.position.x, part.position.y);\n                                c.rotate(part.angle);\n                                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);\n                                // revert translation, hopefully faster than save / restore\n                                c.rotate(-part.angle);\n                                c.translate(-part.position.x, -part.position.y);\n                            } else {\n                                // part polygon\n                                if (part.circleRadius) {\n                                    c.beginPath();\n                                    c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                                } else {\n                                    c.beginPath();\n                                    c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                                    for(var j = 1; j < part.vertices.length; j++){\n                                        if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                            c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                                        } else {\n                                            c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                                        }\n                                        if (part.vertices[j].isInternal && !showInternalEdges) {\n                                            c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                                        }\n                                    }\n                                    c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                                    c.closePath();\n                                }\n                                if (!options.wireframes) {\n                                    c.fillStyle = part.render.fillStyle;\n                                    if (part.render.lineWidth) {\n                                        c.lineWidth = part.render.lineWidth;\n                                        c.strokeStyle = part.render.strokeStyle;\n                                        c.stroke();\n                                    }\n                                    c.fill();\n                                } else {\n                                    c.lineWidth = 1;\n                                    c.strokeStyle = render.options.wireframeStrokeStyle;\n                                    c.stroke();\n                                }\n                            }\n                            c.globalAlpha = 1;\n                        }\n                    }\n                };\n                /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyWireframes = function(render, bodies, context) {\n                    var c = context, showInternalEdges = render.options.showInternalEdges, body, part, i, j, k;\n                    c.beginPath();\n                    // render all bodies\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                            for(j = 1; j < part.vertices.length; j++){\n                                if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                    c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                                } else {\n                                    c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                                }\n                                if (part.vertices[j].isInternal && !showInternalEdges) {\n                                    c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                                }\n                            }\n                            c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        }\n                    }\n                    c.lineWidth = 1;\n                    c.strokeStyle = render.options.wireframeStrokeStyle;\n                    c.stroke();\n                };\n                /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyConvexHulls = function(render, bodies, context) {\n                    var c = context, body, part, i, j, k;\n                    c.beginPath();\n                    // render convex hulls\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible || body.parts.length === 1) continue;\n                        c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                        for(j = 1; j < body.vertices.length; j++){\n                            c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                        }\n                        c.lineTo(body.vertices[0].x, body.vertices[0].y);\n                    }\n                    c.lineWidth = 1;\n                    c.strokeStyle = \"rgba(255,255,255,0.2)\";\n                    c.stroke();\n                };\n                /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.vertexNumbers = function(render, bodies, context) {\n                    var c = context, i, j, k;\n                    for(i = 0; i < bodies.length; i++){\n                        var parts = bodies[i].parts;\n                        for(k = parts.length > 1 ? 1 : 0; k < parts.length; k++){\n                            var part = parts[k];\n                            for(j = 0; j < part.vertices.length; j++){\n                                c.fillStyle = \"rgba(255,255,255,0.2)\";\n                                c.fillText(i + \"_\" + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                            }\n                        }\n                    }\n                };\n                /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */ Render.mousePosition = function(render, mouse, context) {\n                    var c = context;\n                    c.fillStyle = \"rgba(255,255,255,0.8)\";\n                    c.fillText(mouse.position.x + \"  \" + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n                };\n                /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyBounds = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options;\n                    c.beginPath();\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.render.visible) {\n                            var parts = bodies[i].parts;\n                            for(var j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                                var part = parts[j];\n                                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                            }\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.strokeStyle = \"rgba(255,255,255,0.08)\";\n                    } else {\n                        c.strokeStyle = \"rgba(0,0,0,0.1)\";\n                    }\n                    c.lineWidth = 1;\n                    c.stroke();\n                };\n                /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyAxes = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, part, i, j, k;\n                    c.beginPath();\n                    for(i = 0; i < bodies.length; i++){\n                        var body = bodies[i], parts = body.parts;\n                        if (!body.render.visible) continue;\n                        if (options.showAxes) {\n                            // render all axes\n                            for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                                part = parts[j];\n                                for(k = 0; k < part.axes.length; k++){\n                                    var axis = part.axes[k];\n                                    c.moveTo(part.position.x, part.position.y);\n                                    c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                                }\n                            }\n                        } else {\n                            for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                                part = parts[j];\n                                for(k = 0; k < part.axes.length; k++){\n                                    // render a single axis indicator\n                                    c.moveTo(part.position.x, part.position.y);\n                                    c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                                }\n                            }\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.strokeStyle = \"indianred\";\n                        c.lineWidth = 1;\n                    } else {\n                        c.strokeStyle = \"rgba(255, 255, 255, 0.4)\";\n                        c.globalCompositeOperation = \"overlay\";\n                        c.lineWidth = 2;\n                    }\n                    c.stroke();\n                    c.globalCompositeOperation = \"source-over\";\n                };\n                /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyPositions = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, body, part, i, k;\n                    c.beginPath();\n                    // render current positions\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                            c.closePath();\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.fillStyle = \"indianred\";\n                    } else {\n                        c.fillStyle = \"rgba(0,0,0,0.5)\";\n                    }\n                    c.fill();\n                    c.beginPath();\n                    // render previous positions\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (body.render.visible) {\n                            c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                            c.closePath();\n                        }\n                    }\n                    c.fillStyle = \"rgba(255,165,0,0.8)\";\n                    c.fill();\n                };\n                /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyVelocity = function(render, bodies, context) {\n                    var c = context;\n                    c.beginPath();\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (!body.render.visible) continue;\n                        var velocity = Body.getVelocity(body);\n                        c.moveTo(body.position.x, body.position.y);\n                        c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n                    }\n                    c.lineWidth = 3;\n                    c.strokeStyle = \"cornflowerblue\";\n                    c.stroke();\n                };\n                /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyIds = function(render, bodies, context) {\n                    var c = context, i, j;\n                    for(i = 0; i < bodies.length; i++){\n                        if (!bodies[i].render.visible) continue;\n                        var parts = bodies[i].parts;\n                        for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                            var part = parts[j];\n                            c.font = \"12px Arial\";\n                            c.fillStyle = \"rgba(255,255,255,0.5)\";\n                            c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n                        }\n                    }\n                };\n                /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */ Render.collisions = function(render, pairs, context) {\n                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;\n                    c.beginPath();\n                    // render collision positions\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        for(j = 0; j < pair.contactCount; j++){\n                            var contact = pair.contacts[j], vertex = contact.vertex;\n                            c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.fillStyle = \"rgba(255,255,255,0.7)\";\n                    } else {\n                        c.fillStyle = \"orange\";\n                    }\n                    c.fill();\n                    c.beginPath();\n                    // render collision normals\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        if (pair.contactCount > 0) {\n                            var normalPosX = pair.contacts[0].vertex.x, normalPosY = pair.contacts[0].vertex.y;\n                            if (pair.contactCount === 2) {\n                                normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n                                normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n                            }\n                            if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                                c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                            } else {\n                                c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                            }\n                            c.lineTo(normalPosX, normalPosY);\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.strokeStyle = \"rgba(255,165,0,0.7)\";\n                    } else {\n                        c.strokeStyle = \"orange\";\n                    }\n                    c.lineWidth = 1;\n                    c.stroke();\n                };\n                /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */ Render.separations = function(render, pairs, context) {\n                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;\n                    c.beginPath();\n                    // render separations\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        bodyA = collision.bodyA;\n                        bodyB = collision.bodyB;\n                        var k = 1;\n                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n                        if (bodyB.isStatic) k = 0;\n                        c.moveTo(bodyB.position.x, bodyB.position.y);\n                        c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n                        k = 1;\n                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n                        if (bodyA.isStatic) k = 0;\n                        c.moveTo(bodyA.position.x, bodyA.position.y);\n                        c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n                    }\n                    if (options.wireframes) {\n                        c.strokeStyle = \"rgba(255,165,0,0.5)\";\n                    } else {\n                        c.strokeStyle = \"orange\";\n                    }\n                    c.stroke();\n                };\n                /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */ Render.inspector = function(inspector, context) {\n                    var engine = inspector.engine, selected = inspector.selected, render = inspector.render, options = render.options, bounds;\n                    if (options.hasBounds) {\n                        var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;\n                        context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n                        context.translate(-render.bounds.min.x, -render.bounds.min.y);\n                    }\n                    for(var i = 0; i < selected.length; i++){\n                        var item = selected[i].data;\n                        context.translate(0.5, 0.5);\n                        context.lineWidth = 1;\n                        context.strokeStyle = \"rgba(255,165,0,0.9)\";\n                        context.setLineDash([\n                            1,\n                            2\n                        ]);\n                        switch(item.type){\n                            case \"body\":\n                                // render body selections\n                                bounds = item.bounds;\n                                context.beginPath();\n                                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                                context.closePath();\n                                context.stroke();\n                                break;\n                            case \"constraint\":\n                                // render constraint selections\n                                var point = item.pointA;\n                                if (item.bodyA) point = item.pointB;\n                                context.beginPath();\n                                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                                context.closePath();\n                                context.stroke();\n                                break;\n                        }\n                        context.setLineDash([]);\n                        context.translate(-0.5, -0.5);\n                    }\n                    // render selection region\n                    if (inspector.selectStart !== null) {\n                        context.translate(0.5, 0.5);\n                        context.lineWidth = 1;\n                        context.strokeStyle = \"rgba(255,165,0,0.6)\";\n                        context.fillStyle = \"rgba(255,165,0,0.1)\";\n                        bounds = inspector.selectBounds;\n                        context.beginPath();\n                        context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n                        context.closePath();\n                        context.stroke();\n                        context.fill();\n                        context.translate(-0.5, -0.5);\n                    }\n                    if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n                };\n                /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */ var _updateTiming = function(render, time) {\n                    var engine = render.engine, timing = render.timing, historySize = timing.historySize, timestamp = engine.timing.timestamp;\n                    timing.delta = time - timing.lastTime || Render._goodDelta;\n                    timing.lastTime = time;\n                    timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n                    timing.lastTimestamp = timestamp;\n                    timing.deltaHistory.unshift(timing.delta);\n                    timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n                    timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n                    timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n                    timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n                    timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n                    timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n                    timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n                    timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n                    timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n                    timing.elapsedHistory.unshift(timing.lastElapsed);\n                    timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n                };\n                /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */ var _mean = function(values) {\n                    var result = 0;\n                    for(var i = 0; i < values.length; i += 1){\n                        result += values[i];\n                    }\n                    return result / values.length || 0;\n                };\n                /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */ var _createCanvas = function(width, height) {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.width = width;\n                    canvas.height = height;\n                    canvas.oncontextmenu = function() {\n                        return false;\n                    };\n                    canvas.onselectstart = function() {\n                        return false;\n                    };\n                    return canvas;\n                };\n                /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */ var _getPixelRatio = function(canvas) {\n                    var context = canvas.getContext(\"2d\"), devicePixelRatio = window.devicePixelRatio || 1, backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n                    return devicePixelRatio / backingStorePixelRatio;\n                };\n                /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */ var _getTexture = function(render, imagePath) {\n                    var image = render.textures[imagePath];\n                    if (image) return image;\n                    image = render.textures[imagePath] = new Image();\n                    image.src = imagePath;\n                    return image;\n                };\n                /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */ var _applyBackground = function(render, background) {\n                    var cssBackground = background;\n                    if (/(jpg|gif|png)$/.test(background)) cssBackground = \"url(\" + background + \")\";\n                    render.canvas.style.background = cssBackground;\n                    render.canvas.style.backgroundSize = \"contain\";\n                    render.currentBackground = background;\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */ /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */ /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */ /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */ /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */ /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */ /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */ /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */ /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */ /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */ /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */ /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */ /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */ /**\n     * A CSS color string to use for background when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */ /**\n     * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeStrokeStyle\n     * @type string\n     * @default '#bbb'\n     */ /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average updates per frame (e.g. 1)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */ /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */ /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */ })();\n        /***/ },\n        /* 27 */ /***/ function(module1, exports1, __nested_webpack_require_394213__) {\n            /**\n* The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n* A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n* This runner favours a smoother user experience over perfect time keeping.\n* This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n* Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/ var Runner = {};\n            module1.exports = Runner;\n            var Events = __nested_webpack_require_394213__(5);\n            var Engine = __nested_webpack_require_394213__(17);\n            var Common = __nested_webpack_require_394213__(0);\n            (function() {\n                Runner._maxFrameDelta = 1000 / 15;\n                Runner._frameDeltaFallback = 1000 / 60;\n                Runner._timeBufferMargin = 1.5;\n                Runner._elapsedNextEstimate = 1;\n                Runner._smoothingLowerBound = 0.1;\n                Runner._smoothingUpperBound = 0.9;\n                /**\n     * Creates a new Runner. \n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     */ Runner.create = function(options) {\n                    var defaults = {\n                        delta: 1000 / 60,\n                        frameDelta: null,\n                        frameDeltaSmoothing: true,\n                        frameDeltaSnapping: true,\n                        frameDeltaHistory: [],\n                        frameDeltaHistorySize: 100,\n                        frameRequestId: null,\n                        timeBuffer: 0,\n                        timeLastTick: null,\n                        maxUpdates: null,\n                        maxFrameTime: 1000 / 30,\n                        lastUpdatesDeferred: 0,\n                        enabled: true\n                    };\n                    var runner = Common.extend(defaults, options);\n                    // for temporary back compatibility only\n                    runner.fps = 0;\n                    return runner;\n                };\n                /**\n     * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method run\n     * @param {runner} runner\n     * @param {engine} [engine]\n     * @return {runner} runner\n     */ Runner.run = function(runner, engine) {\n                    // initial time buffer for the first frame\n                    runner.timeBuffer = Runner._frameDeltaFallback;\n                    (function onFrame(time) {\n                        runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n                        if (time && runner.enabled) {\n                            Runner.tick(runner, engine, time);\n                        }\n                    })();\n                    return runner;\n                };\n                /**\n     * Performs a single runner tick as used inside `Runner.run`.\n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */ Runner.tick = function(runner, engine, time) {\n                    var tickStartTime = Common.now(), engineDelta = runner.delta, updateCount = 0;\n                    // find frame delta time since last call\n                    var frameDelta = time - runner.timeLastTick;\n                    // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n                    if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n                        // reuse last accepted frame delta else fallback\n                        frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n                    }\n                    if (runner.frameDeltaSmoothing) {\n                        // record frame delta over a number of frames\n                        runner.frameDeltaHistory.push(frameDelta);\n                        runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n                        // sort frame delta history\n                        var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n                        // sample a central window to limit outliers\n                        var deltaHistoryWindow = runner.frameDeltaHistory.slice(deltaHistorySorted.length * Runner._smoothingLowerBound, deltaHistorySorted.length * Runner._smoothingUpperBound);\n                        // take the mean of the central window\n                        var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n                        frameDelta = frameDeltaSmoothed || frameDelta;\n                    }\n                    if (runner.frameDeltaSnapping) {\n                        // snap frame delta to the nearest 1 Hz\n                        frameDelta = 1000 / Math.round(1000 / frameDelta);\n                    }\n                    // update runner values for next call\n                    runner.frameDelta = frameDelta;\n                    runner.timeLastTick = time;\n                    // accumulate elapsed time\n                    runner.timeBuffer += runner.frameDelta;\n                    // limit time buffer size to a single frame of updates\n                    runner.timeBuffer = Common.clamp(runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin);\n                    // reset count of over budget updates\n                    runner.lastUpdatesDeferred = 0;\n                    // get max updates per frame\n                    var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n                    // create event object\n                    var event = {\n                        timestamp: engine.timing.timestamp\n                    };\n                    // tick events before update\n                    Events.trigger(runner, \"beforeTick\", event);\n                    Events.trigger(runner, \"tick\", event);\n                    var updateStartTime = Common.now();\n                    // simulate time elapsed between calls\n                    while(engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin){\n                        // update the engine\n                        Events.trigger(runner, \"beforeUpdate\", event);\n                        Engine.update(engine, engineDelta);\n                        Events.trigger(runner, \"afterUpdate\", event);\n                        // consume time simulated from buffer\n                        runner.timeBuffer -= engineDelta;\n                        updateCount += 1;\n                        // find elapsed time during this tick\n                        var elapsedTimeTotal = Common.now() - tickStartTime, elapsedTimeUpdates = Common.now() - updateStartTime, elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n                        // defer updates if over performance budgets for this frame\n                        if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n                            runner.lastUpdatesDeferred = Math.round(Math.max(0, runner.timeBuffer / engineDelta - Runner._timeBufferMargin));\n                            break;\n                        }\n                    }\n                    // track timing metrics\n                    engine.timing.lastUpdatesPerFrame = updateCount;\n                    // tick events after update\n                    Events.trigger(runner, \"afterTick\", event);\n                    // show useful warnings if needed\n                    if (runner.frameDeltaHistory.length >= 100) {\n                        if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n                            Common.warnOnce(\"Matter.Runner: runner reached runner.maxUpdates, see docs.\");\n                        } else if (runner.lastUpdatesDeferred) {\n                            Common.warnOnce(\"Matter.Runner: runner reached runner.maxFrameTime, see docs.\");\n                        }\n                        if (typeof runner.isFixed !== \"undefined\") {\n                            Common.warnOnce(\"Matter.Runner: runner.isFixed is now redundant, see docs.\");\n                        }\n                        if (runner.deltaMin || runner.deltaMax) {\n                            Common.warnOnce(\"Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.\");\n                        }\n                        if (runner.fps !== 0) {\n                            Common.warnOnce(\"Matter.Runner: runner.fps was replaced by runner.delta, see docs.\");\n                        }\n                    }\n                };\n                /**\n     * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n     * Alternatively to temporarily pause the runner, see `runner.enabled`.\n     * @method stop\n     * @param {runner} runner\n     */ Runner.stop = function(runner) {\n                    Runner._cancelNextFrame(runner);\n                };\n                /**\n     * Schedules the `callback` on this `runner` for the next animation frame.\n     * @private\n     * @method _onNextFrame\n     * @param {runner} runner\n     * @param {function} callback\n     * @return {number} frameRequestId\n     */ Runner._onNextFrame = function(runner, callback) {\n                    if ( true && window.requestAnimationFrame) {\n                        runner.frameRequestId = window.requestAnimationFrame(callback);\n                    } else {\n                        throw new Error(\"Matter.Runner: missing required global window.requestAnimationFrame.\");\n                    }\n                    return runner.frameRequestId;\n                };\n                /**\n     * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n     * @private\n     * @method _cancelNextFrame\n     * @param {runner} runner\n     */ Runner._cancelNextFrame = function(runner) {\n                    if ( true && window.cancelAnimationFrame) {\n                        window.cancelAnimationFrame(runner.frameRequestId);\n                    } else {\n                        throw new Error(\"Matter.Runner: missing required global window.cancelAnimationFrame.\");\n                    }\n                };\n                /**\n     * Returns the mean of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values.\n     */ var _mean = function(values) {\n                    var result = 0, valuesLength = values.length;\n                    for(var i = 0; i < valuesLength; i += 1){\n                        result += values[i];\n                    }\n                    return result / valuesLength || 0;\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired once at the start of the browser frame, before any engine updates.\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired once at the start of the browser frame, after `beforeTick`.\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired before each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired after each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n     * \n     * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n     * \n     * Smaller `delta` values provide higher quality results at the cost of performance.\n     * \n     * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n     * \n     * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n     * \n     * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n     * \n     * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n     * \n     * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n     * \n     * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n     * \n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */ /**\n     * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */ /**\n     * The accumulated time elapsed that has yet to be simulated in milliseconds.\n     * This value is clamped within certain limits (see `Runner.tick` code).\n     *\n     * @private\n     * @property timeBuffer\n     * @type number\n     * @default 0\n     */ /**\n     * The measured time elapsed between the last two browser frames measured in milliseconds.\n     * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n     *\n     * @readonly\n     * @property frameDelta\n     * @type number\n     */ /**\n     * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n     *\n     * @property frameDeltaSmoothing\n     * @type boolean\n     * @default true\n     */ /**\n     * Rounds measured browser frame delta to the nearest 1 Hz.\n     * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n     * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n     *\n     * @property frameDeltaSnapping\n     * @type boolean\n     * @default true\n     */ /**\n     * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n     * \n     * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n     * \n     * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n     * \n     * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n     * \n     * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n     * \n     * See also `runner.maxUpdates`.\n     *\n     * @property maxFrameTime\n     * @type number\n     * @default 1000 / 30\n     */ /**\n     * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n     * \n     * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n     * \n     * See also `runner.maxFrameTime`.\n     * \n     * @property maxUpdates\n     * @type number\n     * @default null\n     */ /**\n     * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n     *\n     * @private\n     * @property timeLastTick\n     * @type number\n     * @default 0\n     */ /**\n     * The id of the last call to `Runner._onNextFrame`.\n     *\n     * @private\n     * @property frameRequestId\n     * @type number\n     * @default null\n     */ })();\n        /***/ },\n        /* 28 */ /***/ function(module1, exports1, __nested_webpack_require_412547__) {\n            /**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/ var SAT = {};\n            module1.exports = SAT;\n            var Collision = __nested_webpack_require_412547__(8);\n            var Common = __nested_webpack_require_412547__(0);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */ SAT.collides = function(bodyA, bodyB) {\n                    return Collision.collides(bodyA, bodyB);\n                };\n                deprecated(SAT, \"collides\", \"SAT.collides ➤ replaced by Collision.collides\");\n            })();\n        /***/ },\n        /* 29 */ /***/ function(module1, exports1, __nested_webpack_require_413752__) {\n            /**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/ var Svg = {};\n            module1.exports = Svg;\n            var Bounds = __nested_webpack_require_413752__(1);\n            var Common = __nested_webpack_require_413752__(0);\n            (function() {\n                /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */ Svg.pathToVertices = function(path, sampleLength) {\n                    if ( true && !(\"SVGPathSeg\" in window)) {\n                        Common.warn(\"Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.\");\n                    }\n                    // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n                    var i, il, total, point, segment, segments, segmentsQueue, lastSegment, lastPoint, segmentIndex, points = [], lx, ly, length = 0, x = 0, y = 0;\n                    sampleLength = sampleLength || 15;\n                    var addPoint = function(px, py, pathSegType) {\n                        // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n                        var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n                        // when the last point doesn't equal the current point add the current point\n                        if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                            if (lastPoint && isRelative) {\n                                lx = lastPoint.x;\n                                ly = lastPoint.y;\n                            } else {\n                                lx = 0;\n                                ly = 0;\n                            }\n                            var point = {\n                                x: lx + px,\n                                y: ly + py\n                            };\n                            // set last point\n                            if (isRelative || !lastPoint) {\n                                lastPoint = point;\n                            }\n                            points.push(point);\n                            x = lx + px;\n                            y = ly + py;\n                        }\n                    };\n                    var addSegmentPoint = function(segment) {\n                        var segType = segment.pathSegTypeAsLetter.toUpperCase();\n                        // skip path ends\n                        if (segType === \"Z\") return;\n                        // map segment to x and y\n                        switch(segType){\n                            case \"M\":\n                            case \"L\":\n                            case \"T\":\n                            case \"C\":\n                            case \"S\":\n                            case \"Q\":\n                                x = segment.x;\n                                y = segment.y;\n                                break;\n                            case \"H\":\n                                x = segment.x;\n                                break;\n                            case \"V\":\n                                y = segment.y;\n                                break;\n                        }\n                        addPoint(x, y, segment.pathSegType);\n                    };\n                    // ensure path is absolute\n                    Svg._svgPathToAbsolute(path);\n                    // get total length\n                    total = path.getTotalLength();\n                    // queue segments\n                    segments = [];\n                    for(i = 0; i < path.pathSegList.numberOfItems; i += 1)segments.push(path.pathSegList.getItem(i));\n                    segmentsQueue = segments.concat();\n                    // sample through path\n                    while(length < total){\n                        // get segment at position\n                        segmentIndex = path.getPathSegAtLength(length);\n                        segment = segments[segmentIndex];\n                        // new segment\n                        if (segment != lastSegment) {\n                            while(segmentsQueue.length && segmentsQueue[0] != segment)addSegmentPoint(segmentsQueue.shift());\n                            lastSegment = segment;\n                        }\n                        // add points in between when curving\n                        // TODO: adaptive sampling\n                        switch(segment.pathSegTypeAsLetter.toUpperCase()){\n                            case \"C\":\n                            case \"T\":\n                            case \"S\":\n                            case \"Q\":\n                            case \"A\":\n                                point = path.getPointAtLength(length);\n                                addPoint(point.x, point.y, 0);\n                                break;\n                        }\n                        // increment by sample value\n                        length += sampleLength;\n                    }\n                    // add remaining segments not passed by sampling\n                    for(i = 0, il = segmentsQueue.length; i < il; ++i)addSegmentPoint(segmentsQueue[i]);\n                    return points;\n                };\n                Svg._svgPathToAbsolute = function(path) {\n                    // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n                    // Copyright (c) Gavin Kistner\n                    // http://phrogz.net/js/_ReuseLicense.txt\n                    // Modifications: tidy formatting and naming\n                    var x0, y0, x1, y1, x2, y2, segs = path.pathSegList, x = 0, y = 0, len = segs.numberOfItems;\n                    for(var i = 0; i < len; ++i){\n                        var seg = segs.getItem(i), segType = seg.pathSegTypeAsLetter;\n                        if (/[MLHVCSQTA]/.test(segType)) {\n                            if (\"x\" in seg) x = seg.x;\n                            if (\"y\" in seg) y = seg.y;\n                        } else {\n                            if (\"x1\" in seg) x1 = x + seg.x1;\n                            if (\"x2\" in seg) x2 = x + seg.x2;\n                            if (\"y1\" in seg) y1 = y + seg.y1;\n                            if (\"y2\" in seg) y2 = y + seg.y2;\n                            if (\"x\" in seg) x += seg.x;\n                            if (\"y\" in seg) y += seg.y;\n                            switch(segType){\n                                case \"m\":\n                                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                                    break;\n                                case \"l\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                                    break;\n                                case \"h\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                                    break;\n                                case \"v\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                                    break;\n                                case \"c\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                                    break;\n                                case \"s\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                                    break;\n                                case \"q\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                                    break;\n                                case \"t\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                                    break;\n                                case \"a\":\n                                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                                    break;\n                                case \"z\":\n                                case \"Z\":\n                                    x = x0;\n                                    y = y0;\n                                    break;\n                            }\n                        }\n                        if (segType == \"M\" || segType == \"m\") {\n                            x0 = x;\n                            y0 = y;\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 30 */ /***/ function(module1, exports1, __nested_webpack_require_423153__) {\n            /**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/ var World = {};\n            module1.exports = World;\n            var Composite = __nested_webpack_require_423153__(6);\n            var Common = __nested_webpack_require_423153__(0);\n            (function() {\n                /**\n     * See above, aliases for back compatibility only\n     */ World.create = Composite.create;\n                World.add = Composite.add;\n                World.remove = Composite.remove;\n                World.clear = Composite.clear;\n                World.addComposite = Composite.addComposite;\n                World.addBody = Composite.addBody;\n                World.addConstraint = Composite.addConstraint;\n            })();\n        /***/ }\n    ]);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/matter-js/build/matter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/link.js":
/*!********************************************!*\
  !*** ./node_modules/next/dist/api/link.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* reexport default from dynamic */ _client_link__WEBPACK_IMPORTED_MODULE_0___default.a; }\n/* harmony export */ });\n/* harmony import */ var _client_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/link */ \"(app-pages-browser)/./node_modules/next/dist/client/link.js\");\n/* harmony import */ var _client_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_link__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _client_link__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _client_link__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2xpbmsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlDO0FBQ1YsQ0FFL0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2xpbmsuanM/MTMwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi4uL2NsaWVudC9saW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi4vY2xpZW50L2xpbmtcIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGluay5qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/add-locale.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/client/add-locale.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst addLocale = function(path) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (false) {}\n    return path;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDBCQUEwQkMsbUJBQU9BLENBQUMsbUhBQTRCO0FBQ3BFLE1BQU1GLFlBQVksU0FBU0csSUFBSTtJQUMzQixJQUFJLElBQUlDLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsT0FBTyxJQUFJQyxNQUFNSixPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQU87UUFDdEdGLElBQUksQ0FBQ0UsT0FBTyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztJQUNwQztJQUNBLElBQUlDLEtBQStCLEVBQUUsRUFFcEM7SUFDRCxPQUFPUDtBQUNYO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFrQixPQUFPLEtBQUssY0FBZSxPQUFPbEIsUUFBUWtCLE9BQU8sS0FBSyxZQUFZbEIsUUFBUWtCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2xCLFFBQVFrQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLckIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRa0IsT0FBTyxFQUFFLGNBQWM7UUFBRWpCLE9BQU87SUFBSztJQUNuRUgsT0FBT3NCLE1BQU0sQ0FBQ3BCLFFBQVFrQixPQUFPLEVBQUVsQjtJQUMvQnFCLE9BQU9yQixPQUFPLEdBQUdBLFFBQVFrQixPQUFPO0FBQ2xDLEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2FkZC1sb2NhbGUuanM/ZTJkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZExvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkTG9jYWxlO1xuICAgIH1cbn0pO1xuY29uc3QgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBhZGRMb2NhbGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgZm9yKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKXtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIHJldHVybiAoMCwgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2gubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlXCIpLmFkZExvY2FsZShwYXRoLCAuLi5hcmdzKSk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRkTG9jYWxlIiwiX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2giLCJyZXF1aXJlIiwicGF0aCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9JMThOX1NVUFBPUlQiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/add-locale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return getDomainLocale;\n    }\n}));\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2dldC1kb21haW4tbG9jYWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCxtREFBa0Q7SUFDOUNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQywwQkFBMEJDLG1CQUFPQSxDQUFDLG1IQUE0QjtBQUNwRSxNQUFNQyxXQUFXQyxNQUFrQyxJQUFJO0FBQ3ZELFNBQVNKLGdCQUFnQk8sSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsYUFBYTtJQUN6RCxJQUFJTixLQUErQixFQUFFLEVBV3BDLE1BQU07UUFDSCxPQUFPO0lBQ1g7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPUixRQUFRMkIsT0FBTyxLQUFLLGNBQWUsT0FBTzNCLFFBQVEyQixPQUFPLEtBQUssWUFBWTNCLFFBQVEyQixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU8zQixRQUFRMkIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNySzlCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUTJCLE9BQU8sRUFBRSxjQUFjO1FBQUUxQixPQUFPO0lBQUs7SUFDbkVILE9BQU8rQixNQUFNLENBQUM3QixRQUFRMkIsT0FBTyxFQUFFM0I7SUFDL0I4QixPQUFPOUIsT0FBTyxHQUFHQSxRQUFRMkIsT0FBTztBQUNsQyxFQUVBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcz81YzI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RG9tYWluTG9jYWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXREb21haW5Mb2NhbGU7XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCBcIlwiO1xuZnVuY3Rpb24gZ2V0RG9tYWluTG9jYWxlKHBhdGgsIGxvY2FsZSwgbG9jYWxlcywgZG9tYWluTG9jYWxlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZUxvY2FsZVBhdGggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtbG9jYWxlLXBhdGhcIikubm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICAgICAgY29uc3QgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZShcIi4vZGV0ZWN0LWRvbWFpbi1sb2NhbGVcIikuZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbGUgfHwgbm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBcImh0dHBcIiArIChkb21haW4uaHR0cCA/IFwiXCIgOiBcInNcIikgKyBcIjovL1wiO1xuICAgICAgICAgICAgY29uc3QgZmluYWxMb2NhbGUgPSB0YXJnZXQgPT09IGRvbWFpbi5kZWZhdWx0TG9jYWxlID8gXCJcIiA6IFwiL1wiICsgdGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwcm90byArIGRvbWFpbi5kb21haW4gKyAoMCwgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2gubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKFwiXCIgKyBiYXNlUGF0aCArIGZpbmFsTG9jYWxlICsgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJnZXREb21haW5Mb2NhbGUiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsInJlcXVpcmUiLCJiYXNlUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwicGF0aCIsImxvY2FsZSIsImxvY2FsZXMiLCJkb21haW5Mb2NhbGVzIiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJ0YXJnZXQiLCJkZXRlY3RlZExvY2FsZSIsImRvbWFpbiIsInVuZGVmaW5lZCIsInByb3RvIiwiaHR0cCIsImZpbmFsTG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar _s = $RefreshSig$();\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _resolvehref = __webpack_require__(/*! ./resolve-href */ \"(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(app-pages-browser)/./node_modules/next/dist/client/add-locale.js\");\nconst _routercontextsharedruntime = __webpack_require__(/*! ../shared/lib/router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\");\nconst _approutercontextsharedruntime = __webpack_require__(/*! ../shared/lib/app-router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js\");\nconst _useintersection = __webpack_require__(/*! ./use-intersection */ \"(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js\");\nconst _getdomainlocale = __webpack_require__(/*! ./get-domain-locale */ \"(app-pages-browser)/./node_modules/next/dist/client/get-domain-locale.js\");\nconst _addbasepath = __webpack_require__(/*! ./add-base-path */ \"(app-pages-browser)/./node_modules/next/dist/client/add-base-path.js\");\nconst _routerreducertypes = __webpack_require__(/*! ./components/router-reducer/router-reducer-types */ \"(app-pages-browser)/./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options, appOptions, isAppRouter) {\n    if (false) {}\n    // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n        return;\n    }\n    // We should only dedupe requests when experimental.optimisticClientCache is\n    // disabled.\n    if (!options.bypassPrefetchedCheck) {\n        const locale = typeof options.locale !== \"undefined\" ? options.locale : \"locale\" in router ? router.locale : undefined;\n        const prefetchedKey = href + \"%\" + as + \"%\" + locale;\n        // If we've already fetched the key, then don't prefetch it again!\n        if (prefetched.has(prefetchedKey)) {\n            return;\n        }\n        // Mark this URL as prefetched.\n        prefetched.add(prefetchedKey);\n    }\n    const prefetchPromise = isAppRouter ? router.prefetch(href, appOptions) : router.prefetch(href, as, options);\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(prefetchPromise).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n}\nfunction isModifiedEvent(event) {\n    const eventTarget = event.currentTarget;\n    const target = eventTarget.getAttribute(\"target\");\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download\n    event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter) {\n    const { nodeName } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an NextRouter instance it will have `beforePopState`\n        const routerScroll = scroll != null ? scroll : true;\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll: routerScroll\n            });\n        } else {\n            router[replace ? \"replace\" : \"push\"](as || href, {\n                scroll: routerScroll\n            });\n        }\n    };\n    if (isAppRouter) {\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n    if (typeof urlObjOrString === \"string\") {\n        return urlObjOrString;\n    }\n    return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * React Component that enables client-side transitions between routes.\n */ const Link = /*#__PURE__*/ _s(_react.default.forwardRef(_c = _s(function LinkComponent(props, forwardedRef) {\n    _s();\n    let children;\n    const { href: hrefProp, as: asProp, children: childrenProp, prefetch: prefetchProp = null, passHref, replace, shallow, scroll, locale, onClick, onMouseEnter: onMouseEnterProp, onTouchStart: onTouchStartProp, legacyBehavior = false, ...restProps } = props;\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ (0, _jsxruntime.jsx)(\"a\", {\n            children: children\n        });\n    }\n    const pagesRouter = _react.default.useContext(_routercontextsharedruntime.RouterContext);\n    const appRouter = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);\n    const router = pagesRouter != null ? pagesRouter : appRouter;\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    const prefetchEnabled = prefetchProp !== false;\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */ const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;\n    if (true) {\n        function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\" + args.key + \"` expects a \" + args.expected + \" in `<Link>`, but got `\" + args.actual + \"` instead.\" + ( true ? \"\\nOpen your browser's console to view the Component stack trace.\" : 0));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current && !isAppRouter) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    if (true) {\n        if (isAppRouter && !asProp) {\n            let href;\n            if (typeof hrefProp === \"string\") {\n                href = hrefProp;\n            } else if (typeof hrefProp === \"object\" && typeof hrefProp.pathname === \"string\") {\n                href = hrefProp.pathname;\n            }\n            if (href) {\n                const hasDynamicSegment = href.split(\"/\").some((segment)=>segment.startsWith(\"[\") && segment.endsWith(\"]\"));\n                if (hasDynamicSegment) {\n                    throw new Error(\"Dynamic href `\" + href + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n                }\n            }\n        }\n    }\n    const { href, as } = _react.default.useMemo(()=>{\n        if (!pagesRouter) {\n            const resolvedHref = formatStringOrUrl(hrefProp);\n            return {\n                href: resolvedHref,\n                as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n            };\n        }\n        const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        pagesRouter,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link');\n            }\n            if (onMouseEnterProp) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\" + hrefProp + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\" + hrefProp + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + ( true ? \" \\nOpen your browser's console to view the Component stack trace.\" : 0));\n            }\n        } else {}\n    } else {\n        if (true) {\n            if ((children == null ? void 0 : children.type) === \"a\") {\n                throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n            }\n        }\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    // Prefetch the URL if we haven't already and it's visible.\n    _react.default.useEffect(()=>{\n        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n        if (true) {\n            return;\n        }\n        if (!router) {\n            return;\n        }\n        // If we don't need to prefetch the URL, don't do prefetch.\n        if (!isVisible || !prefetchEnabled) {\n            return;\n        }\n        // Prefetch the URL.\n        prefetch(router, href, as, {\n            locale\n        }, {\n            kind: appPrefetchKind\n        }, isAppRouter);\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        prefetchEnabled,\n        pagesRouter == null ? void 0 : pagesRouter.locale,\n        router,\n        isAppRouter,\n        appPrefetchKind\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick (e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (e.defaultPrevented) {\n                return;\n            }\n            linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter);\n        },\n        onMouseEnter (e) {\n            if (!legacyBehavior && typeof onMouseEnterProp === \"function\") {\n                onMouseEnterProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if (!router) {\n                return;\n            }\n            if ((!prefetchEnabled || \"development\" === \"development\") && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        },\n        onTouchStart (e) {\n            if (!legacyBehavior && typeof onTouchStartProp === \"function\") {\n                onTouchStartProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if ((0, _utils.isAbsoluteUrl)(as)) {\n        childProps.href = as;\n    } else if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n        childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ (0, _jsxruntime.jsx)(\"a\", {\n        ...restProps,\n        ...childProps,\n        children: children\n    });\n}, \"wKD5mb5mk47bkaStGb/Fvd6RWZE=\")), \"wKD5mb5mk47bkaStGb/Fvd6RWZE=\");\n_c1 = Link;\nconst _default = Link;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Link$_react.default.forwardRef\");\n$RefreshReg$(_c1, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2xpbmsuanMiLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsMkJBQTJCQyxtQkFBT0EsQ0FBQyxnSUFBeUM7QUFDbEYsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMscUdBQW1CO0FBQy9DLE1BQU1FLFNBQVMsV0FBVyxHQUFHSCx5QkFBeUJJLENBQUMsQ0FBQ0gsbUJBQU9BLENBQUMsbUZBQU87QUFDdkUsTUFBTUksZUFBZUosbUJBQU9BLENBQUMsMkZBQWdCO0FBQzdDLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDLHFJQUF5QztBQUNyRSxNQUFNTSxhQUFhTixtQkFBT0EsQ0FBQyxpSUFBdUM7QUFDbEUsTUFBTU8sU0FBU1AsbUJBQU9BLENBQUMsNkZBQXFCO0FBQzVDLE1BQU1RLGFBQWFSLG1CQUFPQSxDQUFDLHVGQUFjO0FBQ3pDLE1BQU1TLDhCQUE4QlQsbUJBQU9BLENBQUMsNklBQTZDO0FBQ3pGLE1BQU1VLGlDQUFpQ1YsbUJBQU9BLENBQUMscUpBQWlEO0FBQ2hHLE1BQU1XLG1CQUFtQlgsbUJBQU9BLENBQUMsbUdBQW9CO0FBQ3JELE1BQU1ZLG1CQUFtQlosbUJBQU9BLENBQUMscUdBQXFCO0FBQ3RELE1BQU1hLGVBQWViLG1CQUFPQSxDQUFDLDZGQUFpQjtBQUM5QyxNQUFNYyxzQkFBc0JkLG1CQUFPQSxDQUFDLCtKQUFrRDtBQUN0RixNQUFNZSxhQUFhLElBQUlDO0FBQ3ZCLFNBQVNDLFNBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxXQUFXO0lBQ2hFLElBQUksS0FBNkIsRUFBRSxFQUVsQztJQUNELGdK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LE9BQU8sRUFBRSxjQUFjO1FBQUVqRSxPQUFPO0lBQUs7SUFDbkVILE9BQU9vSyxNQUFNLENBQUNsSyxRQUFRa0UsT0FBTyxFQUFFbEU7SUFDL0JtSyxPQUFPbkssT0FBTyxHQUFHQSxRQUFRa0UsT0FBTztBQUNsQyxFQUVBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9saW5rLmpzP2U0ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2RlZmF1bHQ7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XCIpO1xuY29uc3QgX2pzeHJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfcmVhY3QgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5fKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBfcmVzb2x2ZWhyZWYgPSByZXF1aXJlKFwiLi9yZXNvbHZlLWhyZWZcIik7XG5jb25zdCBfaXNsb2NhbHVybCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pcy1sb2NhbC11cmxcIik7XG5jb25zdCBfZm9ybWF0dXJsID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC11cmxcIik7XG5jb25zdCBfdXRpbHMgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi91dGlsc1wiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi9hZGQtbG9jYWxlXCIpO1xuY29uc3QgX3JvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWVcIik7XG5jb25zdCBfYXBwcm91dGVyY29udGV4dHNoYXJlZHJ1bnRpbWUgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9hcHAtcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWVcIik7XG5jb25zdCBfdXNlaW50ZXJzZWN0aW9uID0gcmVxdWlyZShcIi4vdXNlLWludGVyc2VjdGlvblwiKTtcbmNvbnN0IF9nZXRkb21haW5sb2NhbGUgPSByZXF1aXJlKFwiLi9nZXQtZG9tYWluLWxvY2FsZVwiKTtcbmNvbnN0IF9hZGRiYXNlcGF0aCA9IHJlcXVpcmUoXCIuL2FkZC1iYXNlLXBhdGhcIik7XG5jb25zdCBfcm91dGVycmVkdWNlcnR5cGVzID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9yb3V0ZXItcmVkdWNlci9yb3V0ZXItcmVkdWNlci10eXBlc1wiKTtcbmNvbnN0IHByZWZldGNoZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBwcmVmZXRjaChyb3V0ZXIsIGhyZWYsIGFzLCBvcHRpb25zLCBhcHBPcHRpb25zLCBpc0FwcFJvdXRlcikge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYXBwLXJvdXRlciBzdXBwb3J0cyBleHRlcm5hbCB1cmxzIG91dCBvZiB0aGUgYm94IHNvIGl0IHNob3VsZG4ndCBzaG9ydC1jaXJjdWl0IGhlcmUgYXMgc3VwcG9ydCBmb3IgZS5nLiBgcmVwbGFjZWAgaXMgYWRkZWQgaW4gdGhlIGFwcC1yb3V0ZXIuXG4gICAgaWYgKCFpc0FwcFJvdXRlciAmJiAhKDAsIF9pc2xvY2FsdXJsLmlzTG9jYWxVUkwpKGhyZWYpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2Ugc2hvdWxkIG9ubHkgZGVkdXBlIHJlcXVlc3RzIHdoZW4gZXhwZXJpbWVudGFsLm9wdGltaXN0aWNDbGllbnRDYWNoZSBpc1xuICAgIC8vIGRpc2FibGVkLlxuICAgIGlmICghb3B0aW9ucy5ieXBhc3NQcmVmZXRjaGVkQ2hlY2spIHtcbiAgICAgICAgY29uc3QgbG9jYWxlID0gLy8gTGV0IHRoZSBsaW5rJ3MgbG9jYWxlIHByb3Agb3ZlcnJpZGUgdGhlIGRlZmF1bHQgcm91dGVyIGxvY2FsZS5cbiAgICAgICAgdHlwZW9mIG9wdGlvbnMubG9jYWxlICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5sb2NhbGUgOiBcImxvY2FsZVwiIGluIHJvdXRlciA/IHJvdXRlci5sb2NhbGUgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHByZWZldGNoZWRLZXkgPSBocmVmICsgXCIlXCIgKyBhcyArIFwiJVwiICsgbG9jYWxlO1xuICAgICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGZldGNoZWQgdGhlIGtleSwgdGhlbiBkb24ndCBwcmVmZXRjaCBpdCBhZ2FpbiFcbiAgICAgICAgaWYgKHByZWZldGNoZWQuaGFzKHByZWZldGNoZWRLZXkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFyayB0aGlzIFVSTCBhcyBwcmVmZXRjaGVkLlxuICAgICAgICBwcmVmZXRjaGVkLmFkZChwcmVmZXRjaGVkS2V5KTtcbiAgICB9XG4gICAgY29uc3QgcHJlZmV0Y2hQcm9taXNlID0gaXNBcHBSb3V0ZXIgPyByb3V0ZXIucHJlZmV0Y2goaHJlZiwgYXBwT3B0aW9ucykgOiByb3V0ZXIucHJlZmV0Y2goaHJlZiwgYXMsIG9wdGlvbnMpO1xuICAgIC8vIFByZWZldGNoIHRoZSBKU09OIHBhZ2UgaWYgYXNrZWQgKG9ubHkgaW4gdGhlIGNsaWVudClcbiAgICAvLyBXZSBuZWVkIHRvIGhhbmRsZSBhIHByZWZldGNoIGVycm9yIGhlcmUgc2luY2Ugd2UgbWF5IGJlXG4gICAgLy8gbG9hZGluZyB3aXRoIHByaW9yaXR5IHdoaWNoIGNhbiByZWplY3QgYnV0IHdlIGRvbid0XG4gICAgLy8gd2FudCB0byBmb3JjZSBuYXZpZ2F0aW9uIHNpbmNlIHRoaXMgaXMgb25seSBhIHByZWZldGNoXG4gICAgUHJvbWlzZS5yZXNvbHZlKHByZWZldGNoUHJvbWlzZSkuY2F0Y2goKGVycik9PntcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgLy8gcmV0aHJvdyB0byBzaG93IGludmFsaWQgVVJMIGVycm9yc1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCBldmVudFRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuICAgIHJldHVybiB0YXJnZXQgJiYgdGFyZ2V0ICE9PSBcIl9zZWxmXCIgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmFsdEtleSB8fCAvLyB0cmlnZ2VycyByZXNvdXJjZSBkb3dubG9hZFxuICAgIGV2ZW50Lm5hdGl2ZUV2ZW50ICYmIGV2ZW50Lm5hdGl2ZUV2ZW50LndoaWNoID09PSAyO1xufVxuZnVuY3Rpb24gbGlua0NsaWNrZWQoZSwgcm91dGVyLCBocmVmLCBhcywgcmVwbGFjZSwgc2hhbGxvdywgc2Nyb2xsLCBsb2NhbGUsIGlzQXBwUm91dGVyKSB7XG4gICAgY29uc3QgeyBub2RlTmFtZSB9ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgIC8vIGFuY2hvcnMgaW5zaWRlIGFuIHN2ZyBoYXZlIGEgbG93ZXJjYXNlIG5vZGVOYW1lXG4gICAgY29uc3QgaXNBbmNob3JOb2RlTmFtZSA9IG5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IFwiQVwiO1xuICAgIGlmIChpc0FuY2hvck5vZGVOYW1lICYmIChpc01vZGlmaWVkRXZlbnQoZSkgfHwgLy8gYXBwLXJvdXRlciBzdXBwb3J0cyBleHRlcm5hbCB1cmxzIG91dCBvZiB0aGUgYm94IHNvIGl0IHNob3VsZG4ndCBzaG9ydC1jaXJjdWl0IGhlcmUgYXMgc3VwcG9ydCBmb3IgZS5nLiBgcmVwbGFjZWAgaXMgYWRkZWQgaW4gdGhlIGFwcC1yb3V0ZXIuXG4gICAgIWlzQXBwUm91dGVyICYmICEoMCwgX2lzbG9jYWx1cmwuaXNMb2NhbFVSTCkoaHJlZikpKSB7XG4gICAgICAgIC8vIGlnbm9yZSBjbGljayBmb3IgYnJvd3NlcuKAmXMgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBuYXZpZ2F0ZSA9ICgpPT57XG4gICAgICAgIC8vIElmIHRoZSByb3V0ZXIgaXMgYW4gTmV4dFJvdXRlciBpbnN0YW5jZSBpdCB3aWxsIGhhdmUgYGJlZm9yZVBvcFN0YXRlYFxuICAgICAgICBjb25zdCByb3V0ZXJTY3JvbGwgPSBzY3JvbGwgIT0gbnVsbCA/IHNjcm9sbCA6IHRydWU7XG4gICAgICAgIGlmIChcImJlZm9yZVBvcFN0YXRlXCIgaW4gcm91dGVyKSB7XG4gICAgICAgICAgICByb3V0ZXJbcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCJdKGhyZWYsIGFzLCB7XG4gICAgICAgICAgICAgICAgc2hhbGxvdyxcbiAgICAgICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiByb3V0ZXJTY3JvbGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm91dGVyW3JlcGxhY2UgPyBcInJlcGxhY2VcIiA6IFwicHVzaFwiXShhcyB8fCBocmVmLCB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsOiByb3V0ZXJTY3JvbGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNBcHBSb3V0ZXIpIHtcbiAgICAgICAgX3JlYWN0LmRlZmF1bHQuc3RhcnRUcmFuc2l0aW9uKG5hdmlnYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdFN0cmluZ09yVXJsKHVybE9iak9yU3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiB1cmxPYmpPclN0cmluZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdXJsT2JqT3JTdHJpbmc7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2Zvcm1hdHVybC5mb3JtYXRVcmwpKHVybE9iak9yU3RyaW5nKTtcbn1cbi8qKlxuICogUmVhY3QgQ29tcG9uZW50IHRoYXQgZW5hYmxlcyBjbGllbnQtc2lkZSB0cmFuc2l0aW9ucyBiZXR3ZWVuIHJvdXRlcy5cbiAqLyBjb25zdCBMaW5rID0gLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtDb21wb25lbnQocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICAgIGxldCBjaGlsZHJlbjtcbiAgICBjb25zdCB7IGhyZWY6IGhyZWZQcm9wLCBhczogYXNQcm9wLCBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLCBwcmVmZXRjaDogcHJlZmV0Y2hQcm9wID0gbnVsbCwgcGFzc0hyZWYsIHJlcGxhY2UsIHNoYWxsb3csIHNjcm9sbCwgbG9jYWxlLCBvbkNsaWNrLCBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlclByb3AsIG9uVG91Y2hTdGFydDogb25Ub3VjaFN0YXJ0UHJvcCwgbGVnYWN5QmVoYXZpb3IgPSBmYWxzZSwgLi4ucmVzdFByb3BzIH0gPSBwcm9wcztcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuUHJvcDtcbiAgICBpZiAobGVnYWN5QmVoYXZpb3IgJiYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgY2hpbGRyZW4gPT09IFwibnVtYmVyXCIpKSB7XG4gICAgICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qLyAoMCwgX2pzeHJ1bnRpbWUuanN4KShcImFcIiwge1xuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBwYWdlc1JvdXRlciA9IF9yZWFjdC5kZWZhdWx0LnVzZUNvbnRleHQoX3JvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lLlJvdXRlckNvbnRleHQpO1xuICAgIGNvbnN0IGFwcFJvdXRlciA9IF9yZWFjdC5kZWZhdWx0LnVzZUNvbnRleHQoX2FwcHJvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lLkFwcFJvdXRlckNvbnRleHQpO1xuICAgIGNvbnN0IHJvdXRlciA9IHBhZ2VzUm91dGVyICE9IG51bGwgPyBwYWdlc1JvdXRlciA6IGFwcFJvdXRlcjtcbiAgICAvLyBXZSdyZSBpbiB0aGUgYXBwIGRpcmVjdG9yeSBpZiB0aGVyZSBpcyBubyBwYWdlcyByb3V0ZXIuXG4gICAgY29uc3QgaXNBcHBSb3V0ZXIgPSAhcGFnZXNSb3V0ZXI7XG4gICAgY29uc3QgcHJlZmV0Y2hFbmFibGVkID0gcHJlZmV0Y2hQcm9wICE9PSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBUaGUgcG9zc2libGUgc3RhdGVzIGZvciBwcmVmZXRjaCBhcmU6XG4gICAgICogLSBudWxsOiB0aGlzIGlzIHRoZSBkZWZhdWx0IFwiYXV0b1wiIG1vZGUsIHdoZXJlIHdlIHdpbGwgcHJlZmV0Y2ggcGFydGlhbGx5IGlmIHRoZSBsaW5rIGlzIGluIHRoZSB2aWV3cG9ydFxuICAgICAqIC0gdHJ1ZTogd2Ugd2lsbCBwcmVmZXRjaCBpZiB0aGUgbGluayBpcyB2aXNpYmxlIGFuZCBwcmVmZXRjaCB0aGUgZnVsbCBwYWdlLCBub3QganVzdCBwYXJ0aWFsbHlcbiAgICAgKiAtIGZhbHNlOiB3ZSB3aWxsIG5vdCBwcmVmZXRjaCBpZiBpbiB0aGUgdmlld3BvcnQgYXQgYWxsXG4gICAgICovIGNvbnN0IGFwcFByZWZldGNoS2luZCA9IHByZWZldGNoUHJvcCA9PT0gbnVsbCA/IF9yb3V0ZXJyZWR1Y2VydHlwZXMuUHJlZmV0Y2hLaW5kLkFVVE8gOiBfcm91dGVycmVkdWNlcnR5cGVzLlByZWZldGNoS2luZC5GVUxMO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlUHJvcEVycm9yKGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJGYWlsZWQgcHJvcCB0eXBlOiBUaGUgcHJvcCBgXCIgKyBhcmdzLmtleSArIFwiYCBleHBlY3RzIGEgXCIgKyBhcmdzLmV4cGVjdGVkICsgXCIgaW4gYDxMaW5rPmAsIGJ1dCBnb3QgYFwiICsgYXJncy5hY3R1YWwgKyBcImAgaW5zdGVhZC5cIiArICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gXCJcXG5PcGVuIHlvdXIgYnJvd3NlcidzIGNvbnNvbGUgdG8gdmlldyB0aGUgQ29tcG9uZW50IHN0YWNrIHRyYWNlLlwiIDogXCJcIikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFR5cGVTY3JpcHQgdHJpY2sgZm9yIHR5cGUtZ3VhcmRpbmc6XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkUHJvcHNHdWFyZCA9IHtcbiAgICAgICAgICAgIGhyZWY6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVxdWlyZWRQcm9wcyA9IE9iamVjdC5rZXlzKHJlcXVpcmVkUHJvcHNHdWFyZCk7XG4gICAgICAgIHJlcXVpcmVkUHJvcHMuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJocmVmXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNba2V5XSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wc1trZXldICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBwcm9wc1trZXldICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogXCJgc3RyaW5nYCBvciBgb2JqZWN0YFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiBwcm9wc1trZXldID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2YgcHJvcHNba2V5XVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQgdHJpY2sgZm9yIHR5cGUtZ3VhcmRpbmc6XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICAgICAgICAgIGNvbnN0IF8gPSBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgICAgICBjb25zdCBvcHRpb25hbFByb3BzR3VhcmQgPSB7XG4gICAgICAgICAgICBhczogdHJ1ZSxcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzY3JvbGw6IHRydWUsXG4gICAgICAgICAgICBzaGFsbG93OiB0cnVlLFxuICAgICAgICAgICAgcGFzc0hyZWY6IHRydWUsXG4gICAgICAgICAgICBwcmVmZXRjaDogdHJ1ZSxcbiAgICAgICAgICAgIGxvY2FsZTogdHJ1ZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRydWUsXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRydWUsXG4gICAgICAgICAgICBsZWdhY3lCZWhhdmlvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvcHRpb25hbFByb3BzID0gT2JqZWN0LmtleXMob3B0aW9uYWxQcm9wc0d1YXJkKTtcbiAgICAgICAgb3B0aW9uYWxQcm9wcy5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBjb25zdCB2YWxUeXBlID0gdHlwZW9mIHByb3BzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcImFzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNba2V5XSAmJiB2YWxUeXBlICE9PSBcInN0cmluZ1wiICYmIHZhbFR5cGUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUHJvcEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImBzdHJpbmdgIG9yIGBvYmplY3RgXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IHZhbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwibG9jYWxlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNba2V5XSAmJiB2YWxUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogXCJgc3RyaW5nYFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiB2YWxUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIm9uQ2xpY2tcIiB8fCBrZXkgPT09IFwib25Nb3VzZUVudGVyXCIgfHwga2V5ID09PSBcIm9uVG91Y2hTdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzW2tleV0gJiYgdmFsVHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVByb3BFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZDogXCJgZnVuY3Rpb25gXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IHZhbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwicmVwbGFjZVwiIHx8IGtleSA9PT0gXCJzY3JvbGxcIiB8fCBrZXkgPT09IFwic2hhbGxvd1wiIHx8IGtleSA9PT0gXCJwYXNzSHJlZlwiIHx8IGtleSA9PT0gXCJwcmVmZXRjaFwiIHx8IGtleSA9PT0gXCJsZWdhY3lCZWhhdmlvclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzW2tleV0gIT0gbnVsbCAmJiB2YWxUeXBlICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVQcm9wRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiYGJvb2xlYW5gXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IHZhbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUeXBlU2NyaXB0IHRyaWNrIGZvciB0eXBlLWd1YXJkaW5nOlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAgICAgICBjb25zdCBfID0ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhpcyBob29rIGlzIGluIGEgY29uZGl0aW9uYWwgYnV0IHRoYXQgaXMgb2sgYmVjYXVzZSBgcHJvY2Vzcy5lbnYuTk9ERV9FTlZgIG5ldmVyIGNoYW5nZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICAgIGNvbnN0IGhhc1dhcm5lZCA9IF9yZWFjdC5kZWZhdWx0LnVzZVJlZihmYWxzZSk7XG4gICAgICAgIGlmIChwcm9wcy5wcmVmZXRjaCAmJiAhaGFzV2FybmVkLmN1cnJlbnQgJiYgIWlzQXBwUm91dGVyKSB7XG4gICAgICAgICAgICBoYXNXYXJuZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJOZXh0LmpzIGF1dG8tcHJlZmV0Y2hlcyBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIHZpZXdwb3J0LiBUaGUgcHJlZmV0Y2ggYXR0cmlidXRlIGlzIG5vIGxvbmdlciBuZWVkZWQuIE1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL3ByZWZldGNoLXRydWUtZGVwcmVjYXRlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGlmIChpc0FwcFJvdXRlciAmJiAhYXNQcm9wKSB7XG4gICAgICAgICAgICBsZXQgaHJlZjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHJlZlByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBocmVmID0gaHJlZlByb3A7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBocmVmUHJvcCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaHJlZlByb3AucGF0aG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBocmVmID0gaHJlZlByb3AucGF0aG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0R5bmFtaWNTZWdtZW50ID0gaHJlZi5zcGxpdChcIi9cIikuc29tZSgoc2VnbWVudCk9PnNlZ21lbnQuc3RhcnRzV2l0aChcIltcIikgJiYgc2VnbWVudC5lbmRzV2l0aChcIl1cIikpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNEeW5hbWljU2VnbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEeW5hbWljIGhyZWYgYFwiICsgaHJlZiArIFwiYCBmb3VuZCBpbiA8TGluaz4gd2hpbGUgdXNpbmcgdGhlIGAvYXBwYCByb3V0ZXIsIHRoaXMgaXMgbm90IHN1cHBvcnRlZC4gUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9hcHAtZGlyLWR5bmFtaWMtaHJlZlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgeyBocmVmLCBhcyB9ID0gX3JlYWN0LmRlZmF1bHQudXNlTWVtbygoKT0+e1xuICAgICAgICBpZiAoIXBhZ2VzUm91dGVyKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZEhyZWYgPSBmb3JtYXRTdHJpbmdPclVybChocmVmUHJvcCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGhyZWY6IHJlc29sdmVkSHJlZixcbiAgICAgICAgICAgICAgICBhczogYXNQcm9wID8gZm9ybWF0U3RyaW5nT3JVcmwoYXNQcm9wKSA6IHJlc29sdmVkSHJlZlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbcmVzb2x2ZWRIcmVmLCByZXNvbHZlZEFzXSA9ICgwLCBfcmVzb2x2ZWhyZWYucmVzb2x2ZUhyZWYpKHBhZ2VzUm91dGVyLCBocmVmUHJvcCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBocmVmOiByZXNvbHZlZEhyZWYsXG4gICAgICAgICAgICBhczogYXNQcm9wID8gKDAsIF9yZXNvbHZlaHJlZi5yZXNvbHZlSHJlZikocGFnZXNSb3V0ZXIsIGFzUHJvcCkgOiByZXNvbHZlZEFzIHx8IHJlc29sdmVkSHJlZlxuICAgICAgICB9O1xuICAgIH0sIFtcbiAgICAgICAgcGFnZXNSb3V0ZXIsXG4gICAgICAgIGhyZWZQcm9wLFxuICAgICAgICBhc1Byb3BcbiAgICBdKTtcbiAgICBjb25zdCBwcmV2aW91c0hyZWYgPSBfcmVhY3QuZGVmYXVsdC51c2VSZWYoaHJlZik7XG4gICAgY29uc3QgcHJldmlvdXNBcyA9IF9yZWFjdC5kZWZhdWx0LnVzZVJlZihhcyk7XG4gICAgLy8gVGhpcyB3aWxsIHJldHVybiB0aGUgZmlyc3QgY2hpbGQsIGlmIG11bHRpcGxlIGFyZSBwcm92aWRlZCBpdCB3aWxsIHRocm93IGFuIGVycm9yXG4gICAgbGV0IGNoaWxkO1xuICAgIGlmIChsZWdhY3lCZWhhdmlvcikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1wib25DbGlja1wiIHdhcyBwYXNzZWQgdG8gPExpbms+IHdpdGggYGhyZWZgIG9mIGAnICsgaHJlZlByb3AgKyAnYCBidXQgXCJsZWdhY3lCZWhhdmlvclwiIHdhcyBzZXQuIFRoZSBsZWdhY3kgYmVoYXZpb3IgcmVxdWlyZXMgb25DbGljayBiZSBzZXQgb24gdGhlIGNoaWxkIG9mIG5leHQvbGluaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uTW91c2VFbnRlclByb3ApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1wib25Nb3VzZUVudGVyXCIgd2FzIHBhc3NlZCB0byA8TGluaz4gd2l0aCBgaHJlZmAgb2YgYCcgKyBocmVmUHJvcCArICdgIGJ1dCBcImxlZ2FjeUJlaGF2aW9yXCIgd2FzIHNldC4gVGhlIGxlZ2FjeSBiZWhhdmlvciByZXF1aXJlcyBvbk1vdXNlRW50ZXIgYmUgc2V0IG9uIHRoZSBjaGlsZCBvZiBuZXh0L2xpbmsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2hpbGRyZW4gd2VyZSBwYXNzZWQgdG8gPExpbms+IHdpdGggYGhyZWZgIG9mIGBcIiArIGhyZWZQcm9wICsgXCJgIGJ1dCBvbmUgY2hpbGQgaXMgcmVxdWlyZWQgaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbGluay1uby1jaGlsZHJlblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgY2hpbGRyZW4gd2VyZSBwYXNzZWQgdG8gPExpbms+IHdpdGggYGhyZWZgIG9mIGBcIiArIGhyZWZQcm9wICsgXCJgIGJ1dCBvbmx5IG9uZSBjaGlsZCBpcyBzdXBwb3J0ZWQgaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbGluay1tdWx0aXBsZS1jaGlsZHJlblwiICsgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyBcIiBcXG5PcGVuIHlvdXIgYnJvd3NlcidzIGNvbnNvbGUgdG8gdmlldyB0aGUgQ29tcG9uZW50IHN0YWNrIHRyYWNlLlwiIDogXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgICAgICAgICBpZiAoKGNoaWxkcmVuID09IG51bGwgPyB2b2lkIDAgOiBjaGlsZHJlbi50eXBlKSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIDxMaW5rPiB3aXRoIDxhPiBjaGlsZC4gUGxlYXNlIHJlbW92ZSA8YT4gb3IgdXNlIDxMaW5rIGxlZ2FjeUJlaGF2aW9yPi5cXG5MZWFybiBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9pbnZhbGlkLW5ldy1saW5rLXdpdGgtZXh0cmEtYW5jaG9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkUmVmID0gbGVnYWN5QmVoYXZpb3IgPyBjaGlsZCAmJiB0eXBlb2YgY2hpbGQgPT09IFwib2JqZWN0XCIgJiYgY2hpbGQucmVmIDogZm9yd2FyZGVkUmVmO1xuICAgIGNvbnN0IFtzZXRJbnRlcnNlY3Rpb25SZWYsIGlzVmlzaWJsZSwgcmVzZXRWaXNpYmxlXSA9ICgwLCBfdXNlaW50ZXJzZWN0aW9uLnVzZUludGVyc2VjdGlvbikoe1xuICAgICAgICByb290TWFyZ2luOiBcIjIwMHB4XCJcbiAgICB9KTtcbiAgICBjb25zdCBzZXRSZWYgPSBfcmVhY3QuZGVmYXVsdC51c2VDYWxsYmFjaygoZWwpPT57XG4gICAgICAgIC8vIEJlZm9yZSB0aGUgbGluayBnZXR0aW5nIG9ic2VydmVkLCBjaGVjayBpZiB2aXNpYmxlIHN0YXRlIG5lZWQgdG8gYmUgcmVzZXRcbiAgICAgICAgaWYgKHByZXZpb3VzQXMuY3VycmVudCAhPT0gYXMgfHwgcHJldmlvdXNIcmVmLmN1cnJlbnQgIT09IGhyZWYpIHtcbiAgICAgICAgICAgIHJlc2V0VmlzaWJsZSgpO1xuICAgICAgICAgICAgcHJldmlvdXNBcy5jdXJyZW50ID0gYXM7XG4gICAgICAgICAgICBwcmV2aW91c0hyZWYuY3VycmVudCA9IGhyZWY7XG4gICAgICAgIH1cbiAgICAgICAgc2V0SW50ZXJzZWN0aW9uUmVmKGVsKTtcbiAgICAgICAgaWYgKGNoaWxkUmVmKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkUmVmID09PSBcImZ1bmN0aW9uXCIpIGNoaWxkUmVmKGVsKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZFJlZiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGNoaWxkUmVmLmN1cnJlbnQgPSBlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgYXMsXG4gICAgICAgIGNoaWxkUmVmLFxuICAgICAgICBocmVmLFxuICAgICAgICByZXNldFZpc2libGUsXG4gICAgICAgIHNldEludGVyc2VjdGlvblJlZlxuICAgIF0pO1xuICAgIC8vIFByZWZldGNoIHRoZSBVUkwgaWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGFuZCBpdCdzIHZpc2libGUuXG4gICAgX3JlYWN0LmRlZmF1bHQudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIC8vIGluIGRldiwgd2Ugb25seSBwcmVmZXRjaCBvbiBob3ZlciB0byBhdm9pZCB3YXN0aW5nIHJlc291cmNlcyBhcyB0aGUgcHJlZmV0Y2ggd2lsbCB0cmlnZ2VyIGNvbXBpbGluZyB0aGUgcGFnZS5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgbmVlZCB0byBwcmVmZXRjaCB0aGUgVVJMLCBkb24ndCBkbyBwcmVmZXRjaC5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUgfHwgIXByZWZldGNoRW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZWZldGNoIHRoZSBVUkwuXG4gICAgICAgIHByZWZldGNoKHJvdXRlciwgaHJlZiwgYXMsIHtcbiAgICAgICAgICAgIGxvY2FsZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBraW5kOiBhcHBQcmVmZXRjaEtpbmRcbiAgICAgICAgfSwgaXNBcHBSb3V0ZXIpO1xuICAgIH0sIFtcbiAgICAgICAgYXMsXG4gICAgICAgIGhyZWYsXG4gICAgICAgIGlzVmlzaWJsZSxcbiAgICAgICAgbG9jYWxlLFxuICAgICAgICBwcmVmZXRjaEVuYWJsZWQsXG4gICAgICAgIHBhZ2VzUm91dGVyID09IG51bGwgPyB2b2lkIDAgOiBwYWdlc1JvdXRlci5sb2NhbGUsXG4gICAgICAgIHJvdXRlcixcbiAgICAgICAgaXNBcHBSb3V0ZXIsXG4gICAgICAgIGFwcFByZWZldGNoS2luZFxuICAgIF0pO1xuICAgIGNvbnN0IGNoaWxkUHJvcHMgPSB7XG4gICAgICAgIHJlZjogc2V0UmVmLFxuICAgICAgICBvbkNsaWNrIChlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHJlbmRlcmVkIGluc2lkZSBuZXh0L2xpbmsgaGFzIHRvIHBhc3MgY2xpY2sgZXZlbnQgdG8gXCJvbkNsaWNrXCIgcHJvcC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWxlZ2FjeUJlaGF2aW9yICYmIHR5cGVvZiBvbkNsaWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZ2FjeUJlaGF2aW9yICYmIGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vbkNsaWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyb3V0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlua0NsaWNrZWQoZSwgcm91dGVyLCBocmVmLCBhcywgcmVwbGFjZSwgc2hhbGxvdywgc2Nyb2xsLCBsb2NhbGUsIGlzQXBwUm91dGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Nb3VzZUVudGVyIChlKSB7XG4gICAgICAgICAgICBpZiAoIWxlZ2FjeUJlaGF2aW9yICYmIHR5cGVvZiBvbk1vdXNlRW50ZXJQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXJQcm9wKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZ2FjeUJlaGF2aW9yICYmIGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vbk1vdXNlRW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNoaWxkLnByb3BzLm9uTW91c2VFbnRlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCghcHJlZmV0Y2hFbmFibGVkIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpICYmIGlzQXBwUm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlZmV0Y2gocm91dGVyLCBocmVmLCBhcywge1xuICAgICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBAc2VlIHtodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvZGlzY3Vzc2lvbnMvNDAyNjg/c29ydD10b3AjZGlzY3Vzc2lvbmNvbW1lbnQtMzU3MjY0Mn1cbiAgICAgICAgICAgICAgICBieXBhc3NQcmVmZXRjaGVkQ2hlY2s6IHRydWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBraW5kOiBhcHBQcmVmZXRjaEtpbmRcbiAgICAgICAgICAgIH0sIGlzQXBwUm91dGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0IChlKSB7XG4gICAgICAgICAgICBpZiAoIWxlZ2FjeUJlaGF2aW9yICYmIHR5cGVvZiBvblRvdWNoU3RhcnRQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvblRvdWNoU3RhcnRQcm9wKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZ2FjeUJlaGF2aW9yICYmIGNoaWxkLnByb3BzICYmIHR5cGVvZiBjaGlsZC5wcm9wcy5vblRvdWNoU3RhcnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNoaWxkLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcm91dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwcmVmZXRjaEVuYWJsZWQgJiYgaXNBcHBSb3V0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVmZXRjaChyb3V0ZXIsIGhyZWYsIGFzLCB7XG4gICAgICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIEBzZWUge2h0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9kaXNjdXNzaW9ucy80MDI2OD9zb3J0PXRvcCNkaXNjdXNzaW9uY29tbWVudC0zNTcyNjQyfVxuICAgICAgICAgICAgICAgIGJ5cGFzc1ByZWZldGNoZWRDaGVjazogdHJ1ZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGFwcFByZWZldGNoS2luZFxuICAgICAgICAgICAgfSwgaXNBcHBSb3V0ZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBJZiBjaGlsZCBpcyBhbiA8YT4gdGFnIGFuZCBkb2Vzbid0IGhhdmUgYSBocmVmIGF0dHJpYnV0ZSwgb3IgaWYgdGhlICdwYXNzSHJlZicgcHJvcGVydHkgaXNcbiAgICAvLyBkZWZpbmVkLCB3ZSBzcGVjaWZ5IHRoZSBjdXJyZW50ICdocmVmJywgc28gdGhhdCByZXBldGl0aW9uIGlzIG5vdCBuZWVkZWQgYnkgdGhlIHVzZXIuXG4gICAgLy8gSWYgdGhlIHVybCBpcyBhYnNvbHV0ZSwgd2UgY2FuIGJ5cGFzcyB0aGUgbG9naWMgdG8gcHJlcGVuZCB0aGUgZG9tYWluIGFuZCBsb2NhbGUuXG4gICAgaWYgKCgwLCBfdXRpbHMuaXNBYnNvbHV0ZVVybCkoYXMpKSB7XG4gICAgICAgIGNoaWxkUHJvcHMuaHJlZiA9IGFzO1xuICAgIH0gZWxzZSBpZiAoIWxlZ2FjeUJlaGF2aW9yIHx8IHBhc3NIcmVmIHx8IGNoaWxkLnR5cGUgPT09IFwiYVwiICYmICEoXCJocmVmXCIgaW4gY2hpbGQucHJvcHMpKSB7XG4gICAgICAgIGNvbnN0IGN1ckxvY2FsZSA9IHR5cGVvZiBsb2NhbGUgIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhbGUgOiBwYWdlc1JvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcGFnZXNSb3V0ZXIubG9jYWxlO1xuICAgICAgICAvLyB3ZSBvbmx5IHJlbmRlciBkb21haW4gbG9jYWxlcyBpZiB3ZSBhcmUgY3VycmVudGx5IG9uIGEgZG9tYWluIGxvY2FsZVxuICAgICAgICAvLyBzbyB0aGF0IGxvY2FsZSBsaW5rcyBhcmUgc3RpbGwgdmlzaXRhYmxlIGluIGRldmVsb3BtZW50L3ByZXZpZXcgZW52c1xuICAgICAgICBjb25zdCBsb2NhbGVEb21haW4gPSAocGFnZXNSb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHBhZ2VzUm91dGVyLmlzTG9jYWxlRG9tYWluKSAmJiAoMCwgX2dldGRvbWFpbmxvY2FsZS5nZXREb21haW5Mb2NhbGUpKGFzLCBjdXJMb2NhbGUsIHBhZ2VzUm91dGVyID09IG51bGwgPyB2b2lkIDAgOiBwYWdlc1JvdXRlci5sb2NhbGVzLCBwYWdlc1JvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcGFnZXNSb3V0ZXIuZG9tYWluTG9jYWxlcyk7XG4gICAgICAgIGNoaWxkUHJvcHMuaHJlZiA9IGxvY2FsZURvbWFpbiB8fCAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKGFzLCBjdXJMb2NhbGUsIHBhZ2VzUm91dGVyID09IG51bGwgPyB2b2lkIDAgOiBwYWdlc1JvdXRlci5kZWZhdWx0TG9jYWxlKSk7XG4gICAgfVxuICAgIHJldHVybiBsZWdhY3lCZWhhdmlvciA/IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKSA6IC8qI19fUFVSRV9fKi8gKDAsIF9qc3hydW50aW1lLmpzeCkoXCJhXCIsIHtcbiAgICAgICAgLi4ucmVzdFByb3BzLFxuICAgICAgICAuLi5jaGlsZFByb3BzLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KTtcbn0pO1xuY29uc3QgX2RlZmF1bHQgPSBMaW5rO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfZGVmYXVsdCIsIl9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCIsInJlcXVpcmUiLCJfanN4cnVudGltZSIsIl9yZWFjdCIsIl8iLCJfcmVzb2x2ZWhyZWYiLCJfaXNsb2NhbHVybCIsIl9mb3JtYXR1cmwiLCJfdXRpbHMiLCJfYWRkbG9jYWxlIiwiX3JvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lIiwiX2FwcHJvdXRlcmNvbnRleHRzaGFyZWRydW50aW1lIiwiX3VzZWludGVyc2VjdGlvbiIsIl9nZXRkb21haW5sb2NhbGUiLCJfYWRkYmFzZXBhdGgiLCJfcm91dGVycmVkdWNlcnR5cGVzIiwicHJlZmV0Y2hlZCIsIlNldCIsInByZWZldGNoIiwicm91dGVyIiwiaHJlZiIsImFzIiwib3B0aW9ucyIsImFwcE9wdGlvbnMiLCJpc0FwcFJvdXRlciIsImlzTG9jYWxVUkwiLCJieXBhc3NQcmVmZXRjaGVkQ2hlY2siLCJsb2NhbGUiLCJ1bmRlZmluZWQiLCJwcmVmZXRjaGVkS2V5IiwiaGFzIiwiYWRkIiwicHJlZmV0Y2hQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYXRjaCIsImVyciIsInByb2Nlc3MiLCJpc01vZGlmaWVkRXZlbnQiLCJldmVudCIsImV2ZW50VGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInRhcmdldCIsImdldEF0dHJpYnV0ZSIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJuYXRpdmVFdmVudCIsIndoaWNoIiwibGlua0NsaWNrZWQiLCJlIiwicmVwbGFjZSIsInNoYWxsb3ciLCJzY3JvbGwiLCJub2RlTmFtZSIsImlzQW5jaG9yTm9kZU5hbWUiLCJ0b1VwcGVyQ2FzZSIsInByZXZlbnREZWZhdWx0IiwibmF2aWdhdGUiLCJyb3V0ZXJTY3JvbGwiLCJkZWZhdWx0Iiwic3RhcnRUcmFuc2l0aW9uIiwiZm9ybWF0U3RyaW5nT3JVcmwiLCJ1cmxPYmpPclN0cmluZyIsImZvcm1hdFVybCIsIkxpbmsiLCJmb3J3YXJkUmVmIiwiTGlua0NvbXBvbmVudCIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiY2hpbGRyZW4iLCJocmVmUHJvcCIsImFzUHJvcCIsImNoaWxkcmVuUHJvcCIsInByZWZldGNoUHJvcCIsInBhc3NIcmVmIiwib25DbGljayIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VFbnRlclByb3AiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnRQcm9wIiwibGVnYWN5QmVoYXZpb3IiLCJyZXN0UHJvcHMiLCJqc3giLCJwYWdlc1JvdXRlciIsInVzZUNvbnRleHQiLCJSb3V0ZXJDb250ZXh0IiwiYXBwUm91dGVyIiwiQXBwUm91dGVyQ29udGV4dCIsInByZWZldGNoRW5hYmxlZCIsImFwcFByZWZldGNoS2luZCIsIlByZWZldGNoS2luZCIsIkFVVE8iLCJGVUxMIiwiY3JlYXRlUHJvcEVycm9yIiwiYXJncyIsIkVycm9yIiwia2V5IiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJyZXF1aXJlZFByb3BzR3VhcmQiLCJyZXF1aXJlZFByb3BzIiwia2V5cyIsImZvckVhY2giLCJvcHRpb25hbFByb3BzR3VhcmQiLCJvcHRpb25hbFByb3BzIiwidmFsVHlwZSIsImhhc1dhcm5lZCIsInVzZVJlZiIsImN1cnJlbnQiLCJjb25zb2xlIiwid2FybiIsInBhdGhuYW1lIiwiaGFzRHluYW1pY1NlZ21lbnQiLCJzcGxpdCIsInNvbWUiLCJzZWdtZW50Iiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwidXNlTWVtbyIsInJlc29sdmVkSHJlZiIsInJlc29sdmVkQXMiLCJyZXNvbHZlSHJlZiIsInByZXZpb3VzSHJlZiIsInByZXZpb3VzQXMiLCJjaGlsZCIsIkNoaWxkcmVuIiwib25seSIsInR5cGUiLCJjaGlsZFJlZiIsInJlZiIsInNldEludGVyc2VjdGlvblJlZiIsImlzVmlzaWJsZSIsInJlc2V0VmlzaWJsZSIsInVzZUludGVyc2VjdGlvbiIsInJvb3RNYXJnaW4iLCJzZXRSZWYiLCJ1c2VDYWxsYmFjayIsImVsIiwidXNlRWZmZWN0Iiwia2luZCIsImNoaWxkUHJvcHMiLCJkZWZhdWx0UHJldmVudGVkIiwicHJpb3JpdHkiLCJpc0Fic29sdXRlVXJsIiwiY3VyTG9jYWxlIiwibG9jYWxlRG9tYWluIiwiaXNMb2NhbGVEb21haW4iLCJnZXREb21haW5Mb2NhbGUiLCJsb2NhbGVzIiwiZG9tYWluTG9jYWxlcyIsImFkZEJhc2VQYXRoIiwiYWRkTG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsImNsb25lRWxlbWVudCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/link.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    requestIdleCallback: function() {\n        return requestIdleCallback;\n    },\n    cancelIdleCallback: function() {\n        return cancelIdleCallback;\n    }\n});\nconst requestIdleCallback = typeof self !== \"undefined\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return self.setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nconst cancelIdleCallback = typeof self !== \"undefined\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcscUJBQXFCO1FBQ2pCLE9BQU9BO0lBQ1g7SUFDQUMsb0JBQW9CO1FBQ2hCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1ELHNCQUFzQixPQUFPUSxTQUFTLGVBQWVBLEtBQUtSLG1CQUFtQixJQUFJUSxLQUFLUixtQkFBbUIsQ0FBQ1MsSUFBSSxDQUFDQyxXQUFXLFNBQVNDLEVBQUU7SUFDdkksSUFBSUMsUUFBUUMsS0FBS0MsR0FBRztJQUNwQixPQUFPTixLQUFLTyxVQUFVLENBQUM7UUFDbkJKLEdBQUc7WUFDQ0ssWUFBWTtZQUNaQyxlQUFlO2dCQUNYLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLEtBQU1OLENBQUFBLEtBQUtDLEdBQUcsS0FBS0YsS0FBSTtZQUM5QztRQUNKO0lBQ0osR0FBRztBQUNQO0FBQ0EsTUFBTVgscUJBQXFCLE9BQU9PLFNBQVMsZUFBZUEsS0FBS1Asa0JBQWtCLElBQUlPLEtBQUtQLGtCQUFrQixDQUFDUSxJQUFJLENBQUNDLFdBQVcsU0FBU1UsRUFBRTtJQUNwSSxPQUFPQyxhQUFhRDtBQUN4QjtBQUVBLElBQUksQ0FBQyxPQUFPdkIsUUFBUXlCLE9BQU8sS0FBSyxjQUFlLE9BQU96QixRQUFReUIsT0FBTyxLQUFLLFlBQVl6QixRQUFReUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPekIsUUFBUXlCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcks1QixPQUFPQyxjQUFjLENBQUNDLFFBQVF5QixPQUFPLEVBQUUsY0FBYztRQUFFeEIsT0FBTztJQUFLO0lBQ25FSCxPQUFPNkIsTUFBTSxDQUFDM0IsUUFBUXlCLE9BQU8sRUFBRXpCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVF5QixPQUFPO0FBQ2xDLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz8xZTIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogbnVsbCxcbiAgICBjYW5jZWxJZGxlQ2FsbGJhY2s6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuICAgIH0sXG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbElkbGVDYWxsYmFjaztcbiAgICB9XG59KTtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihjYikge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNlbGYuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEpO1xufTtcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/resolve-href.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"resolveHref\", ({\n    enumerable: true,\n    get: function() {\n        return resolveHref;\n    }\n}));\nconst _querystring = __webpack_require__(/*! ../shared/lib/router/utils/querystring */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nconst _omit = __webpack_require__(/*! ../shared/lib/router/utils/omit */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nconst _utils1 = __webpack_require__(/*! ../shared/lib/router/utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js\");\nconst _interpolateas = __webpack_require__(/*! ../shared/lib/router/utils/interpolate-as */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\nfunction resolveHref(router, href, resolveAs) {\n    // we use a dummy base url for relative urls\n    let base;\n    let urlAsString = typeof href === \"string\" ? href : (0, _formaturl.formatWithValidation)(href);\n    // repeated slashes and backslashes in the URL are considered\n    // invalid and will never match a Next.js page/file\n    const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n    const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;\n    const urlParts = urlAsStringNoProto.split(\"?\", 1);\n    if ((urlParts[0] || \"\").match(/(\\/\\/|\\\\)/)) {\n        console.error(\"Invalid href '\" + urlAsString + \"' passed to next/router in page: '\" + router.pathname + \"'. Repeated forward-slashes (//) or backslashes \\\\ are not valid in the href.\");\n        const normalizedUrl = (0, _utils.normalizeRepeatedSlashes)(urlAsStringNoProto);\n        urlAsString = (urlProtoMatch ? urlProtoMatch[0] : \"\") + normalizedUrl;\n    }\n    // Return because it cannot be routed by the Next.js router\n    if (!(0, _islocalurl.isLocalURL)(urlAsString)) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n    try {\n        base = new URL(urlAsString.startsWith(\"#\") ? router.asPath : router.pathname, \"http://n\");\n    } catch (_) {\n        // fallback to / for invalid asPath values e.g. //\n        base = new URL(\"/\", \"http://n\");\n    }\n    try {\n        const finalUrl = new URL(urlAsString, base);\n        finalUrl.pathname = (0, _normalizetrailingslash.normalizePathTrailingSlash)(finalUrl.pathname);\n        let interpolatedAs = \"\";\n        if ((0, _utils1.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n            const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n            const { result, params } = (0, _interpolateas.interpolateAs)(finalUrl.pathname, finalUrl.pathname, query);\n            if (result) {\n                interpolatedAs = (0, _formaturl.formatWithValidation)({\n                    pathname: result,\n                    hash: finalUrl.hash,\n                    query: (0, _omit.omit)(query, params)\n                });\n            }\n        }\n        // if the origin didn't change, it means we received a relative href\n        const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n        return resolveAs ? [\n            resolvedHref,\n            interpolatedAs || resolvedHref\n        ] : resolvedHref;\n    } catch (_) {\n        return resolveAs ? [\n            urlAsString\n        ] : urlAsString;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=resolve-href.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3Jlc29sdmUtaHJlZi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsK0NBQThDO0lBQzFDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsZUFBZUMsbUJBQU9BLENBQUMsbUlBQXdDO0FBQ3JFLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLGlJQUF1QztBQUNsRSxNQUFNRSxRQUFRRixtQkFBT0EsQ0FBQyxxSEFBaUM7QUFDdkQsTUFBTUcsU0FBU0gsbUJBQU9BLENBQUMsNkZBQXFCO0FBQzVDLE1BQU1JLDBCQUEwQkosbUJBQU9BLENBQUMsbUhBQTRCO0FBQ3BFLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDLHFJQUF5QztBQUNyRSxNQUFNTSxVQUFVTixtQkFBT0EsQ0FBQyxpSEFBNEI7QUFDcEQsTUFBTU8saUJBQWlCUCxtQkFBT0EsQ0FBQyx5SUFBMkM7QUFDMUUsU0FBU0YsWUFBWVUsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFNBQVM7SUFDeEMsNENBQTRDO0lBQzVDLElBQUlDO0lBQ0osSUFBSUMsY0FBYyxPQUFPSCxTQUFTLFdBQVdBLE9BQU8sQ0FBQyxHQUFHUixXQUFXWSxvQkFBb0IsRUFBRUo7SUFDekYsNkRBQTZEO0lBQzdELG1EQUFtRDtJQUNuRCxNQUFNSyxnQkFBZ0JGLFlBQVlHLEtBQUssQ0FBQztJQUN4QyxNQUFNQyxxQkFBcUJGLGdCQUFnQkYsWUFBWUssS0FBSyxDQUFDSCxhQUFhLENBQUMsRUFBRSxDQUFDSSxNQUFNLElBQUlOO0lBQ3hGLE1BQU1PLFdBQVdILG1CQUFtQkksS0FBSyxDQUFDLEtBQUs7SUFDL0MsSUFBSSxDQUFDRCxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUMsRUFBR0osS0FBSyxDQUFDLGNBQWM7UUFDeENNLFFBQVFDLEtBQUssQ0FBQyxtQkFBbUJWLGNBQWMsdUNBQXVDSixPQUFPZSxRQUFRLEdBQUc7UUFDeEcsTUFBTUMsZ0JBQWdCLENBQUMsR0FBR3JCLE9BQU9zQix3QkFBd0IsRUFBRVQ7UUFDM0RKLGNBQWMsQ0FBQ0UsZ0JBQWdCQSxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUMsSUFBS1U7SUFDNUQ7SUFDQSwyREFBMkQ7SUFDM0QsSUFBSSxDQUFDLENBQUMsR0FBR25CLFlBQVlxQixVQUFVLEVBQUVkLGNBQWM7UUFDM0MsT0FBT0YsWUFBWTtZQUNmRTtTQUNILEdBQUdBO0lBQ1I7SUFDQSxJQUFJO1FBQ0FELE9BQU8sSUFBSWdCLElBQUlmLFlBQVlnQixVQUFVLENBQUMsT0FBT3BCLE9BQU9xQixNQUFNLEdBQUdyQixPQUFPZSxRQUFRLEVBQUU7SUFDbEYsRUFBRSxPQUFPTyxHQUFHO1FBQ1Isa0RBQWtEO1FBQ2xEbkIsT0FBTyxJQUFJZ0IsSUFBSSxLQUFLO0lBQ3hCO0lBQ0EsSUFBSTtRQUNBLE1BQU1JLFdBQVcsSUFBSUosSUFBSWYsYUFBYUQ7UUFDdENvQixTQUFTUixRQUFRLEdBQUcsQ0FBQyxHQUFHbkIsd0JBQXdCNEIsMEJBQTBCLEVBQUVELFNBQVNSLFFBQVE7UUFDN0YsSUFBSVUsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxHQUFHM0IsUUFBUTRCLGNBQWMsRUFBRUgsU0FBU1IsUUFBUSxLQUFLUSxTQUFTSSxZQUFZLElBQUl6QixXQUFXO1lBQ3RGLE1BQU0wQixRQUFRLENBQUMsR0FBR3JDLGFBQWFzQyxzQkFBc0IsRUFBRU4sU0FBU0ksWUFBWTtZQUM1RSxNQUFNLEVBQUVHLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHaEMsZUFBZWlDLGFBQWEsRUFBRVQsU0FBU1IsUUFBUSxFQUFFUSxTQUFTUixRQUFRLEVBQUVhO1lBQ25HLElBQUlFLFFBQVE7Z0JBQ1JMLGlCQUFpQixDQUFDLEdBQUdoQyxXQUFXWSxvQkFBb0IsRUFBRTtvQkFDbERVLFVBQVVlO29CQUNWRyxNQUFNVixTQUFTVSxJQUFJO29CQUNuQkwsT0FBTyxDQUFDLEdBQUdsQyxNQUFNd0MsSUFBSSxFQUFFTixPQUFPRztnQkFDbEM7WUFDSjtRQUNKO1FBQ0Esb0VBQW9FO1FBQ3BFLE1BQU1JLGVBQWVaLFNBQVNhLE1BQU0sS0FBS2pDLEtBQUtpQyxNQUFNLEdBQUdiLFNBQVN0QixJQUFJLENBQUNRLEtBQUssQ0FBQ2MsU0FBU2EsTUFBTSxDQUFDMUIsTUFBTSxJQUFJYSxTQUFTdEIsSUFBSTtRQUNsSCxPQUFPQyxZQUFZO1lBQ2ZpQztZQUNBVixrQkFBa0JVO1NBQ3JCLEdBQUdBO0lBQ1IsRUFBRSxPQUFPYixHQUFHO1FBQ1IsT0FBT3BCLFlBQVk7WUFDZkU7U0FDSCxHQUFHQTtJQUNSO0FBQ0o7QUFFQSxJQUFJLENBQUMsT0FBT2xCLFFBQVFtRCxPQUFPLEtBQUssY0FBZSxPQUFPbkQsUUFBUW1ELE9BQU8sS0FBSyxZQUFZbkQsUUFBUW1ELE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT25ELFFBQVFtRCxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLdEQsT0FBT0MsY0FBYyxDQUFDQyxRQUFRbUQsT0FBTyxFQUFFLGNBQWM7UUFBRWxELE9BQU87SUFBSztJQUNuRUgsT0FBT3VELE1BQU0sQ0FBQ3JELFFBQVFtRCxPQUFPLEVBQUVuRDtJQUMvQnNELE9BQU90RCxPQUFPLEdBQUdBLFFBQVFtRCxPQUFPO0FBQ2xDLEVBRUEsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3Jlc29sdmUtaHJlZi5qcz8yZjllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVzb2x2ZUhyZWZcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVIcmVmO1xuICAgIH1cbn0pO1xuY29uc3QgX3F1ZXJ5c3RyaW5nID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3F1ZXJ5c3RyaW5nXCIpO1xuY29uc3QgX2Zvcm1hdHVybCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9mb3JtYXQtdXJsXCIpO1xuY29uc3QgX29taXQgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvb21pdFwiKTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3V0aWxzXCIpO1xuY29uc3QgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBfaXNsb2NhbHVybCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pcy1sb2NhbC11cmxcIik7XG5jb25zdCBfdXRpbHMxID0gcmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzXCIpO1xuY29uc3QgX2ludGVycG9sYXRlYXMgPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW50ZXJwb2xhdGUtYXNcIik7XG5mdW5jdGlvbiByZXNvbHZlSHJlZihyb3V0ZXIsIGhyZWYsIHJlc29sdmVBcykge1xuICAgIC8vIHdlIHVzZSBhIGR1bW15IGJhc2UgdXJsIGZvciByZWxhdGl2ZSB1cmxzXG4gICAgbGV0IGJhc2U7XG4gICAgbGV0IHVybEFzU3RyaW5nID0gdHlwZW9mIGhyZWYgPT09IFwic3RyaW5nXCIgPyBocmVmIDogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKGhyZWYpO1xuICAgIC8vIHJlcGVhdGVkIHNsYXNoZXMgYW5kIGJhY2tzbGFzaGVzIGluIHRoZSBVUkwgYXJlIGNvbnNpZGVyZWRcbiAgICAvLyBpbnZhbGlkIGFuZCB3aWxsIG5ldmVyIG1hdGNoIGEgTmV4dC5qcyBwYWdlL2ZpbGVcbiAgICBjb25zdCB1cmxQcm90b01hdGNoID0gdXJsQXNTdHJpbmcubWF0Y2goL15bYS16QS1aXXsxLH06XFwvXFwvLyk7XG4gICAgY29uc3QgdXJsQXNTdHJpbmdOb1Byb3RvID0gdXJsUHJvdG9NYXRjaCA/IHVybEFzU3RyaW5nLnNsaWNlKHVybFByb3RvTWF0Y2hbMF0ubGVuZ3RoKSA6IHVybEFzU3RyaW5nO1xuICAgIGNvbnN0IHVybFBhcnRzID0gdXJsQXNTdHJpbmdOb1Byb3RvLnNwbGl0KFwiP1wiLCAxKTtcbiAgICBpZiAoKHVybFBhcnRzWzBdIHx8IFwiXCIpLm1hdGNoKC8oXFwvXFwvfFxcXFwpLykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgaHJlZiAnXCIgKyB1cmxBc1N0cmluZyArIFwiJyBwYXNzZWQgdG8gbmV4dC9yb3V0ZXIgaW4gcGFnZTogJ1wiICsgcm91dGVyLnBhdGhuYW1lICsgXCInLiBSZXBlYXRlZCBmb3J3YXJkLXNsYXNoZXMgKC8vKSBvciBiYWNrc2xhc2hlcyBcXFxcIGFyZSBub3QgdmFsaWQgaW4gdGhlIGhyZWYuXCIpO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkVXJsID0gKDAsIF91dGlscy5ub3JtYWxpemVSZXBlYXRlZFNsYXNoZXMpKHVybEFzU3RyaW5nTm9Qcm90byk7XG4gICAgICAgIHVybEFzU3RyaW5nID0gKHVybFByb3RvTWF0Y2ggPyB1cmxQcm90b01hdGNoWzBdIDogXCJcIikgKyBub3JtYWxpemVkVXJsO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gYmVjYXVzZSBpdCBjYW5ub3QgYmUgcm91dGVkIGJ5IHRoZSBOZXh0LmpzIHJvdXRlclxuICAgIGlmICghKDAsIF9pc2xvY2FsdXJsLmlzTG9jYWxVUkwpKHVybEFzU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzID8gW1xuICAgICAgICAgICAgdXJsQXNTdHJpbmdcbiAgICAgICAgXSA6IHVybEFzU3RyaW5nO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBiYXNlID0gbmV3IFVSTCh1cmxBc1N0cmluZy5zdGFydHNXaXRoKFwiI1wiKSA/IHJvdXRlci5hc1BhdGggOiByb3V0ZXIucGF0aG5hbWUsIFwiaHR0cDovL25cIik7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgICAvLyBmYWxsYmFjayB0byAvIGZvciBpbnZhbGlkIGFzUGF0aCB2YWx1ZXMgZS5nLiAvL1xuICAgICAgICBiYXNlID0gbmV3IFVSTChcIi9cIiwgXCJodHRwOi8vblwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmluYWxVcmwgPSBuZXcgVVJMKHVybEFzU3RyaW5nLCBiYXNlKTtcbiAgICAgICAgZmluYWxVcmwucGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2gubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2gpKGZpbmFsVXJsLnBhdGhuYW1lKTtcbiAgICAgICAgbGV0IGludGVycG9sYXRlZEFzID0gXCJcIjtcbiAgICAgICAgaWYgKCgwLCBfdXRpbHMxLmlzRHluYW1pY1JvdXRlKShmaW5hbFVybC5wYXRobmFtZSkgJiYgZmluYWxVcmwuc2VhcmNoUGFyYW1zICYmIHJlc29sdmVBcykge1xuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSAoMCwgX3F1ZXJ5c3RyaW5nLnNlYXJjaFBhcmFtc1RvVXJsUXVlcnkpKGZpbmFsVXJsLnNlYXJjaFBhcmFtcyk7XG4gICAgICAgICAgICBjb25zdCB7IHJlc3VsdCwgcGFyYW1zIH0gPSAoMCwgX2ludGVycG9sYXRlYXMuaW50ZXJwb2xhdGVBcykoZmluYWxVcmwucGF0aG5hbWUsIGZpbmFsVXJsLnBhdGhuYW1lLCBxdWVyeSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkQXMgPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBoYXNoOiBmaW5hbFVybC5oYXNoLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIF9vbWl0Lm9taXQpKHF1ZXJ5LCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIG9yaWdpbiBkaWRuJ3QgY2hhbmdlLCBpdCBtZWFucyB3ZSByZWNlaXZlZCBhIHJlbGF0aXZlIGhyZWZcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRIcmVmID0gZmluYWxVcmwub3JpZ2luID09PSBiYXNlLm9yaWdpbiA/IGZpbmFsVXJsLmhyZWYuc2xpY2UoZmluYWxVcmwub3JpZ2luLmxlbmd0aCkgOiBmaW5hbFVybC5ocmVmO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzID8gW1xuICAgICAgICAgICAgcmVzb2x2ZWRIcmVmLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGVkQXMgfHwgcmVzb2x2ZWRIcmVmXG4gICAgICAgIF0gOiByZXNvbHZlZEhyZWY7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzID8gW1xuICAgICAgICAgICAgdXJsQXNTdHJpbmdcbiAgICAgICAgXSA6IHVybEFzU3RyaW5nO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS1ocmVmLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXNvbHZlSHJlZiIsIl9xdWVyeXN0cmluZyIsInJlcXVpcmUiLCJfZm9ybWF0dXJsIiwiX29taXQiLCJfdXRpbHMiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsIl9pc2xvY2FsdXJsIiwiX3V0aWxzMSIsIl9pbnRlcnBvbGF0ZWFzIiwicm91dGVyIiwiaHJlZiIsInJlc29sdmVBcyIsImJhc2UiLCJ1cmxBc1N0cmluZyIsImZvcm1hdFdpdGhWYWxpZGF0aW9uIiwidXJsUHJvdG9NYXRjaCIsIm1hdGNoIiwidXJsQXNTdHJpbmdOb1Byb3RvIiwic2xpY2UiLCJsZW5ndGgiLCJ1cmxQYXJ0cyIsInNwbGl0IiwiY29uc29sZSIsImVycm9yIiwicGF0aG5hbWUiLCJub3JtYWxpemVkVXJsIiwibm9ybWFsaXplUmVwZWF0ZWRTbGFzaGVzIiwiaXNMb2NhbFVSTCIsIlVSTCIsInN0YXJ0c1dpdGgiLCJhc1BhdGgiLCJfIiwiZmluYWxVcmwiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsImludGVycG9sYXRlZEFzIiwiaXNEeW5hbWljUm91dGUiLCJzZWFyY2hQYXJhbXMiLCJxdWVyeSIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJyZXN1bHQiLCJwYXJhbXMiLCJpbnRlcnBvbGF0ZUFzIiwiaGFzaCIsIm9taXQiLCJyZXNvbHZlZEhyZWYiLCJvcmlnaW4iLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/resolve-href.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useIntersection\", ({\n    enumerable: true,\n    get: function() {\n        return useIntersection;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nfunction observe(element, callback, options) {\n    const { id, observer, elements } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nfunction useIntersection(param) {\n    let { rootRef, rootMargin, disabled } = param;\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const [visible, setVisible] = (0, _react.useState)(false);\n    const elementRef = (0, _react.useRef)(null);\n    const setElement = (0, _react.useCallback)((element)=>{\n        elementRef.current = element;\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (hasIntersectionObserver) {\n            if (isDisabled || visible) return;\n            const element = elementRef.current;\n            if (element && element.tagName) {\n                const unobserve = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n                return unobserve;\n            }\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestidlecallback.requestIdleCallback)(()=>setVisible(true));\n                return ()=>(0, _requestidlecallback.cancelIdleCallback)(idleCallback);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible,\n        elementRef.current\n    ]);\n    const resetVisible = (0, _react.useCallback)(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3VzZS1pbnRlcnNlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILG1EQUFrRDtJQUM5Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLG1GQUFPO0FBQzlCLE1BQU1DLHVCQUF1QkQsbUJBQU9BLENBQUMsNkdBQXlCO0FBQzlELE1BQU1FLDBCQUEwQixPQUFPQyx5QkFBeUI7QUFDaEUsTUFBTUMsWUFBWSxJQUFJQztBQUN0QixNQUFNQyxTQUFTLEVBQUU7QUFDakIsU0FBU0MsZUFBZUMsT0FBTztJQUMzQixNQUFNQyxLQUFLO1FBQ1BDLE1BQU1GLFFBQVFFLElBQUksSUFBSTtRQUN0QkMsUUFBUUgsUUFBUUksVUFBVSxJQUFJO0lBQ2xDO0lBQ0EsTUFBTUMsV0FBV1AsT0FBT1EsSUFBSSxDQUFDLENBQUNDLE1BQU1BLElBQUlMLElBQUksS0FBS0QsR0FBR0MsSUFBSSxJQUFJSyxJQUFJSixNQUFNLEtBQUtGLEdBQUdFLE1BQU07SUFDcEYsSUFBSUs7SUFDSixJQUFJSCxVQUFVO1FBQ1ZHLFdBQVdaLFVBQVVQLEdBQUcsQ0FBQ2dCO1FBQ3pCLElBQUlHLFVBQVU7WUFDVixPQUFPQTtRQUNYO0lBQ0o7SUFDQSxNQUFNQyxXQUFXLElBQUlaO0lBQ3JCLE1BQU1hLFdBQVcsSUFBSWYscUJBQXFCLENBQUNnQjtRQUN2Q0EsUUFBUUMsT0FBTyxDQUFDLENBQUNDO1lBQ2IsTUFBTUMsV0FBV0wsU0FBU3BCLEdBQUcsQ0FBQ3dCLE1BQU1FLE1BQU07WUFDMUMsTUFBTUMsWUFBWUgsTUFBTUksY0FBYyxJQUFJSixNQUFNSyxpQkFBaUIsR0FBRztZQUNwRSxJQUFJSixZQUFZRSxXQUFXO2dCQUN2QkYsU0FBU0U7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LFFBQVE4RCxPQUFPLEVBQUU5RDtJQUMvQmlFLE9BQU9qRSxPQUFPLEdBQUdBLFFBQVE4RCxPQUFPO0FBQ2xDLEVBRUEsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3VzZS1pbnRlcnNlY3Rpb24uanM/ZmQ5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZUludGVyc2VjdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdXNlSW50ZXJzZWN0aW9uO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgX3JlcXVlc3RpZGxlY2FsbGJhY2sgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWlkbGUtY2FsbGJhY2tcIik7XG5jb25zdCBoYXNJbnRlcnNlY3Rpb25PYnNlcnZlciA9IHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3Qgb2JzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuY29uc3QgaWRMaXN0ID0gW107XG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlcihvcHRpb25zKSB7XG4gICAgY29uc3QgaWQgPSB7XG4gICAgICAgIHJvb3Q6IG9wdGlvbnMucm9vdCB8fCBudWxsLFxuICAgICAgICBtYXJnaW46IG9wdGlvbnMucm9vdE1hcmdpbiB8fCBcIlwiXG4gICAgfTtcbiAgICBjb25zdCBleGlzdGluZyA9IGlkTGlzdC5maW5kKChvYmopPT5vYmoucm9vdCA9PT0gaWQucm9vdCAmJiBvYmoubWFyZ2luID09PSBpZC5tYXJnaW4pO1xuICAgIGxldCBpbnN0YW5jZTtcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgaW5zdGFuY2UgPSBvYnNlcnZlcnMuZ2V0KGV4aXN0aW5nKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpPT57XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGVsZW1lbnRzLmdldChlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gZW50cnkuaXNJbnRlcnNlY3RpbmcgfHwgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPiAwO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGlzVmlzaWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIG9wdGlvbnMpO1xuICAgIGluc3RhbmNlID0ge1xuICAgICAgICBpZCxcbiAgICAgICAgb2JzZXJ2ZXIsXG4gICAgICAgIGVsZW1lbnRzXG4gICAgfTtcbiAgICBpZExpc3QucHVzaChpZCk7XG4gICAgb2JzZXJ2ZXJzLnNldChpZCwgaW5zdGFuY2UpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIG9ic2VydmUoZWxlbWVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGlkLCBvYnNlcnZlciwgZWxlbWVudHMgfSA9IGNyZWF0ZU9ic2VydmVyKG9wdGlvbnMpO1xuICAgIGVsZW1lbnRzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuICAgICAgICBlbGVtZW50cy5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICAgICAgLy8gRGVzdHJveSBvYnNlcnZlciB3aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIHdhdGNoOlxuICAgICAgICBpZiAoZWxlbWVudHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgb2JzZXJ2ZXJzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGlkTGlzdC5maW5kSW5kZXgoKG9iaik9Pm9iai5yb290ID09PSBpZC5yb290ICYmIG9iai5tYXJnaW4gPT09IGlkLm1hcmdpbik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIGlkTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVzZUludGVyc2VjdGlvbihwYXJhbSkge1xuICAgIGxldCB7IHJvb3RSZWYsIHJvb3RNYXJnaW4sIGRpc2FibGVkIH0gPSBwYXJhbTtcbiAgICBjb25zdCBpc0Rpc2FibGVkID0gZGlzYWJsZWQgfHwgIWhhc0ludGVyc2VjdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKTtcbiAgICBjb25zdCBlbGVtZW50UmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKG51bGwpO1xuICAgIGNvbnN0IHNldEVsZW1lbnQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKSgoZWxlbWVudCk9PntcbiAgICAgICAgZWxlbWVudFJlZi5jdXJyZW50ID0gZWxlbWVudDtcbiAgICB9LCBbXSk7XG4gICAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKCgpPT57XG4gICAgICAgIGlmIChoYXNJbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgICAgICAgICAgaWYgKGlzRGlzYWJsZWQgfHwgdmlzaWJsZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQudGFnTmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVub2JzZXJ2ZSA9IG9ic2VydmUoZWxlbWVudCwgKGlzVmlzaWJsZSk9PmlzVmlzaWJsZSAmJiBzZXRWaXNpYmxlKGlzVmlzaWJsZSksIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogcm9vdFJlZiA9PSBudWxsID8gdm9pZCAwIDogcm9vdFJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVub2JzZXJ2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkbGVDYWxsYmFjayA9ICgwLCBfcmVxdWVzdGlkbGVjYWxsYmFjay5yZXF1ZXN0SWRsZUNhbGxiYWNrKSgoKT0+c2V0VmlzaWJsZSh0cnVlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpPT4oMCwgX3JlcXVlc3RpZGxlY2FsbGJhY2suY2FuY2VsSWRsZUNhbGxiYWNrKShpZGxlQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtcbiAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgcm9vdE1hcmdpbixcbiAgICAgICAgcm9vdFJlZixcbiAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgZWxlbWVudFJlZi5jdXJyZW50XG4gICAgXSk7XG4gICAgY29uc3QgcmVzZXRWaXNpYmxlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoKCk9PntcbiAgICAgICAgc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHNldEVsZW1lbnQsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIHJlc2V0VmlzaWJsZVxuICAgIF07XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbnRlcnNlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInVzZUludGVyc2VjdGlvbiIsIl9yZWFjdCIsInJlcXVpcmUiLCJfcmVxdWVzdGlkbGVjYWxsYmFjayIsImhhc0ludGVyc2VjdGlvbk9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlcnMiLCJNYXAiLCJpZExpc3QiLCJjcmVhdGVPYnNlcnZlciIsIm9wdGlvbnMiLCJpZCIsInJvb3QiLCJtYXJnaW4iLCJyb290TWFyZ2luIiwiZXhpc3RpbmciLCJmaW5kIiwib2JqIiwiaW5zdGFuY2UiLCJlbGVtZW50cyIsIm9ic2VydmVyIiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsImNhbGxiYWNrIiwidGFyZ2V0IiwiaXNWaXNpYmxlIiwiaXNJbnRlcnNlY3RpbmciLCJpbnRlcnNlY3Rpb25SYXRpbyIsInB1c2giLCJzZXQiLCJvYnNlcnZlIiwiZWxlbWVudCIsInVub2JzZXJ2ZSIsImRlbGV0ZSIsInNpemUiLCJkaXNjb25uZWN0IiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJwYXJhbSIsInJvb3RSZWYiLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsInVzZVN0YXRlIiwiZWxlbWVudFJlZiIsInVzZVJlZiIsInNldEVsZW1lbnQiLCJ1c2VDYWxsYmFjayIsImN1cnJlbnQiLCJ1c2VFZmZlY3QiLCJ0YWdOYW1lIiwiaWRsZUNhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInJlc2V0VmlzaWJsZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/use-intersection.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/escape-regexp.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// regexp is based on https://github.com/sindresorhus/escape-string-regexp\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"escapeStringRegexp\", ({\n    enumerable: true,\n    get: function() {\n        return escapeStringRegexp;\n    }\n}));\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/;\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g;\nfunction escapeStringRegexp(str) {\n    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n    if (reHasRegExp.test(str)) {\n        return str.replace(reReplaceRegExp, \"\\\\$&\");\n    }\n    return str;\n} //# sourceMappingURL=escape-regexp.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9lc2NhcGUtcmVnZXhwLmpzIiwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUM3RDtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsc0RBQXFEO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxrQkFBa0I7QUFDeEIsU0FBU0YsbUJBQW1CRyxHQUFHO0lBQzNCLCtHQUErRztJQUMvRyxJQUFJRixZQUFZRyxJQUFJLENBQUNELE1BQU07UUFDdkIsT0FBT0EsSUFBSUUsT0FBTyxDQUFDSCxpQkFBaUI7SUFDeEM7SUFDQSxPQUFPQztBQUNYLEVBRUEseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9lc2NhcGUtcmVnZXhwLmpzP2RiZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVnZXhwIGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHBcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlU3RyaW5nUmVnZXhwXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVTdHJpbmdSZWdleHA7XG4gICAgfVxufSk7XG5jb25zdCByZUhhc1JlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dLztcbmNvbnN0IHJlUmVwbGFjZVJlZ0V4cCA9IC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dL2c7XG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdSZWdleHAoc3RyKSB7XG4gICAgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvMmRhMDI0YzNiNGY5OTQ3YTQ4NTE3NjM5ZGU3NTYwNDU3Y2Q0ZWM2Yy9lc2NhcGVSZWdFeHAuanMjTDIzXG4gICAgaWYgKHJlSGFzUmVnRXhwLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UocmVSZXBsYWNlUmVnRXhwLCBcIlxcXFwkJlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXNjYXBlLXJlZ2V4cC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZXNjYXBlU3RyaW5nUmVnZXhwIiwicmVIYXNSZWdFeHAiLCJyZVJlcGxhY2VSZWdFeHAiLCJzdHIiLCJ0ZXN0IiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router-context.shared-runtime.js ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouterContext\", ({\n    enumerable: true,\n    get: function() {\n        return RouterContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst RouterContext = _react.default.createContext(null);\nif (true) {\n    RouterContext.displayName = \"RouterContext\";\n} //# sourceMappingURL=router-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsMkJBQTJCQyxtQkFBT0EsQ0FBQyxnSUFBeUM7QUFDbEYsTUFBTUMsU0FBUyxXQUFXLEdBQUdGLHlCQUF5QkcsQ0FBQyxDQUFDRixtQkFBT0EsQ0FBQyxtRkFBTztBQUN2RSxNQUFNRixnQkFBZ0JHLE9BQU9FLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDO0FBQ25ELElBQUlDLElBQXFDLEVBQUU7SUFDdkNQLGNBQWNRLFdBQVcsR0FBRztBQUNoQyxFQUVBLHlEQUF5RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUuanM/OGZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlckNvbnRleHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlckNvbnRleHQ7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0XCIpO1xuY29uc3QgX3JlYWN0ID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgUm91dGVyQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVyQ29udGV4dFwiO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVyQ29udGV4dCIsIl9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfIiwiZGVmYXVsdCIsImNyZWF0ZUNvbnRleHQiLCJwcm9jZXNzIiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-url.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    formatUrl: function() {\n        return formatUrl;\n    },\n    urlObjectKeys: function() {\n        return urlObjectKeys;\n    },\n    formatWithValidation: function() {\n        return formatWithValidation;\n    }\n});\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _querystring = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! ./querystring */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\"));\nconst slashedProtocols = /https?|ftp|gopher|file/;\nfunction formatUrl(urlObj) {\n    let { auth, hostname } = urlObj;\n    let protocol = urlObj.protocol || \"\";\n    let pathname = urlObj.pathname || \"\";\n    let hash = urlObj.hash || \"\";\n    let query = urlObj.query || \"\";\n    let host = false;\n    auth = auth ? encodeURIComponent(auth).replace(/%3A/i, \":\") + \"@\" : \"\";\n    if (urlObj.host) {\n        host = auth + urlObj.host;\n    } else if (hostname) {\n        host = auth + (~hostname.indexOf(\":\") ? \"[\" + hostname + \"]\" : hostname);\n        if (urlObj.port) {\n            host += \":\" + urlObj.port;\n        }\n    }\n    if (query && typeof query === \"object\") {\n        query = String(_querystring.urlQueryToSearchParams(query));\n    }\n    let search = urlObj.search || query && \"?\" + query || \"\";\n    if (protocol && !protocol.endsWith(\":\")) protocol += \":\";\n    if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n        host = \"//\" + (host || \"\");\n        if (pathname && pathname[0] !== \"/\") pathname = \"/\" + pathname;\n    } else if (!host) {\n        host = \"\";\n    }\n    if (hash && hash[0] !== \"#\") hash = \"#\" + hash;\n    if (search && search[0] !== \"?\") search = \"?\" + search;\n    pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n    search = search.replace(\"#\", \"%23\");\n    return \"\" + protocol + host + pathname + search + hash;\n}\nconst urlObjectKeys = [\n    \"auth\",\n    \"hash\",\n    \"host\",\n    \"hostname\",\n    \"href\",\n    \"path\",\n    \"pathname\",\n    \"port\",\n    \"protocol\",\n    \"query\",\n    \"search\",\n    \"slashes\"\n];\nfunction formatWithValidation(url) {\n    if (true) {\n        if (url !== null && typeof url === \"object\") {\n            Object.keys(url).forEach((key)=>{\n                if (!urlObjectKeys.includes(key)) {\n                    console.warn(\"Unknown key passed via urlObject into url.format: \" + key);\n                }\n            });\n        }\n    }\n    return formatUrl(url);\n} //# sourceMappingURL=format-url.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/format-url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/index.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getSortedRoutes: function() {\n        return _sortedroutes.getSortedRoutes;\n    },\n    isDynamicRoute: function() {\n        return _isdynamic.isDynamicRoute;\n    }\n});\nconst _sortedroutes = __webpack_require__(/*! ./sorted-routes */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js\");\nconst _isdynamic = __webpack_require__(/*! ./is-dynamic */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\"); //# sourceMappingURL=index.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FHTjtBQUNBLFNBQVNHLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlULE9BQU9DLGNBQWMsQ0FBQ08sUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTCxTQUFTO0lBQ2JHLGlCQUFpQjtRQUNiLE9BQU9RLGNBQWNSLGVBQWU7SUFDeEM7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT1EsV0FBV1IsY0FBYztJQUNwQztBQUNKO0FBQ0EsTUFBTU8sZ0JBQWdCRSxtQkFBT0EsQ0FBQyw4R0FBaUI7QUFDL0MsTUFBTUQsYUFBYUMsbUJBQU9BLENBQUMsd0dBQWMsR0FFekMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW5kZXguanM/ZjUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldFNvcnRlZFJvdXRlczogbnVsbCxcbiAgICBpc0R5bmFtaWNSb3V0ZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBnZXRTb3J0ZWRSb3V0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NvcnRlZHJvdXRlcy5nZXRTb3J0ZWRSb3V0ZXM7XG4gICAgfSxcbiAgICBpc0R5bmFtaWNSb3V0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlO1xuICAgIH1cbn0pO1xuY29uc3QgX3NvcnRlZHJvdXRlcyA9IHJlcXVpcmUoXCIuL3NvcnRlZC1yb3V0ZXNcIik7XG5jb25zdCBfaXNkeW5hbWljID0gcmVxdWlyZShcIi4vaXMtZHluYW1pY1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiZ2V0U29ydGVkUm91dGVzIiwiaXNEeW5hbWljUm91dGUiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfc29ydGVkcm91dGVzIiwiX2lzZHluYW1pYyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"interpolateAs\", ({\n    enumerable: true,\n    get: function() {\n        return interpolateAs;\n    }\n}));\nconst _routematcher = __webpack_require__(/*! ./route-matcher */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\nconst _routeregex = __webpack_require__(/*! ./route-regex */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\nfunction interpolateAs(route, asPathname, query) {\n    let interpolatedRoute = \"\";\n    const dynamicRegex = (0, _routeregex.getRouteRegex)(route);\n    const dynamicGroups = dynamicRegex.groups;\n    const dynamicMatches = (asPathname !== route ? (0, _routematcher.getRouteMatcher)(dynamicRegex)(asPathname) : \"\") || // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query;\n    interpolatedRoute = route;\n    const params = Object.keys(dynamicGroups);\n    if (!params.every((param)=>{\n        let value = dynamicMatches[param] || \"\";\n        const { repeat, optional } = dynamicGroups[param];\n        // support single-level catch-all\n        // TODO: more robust handling for user-error (passing `/`)\n        let replaced = \"[\" + (repeat ? \"...\" : \"\") + param + \"]\";\n        if (optional) {\n            replaced = (!value ? \"/\" : \"\") + \"[\" + replaced + \"]\";\n        }\n        if (repeat && !Array.isArray(value)) value = [\n            value\n        ];\n        return (optional || param in dynamicMatches) && // Interpolate group into data URL if present\n        (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(// path delimiter escaped since they are being inserted\n        // into the URL and we expect URL encoded segments\n        // when parsing dynamic route params\n        (segment)=>encodeURIComponent(segment)).join(\"/\") : encodeURIComponent(value)) || \"/\");\n    })) {\n        interpolatedRoute = \"\" // did not satisfy all requirements\n        ;\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n    }\n    return {\n        params,\n        result: interpolatedRoute\n    };\n} //# sourceMappingURL=interpolate-as.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaW50ZXJwb2xhdGUtYXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGlEQUFnRDtJQUM1Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGdCQUFnQkMsbUJBQU9BLENBQUMsOEdBQWlCO0FBQy9DLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDBHQUFlO0FBQzNDLFNBQVNGLGNBQWNJLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxLQUFLO0lBQzNDLElBQUlDLG9CQUFvQjtJQUN4QixNQUFNQyxlQUFlLENBQUMsR0FBR0wsWUFBWU0sYUFBYSxFQUFFTDtJQUNwRCxNQUFNTSxnQkFBZ0JGLGFBQWFHLE1BQU07SUFDekMsTUFBTUMsaUJBQ04sQ0FBQ1AsZUFBZUQsUUFBUSxDQUFDLEdBQUdILGNBQWNZLGVBQWUsRUFBRUwsY0FBY0gsY0FBYyxFQUFDLEtBQU0sZ0RBQWdEO0lBQzlJLHNFQUFzRTtJQUN0RUM7SUFDQUMsb0JBQW9CSDtJQUNwQixNQUFNVSxTQUFTcEIsT0FBT3FCLElBQUksQ0FBQ0w7SUFDM0IsSUFBSSxDQUFDSSxPQUFPRSxLQUFLLENBQUMsQ0FBQ0M7UUFDZixJQUFJcEIsUUFBUWUsY0FBYyxDQUFDSyxNQUFNLElBQUk7UUFDckMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHVCxhQUFhLENBQUNPLE1BQU07UUFDakQsaUNBQWlDO1FBQ2pDLDBEQUEwRDtRQUMxRCxJQUFJRyxXQUFXLE1BQU9GLENBQUFBLFNBQVMsUUFBUSxFQUFDLElBQUtELFFBQVE7UUFDckQsSUFBSUUsVUFBVTtZQUNWQyxXQUFXLENBQUMsQ0FBQ3ZCLFFBQVEsTUFBTSxFQUFDLElBQUssTUFBTXVCLFdBQVc7UUFDdEQ7UUFDQSxJQUFJRixVQUFVLENBQUNHLE1BQU1DLE9BQU8sQ0FBQ3pCLFFBQVFBLFFBQVE7WUFDekNBO1NBQ0g7UUFDRCxPQUFPLENBQUNzQixZQUFZRixTQUFTTCxjQUFhLEtBQU0sNkNBQTZDO1FBQzVGTCxDQUFBQSxvQkFBb0JBLGtCQUFrQmdCLE9BQU8sQ0FBQ0gsVUFBVUYsU0FBU3JCLE1BQU0yQixHQUFHLENBQzNFLHVEQUF1RDtRQUN2RCxrREFBa0Q7UUFDbEQsb0NBQW9DO1FBQ3BDLENBQUNDLFVBQVVDLG1CQUFtQkQsVUFBVUUsSUFBSSxDQUFDLE9BQU9ELG1CQUFtQjdCLFdBQVcsR0FBRTtJQUN4RixJQUFJO1FBQ0FVLG9CQUFvQixHQUFHLG1DQUFtQzs7SUFFOUQsdUVBQXVFO0lBQ3ZFLGtEQUFrRDtJQUNsRDtJQUNBLE9BQU87UUFDSE87UUFDQWMsUUFBUXJCO0lBQ1o7QUFDSixFQUVBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2ludGVycG9sYXRlLWFzLmpzP2QwZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbnRlcnBvbGF0ZUFzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZUFzO1xuICAgIH1cbn0pO1xuY29uc3QgX3JvdXRlbWF0Y2hlciA9IHJlcXVpcmUoXCIuL3JvdXRlLW1hdGNoZXJcIik7XG5jb25zdCBfcm91dGVyZWdleCA9IHJlcXVpcmUoXCIuL3JvdXRlLXJlZ2V4XCIpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGVBcyhyb3V0ZSwgYXNQYXRobmFtZSwgcXVlcnkpIHtcbiAgICBsZXQgaW50ZXJwb2xhdGVkUm91dGUgPSBcIlwiO1xuICAgIGNvbnN0IGR5bmFtaWNSZWdleCA9ICgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShyb3V0ZSk7XG4gICAgY29uc3QgZHluYW1pY0dyb3VwcyA9IGR5bmFtaWNSZWdleC5ncm91cHM7XG4gICAgY29uc3QgZHluYW1pY01hdGNoZXMgPSAvLyBUcnkgdG8gbWF0Y2ggdGhlIGR5bmFtaWMgcm91dGUgYWdhaW5zdCB0aGUgYXNQYXRoXG4gICAgKGFzUGF0aG5hbWUgIT09IHJvdXRlID8gKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKShkeW5hbWljUmVnZXgpKGFzUGF0aG5hbWUpIDogXCJcIikgfHwgLy8gRmFsbCBiYWNrIHRvIHJlYWRpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBocmVmXG4gICAgLy8gVE9ETzogc2hvdWxkIHRoaXMgdGFrZSBwcmlvcml0eTsgYWxzbyBuZWVkIHRvIGNoYW5nZSBpbiB0aGUgcm91dGVyLlxuICAgIHF1ZXJ5O1xuICAgIGludGVycG9sYXRlZFJvdXRlID0gcm91dGU7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmtleXMoZHluYW1pY0dyb3Vwcyk7XG4gICAgaWYgKCFwYXJhbXMuZXZlcnkoKHBhcmFtKT0+e1xuICAgICAgICBsZXQgdmFsdWUgPSBkeW5hbWljTWF0Y2hlc1twYXJhbV0gfHwgXCJcIjtcbiAgICAgICAgY29uc3QgeyByZXBlYXQsIG9wdGlvbmFsIH0gPSBkeW5hbWljR3JvdXBzW3BhcmFtXTtcbiAgICAgICAgLy8gc3VwcG9ydCBzaW5nbGUtbGV2ZWwgY2F0Y2gtYWxsXG4gICAgICAgIC8vIFRPRE86IG1vcmUgcm9idXN0IGhhbmRsaW5nIGZvciB1c2VyLWVycm9yIChwYXNzaW5nIGAvYClcbiAgICAgICAgbGV0IHJlcGxhY2VkID0gXCJbXCIgKyAocmVwZWF0ID8gXCIuLi5cIiA6IFwiXCIpICsgcGFyYW0gKyBcIl1cIjtcbiAgICAgICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgICAgICByZXBsYWNlZCA9ICghdmFsdWUgPyBcIi9cIiA6IFwiXCIpICsgXCJbXCIgKyByZXBsYWNlZCArIFwiXVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBlYXQgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB2YWx1ZSA9IFtcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiAob3B0aW9uYWwgfHwgcGFyYW0gaW4gZHluYW1pY01hdGNoZXMpICYmIC8vIEludGVycG9sYXRlIGdyb3VwIGludG8gZGF0YSBVUkwgaWYgcHJlc2VudFxuICAgICAgICAoaW50ZXJwb2xhdGVkUm91dGUgPSBpbnRlcnBvbGF0ZWRSb3V0ZS5yZXBsYWNlKHJlcGxhY2VkLCByZXBlYXQgPyB2YWx1ZS5tYXAoLy8gdGhlc2UgdmFsdWVzIHNob3VsZCBiZSBmdWxseSBlbmNvZGVkIGluc3RlYWQgb2YganVzdFxuICAgICAgICAvLyBwYXRoIGRlbGltaXRlciBlc2NhcGVkIHNpbmNlIHRoZXkgYXJlIGJlaW5nIGluc2VydGVkXG4gICAgICAgIC8vIGludG8gdGhlIFVSTCBhbmQgd2UgZXhwZWN0IFVSTCBlbmNvZGVkIHNlZ21lbnRzXG4gICAgICAgIC8vIHdoZW4gcGFyc2luZyBkeW5hbWljIHJvdXRlIHBhcmFtc1xuICAgICAgICAoc2VnbWVudCk9PmVuY29kZVVSSUNvbXBvbmVudChzZWdtZW50KSkuam9pbihcIi9cIikgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKSB8fCBcIi9cIik7XG4gICAgfSkpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkUm91dGUgPSBcIlwiIC8vIGRpZCBub3Qgc2F0aXNmeSBhbGwgcmVxdWlyZW1lbnRzXG4gICAgICAgIDtcbiAgICAvLyBuLmIuIFdlIGlnbm9yZSB0aGlzIGVycm9yIGJlY2F1c2Ugd2UgaGFuZGxlIHdhcm5pbmcgZm9yIHRoaXMgY2FzZSBpblxuICAgIC8vIGRldmVsb3BtZW50IGluIHRoZSBgPExpbms+YCBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgcmVzdWx0OiBpbnRlcnBvbGF0ZWRSb3V0ZVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVycG9sYXRlLWFzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJpbnRlcnBvbGF0ZUFzIiwiX3JvdXRlbWF0Y2hlciIsInJlcXVpcmUiLCJfcm91dGVyZWdleCIsInJvdXRlIiwiYXNQYXRobmFtZSIsInF1ZXJ5IiwiaW50ZXJwb2xhdGVkUm91dGUiLCJkeW5hbWljUmVnZXgiLCJnZXRSb3V0ZVJlZ2V4IiwiZHluYW1pY0dyb3VwcyIsImdyb3VwcyIsImR5bmFtaWNNYXRjaGVzIiwiZ2V0Um91dGVNYXRjaGVyIiwicGFyYW1zIiwia2V5cyIsImV2ZXJ5IiwicGFyYW0iLCJyZXBlYXQiLCJvcHRpb25hbCIsInJlcGxhY2VkIiwiQXJyYXkiLCJpc0FycmF5IiwicmVwbGFjZSIsIm1hcCIsInNlZ21lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwicmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isDynamicRoute\", ({\n    enumerable: true,\n    get: function() {\n        return isDynamicRoute;\n    }\n}));\nconst _interceptionroutes = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(app-pages-browser)/./node_modules/next/dist/server/future/helpers/interception-routes.js\");\n// Identify /[param]/ in route string\nconst TEST_ROUTE = /\\/\\[[^/]+?\\](?=\\/|$)/;\nfunction isDynamicRoute(route) {\n    if ((0, _interceptionroutes.isInterceptionRouteAppPath)(route)) {\n        route = (0, _interceptionroutes.extractInterceptionRouteInformation)(route).interceptedRoute;\n    }\n    return TEST_ROUTE.test(route);\n} //# sourceMappingURL=is-dynamic.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtZHluYW1pYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsa0RBQWlEO0lBQzdDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsc0JBQXNCQyxtQkFBT0EsQ0FBQyx3SkFBdUQ7QUFDM0YscUNBQXFDO0FBQ3JDLE1BQU1DLGFBQWE7QUFDbkIsU0FBU0gsZUFBZUksS0FBSztJQUN6QixJQUFJLENBQUMsR0FBR0gsb0JBQW9CSSwwQkFBMEIsRUFBRUQsUUFBUTtRQUM1REEsUUFBUSxDQUFDLEdBQUdILG9CQUFvQkssbUNBQW1DLEVBQUVGLE9BQU9HLGdCQUFnQjtJQUNoRztJQUNBLE9BQU9KLFdBQVdLLElBQUksQ0FBQ0o7QUFDM0IsRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9pcy1keW5hbWljLmpzPzQ2ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0R5bmFtaWNSb3V0ZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNEeW5hbWljUm91dGU7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJjZXB0aW9ucm91dGVzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3NlcnZlci9mdXR1cmUvaGVscGVycy9pbnRlcmNlcHRpb24tcm91dGVzXCIpO1xuLy8gSWRlbnRpZnkgL1twYXJhbV0vIGluIHJvdXRlIHN0cmluZ1xuY29uc3QgVEVTVF9ST1VURSA9IC9cXC9cXFtbXi9dKz9cXF0oPz1cXC98JCkvO1xuZnVuY3Rpb24gaXNEeW5hbWljUm91dGUocm91dGUpIHtcbiAgICBpZiAoKDAsIF9pbnRlcmNlcHRpb25yb3V0ZXMuaXNJbnRlcmNlcHRpb25Sb3V0ZUFwcFBhdGgpKHJvdXRlKSkge1xuICAgICAgICByb3V0ZSA9ICgwLCBfaW50ZXJjZXB0aW9ucm91dGVzLmV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uKShyb3V0ZSkuaW50ZXJjZXB0ZWRSb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRFU1RfUk9VVEUudGVzdChyb3V0ZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWR5bmFtaWMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImlzRHluYW1pY1JvdXRlIiwiX2ludGVyY2VwdGlvbnJvdXRlcyIsInJlcXVpcmUiLCJURVNUX1JPVVRFIiwicm91dGUiLCJpc0ludGVyY2VwdGlvblJvdXRlQXBwUGF0aCIsImV4dHJhY3RJbnRlcmNlcHRpb25Sb3V0ZUluZm9ybWF0aW9uIiwiaW50ZXJjZXB0ZWRSb3V0ZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/is-local-url.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isLocalURL\", ({\n    enumerable: true,\n    get: function() {\n        return isLocalURL;\n    }\n}));\nconst _utils = __webpack_require__(/*! ../../utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nconst _hasbasepath = __webpack_require__(/*! ../../../../client/has-base-path */ \"(app-pages-browser)/./node_modules/next/dist/client/has-base-path.js\");\nfunction isLocalURL(url) {\n    // prevent a hydration mismatch on href for url with anchor refs\n    if (!(0, _utils.isAbsoluteUrl)(url)) return true;\n    try {\n        // absolute urls can be local if they are on the same origin\n        const locationOrigin = (0, _utils.getLocationOrigin)();\n        const resolved = new URL(url, locationOrigin);\n        return resolved.origin === locationOrigin && (0, _hasbasepath.hasBasePath)(resolved.pathname);\n    } catch (_) {\n        return false;\n    }\n} //# sourceMappingURL=is-local-url.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvaXMtbG9jYWwtdXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw4Q0FBNkM7SUFDekNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyxxRkFBYTtBQUNwQyxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyw4R0FBa0M7QUFDL0QsU0FBU0YsV0FBV0ksR0FBRztJQUNuQixnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDLENBQUMsR0FBR0gsT0FBT0ksYUFBYSxFQUFFRCxNQUFNLE9BQU87SUFDNUMsSUFBSTtRQUNBLDREQUE0RDtRQUM1RCxNQUFNRSxpQkFBaUIsQ0FBQyxHQUFHTCxPQUFPTSxpQkFBaUI7UUFDbkQsTUFBTUMsV0FBVyxJQUFJQyxJQUFJTCxLQUFLRTtRQUM5QixPQUFPRSxTQUFTRSxNQUFNLEtBQUtKLGtCQUFrQixDQUFDLEdBQUdILGFBQWFRLFdBQVcsRUFBRUgsU0FBU0ksUUFBUTtJQUNoRyxFQUFFLE9BQU9DLEdBQUc7UUFDUixPQUFPO0lBQ1g7QUFDSixFQUVBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2lzLWxvY2FsLXVybC5qcz81ZDI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNMb2NhbFVSTFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNMb2NhbFVSTDtcbiAgICB9XG59KTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IF9oYXNiYXNlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvaGFzLWJhc2UtcGF0aFwiKTtcbmZ1bmN0aW9uIGlzTG9jYWxVUkwodXJsKSB7XG4gICAgLy8gcHJldmVudCBhIGh5ZHJhdGlvbiBtaXNtYXRjaCBvbiBocmVmIGZvciB1cmwgd2l0aCBhbmNob3IgcmVmc1xuICAgIGlmICghKDAsIF91dGlscy5pc0Fic29sdXRlVXJsKSh1cmwpKSByZXR1cm4gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBhYnNvbHV0ZSB1cmxzIGNhbiBiZSBsb2NhbCBpZiB0aGV5IGFyZSBvbiB0aGUgc2FtZSBvcmlnaW5cbiAgICAgICAgY29uc3QgbG9jYXRpb25PcmlnaW4gPSAoMCwgX3V0aWxzLmdldExvY2F0aW9uT3JpZ2luKSgpO1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IG5ldyBVUkwodXJsLCBsb2NhdGlvbk9yaWdpbik7XG4gICAgICAgIHJldHVybiByZXNvbHZlZC5vcmlnaW4gPT09IGxvY2F0aW9uT3JpZ2luICYmICgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKHJlc29sdmVkLnBhdGhuYW1lKTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWxvY2FsLXVybC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiaXNMb2NhbFVSTCIsIl91dGlscyIsInJlcXVpcmUiLCJfaGFzYmFzZXBhdGgiLCJ1cmwiLCJpc0Fic29sdXRlVXJsIiwibG9jYXRpb25PcmlnaW4iLCJnZXRMb2NhdGlvbk9yaWdpbiIsInJlc29sdmVkIiwiVVJMIiwib3JpZ2luIiwiaGFzQmFzZVBhdGgiLCJwYXRobmFtZSIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/omit.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"omit\", ({\n    enumerable: true,\n    get: function() {\n        return omit;\n    }\n}));\nfunction omit(object, keys) {\n    const omitted = {};\n    Object.keys(object).forEach((key)=>{\n        if (!keys.includes(key)) {\n            omitted[key] = object[key];\n        }\n    });\n    return omitted;\n} //# sourceMappingURL=omit.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvb21pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsd0NBQXVDO0lBQ25DSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsS0FBS0MsTUFBTSxFQUFFQyxJQUFJO0lBQ3RCLE1BQU1DLFVBQVUsQ0FBQztJQUNqQlQsT0FBT1EsSUFBSSxDQUFDRCxRQUFRRyxPQUFPLENBQUMsQ0FBQ0M7UUFDekIsSUFBSSxDQUFDSCxLQUFLSSxRQUFRLENBQUNELE1BQU07WUFDckJGLE9BQU8sQ0FBQ0UsSUFBSSxHQUFHSixNQUFNLENBQUNJLElBQUk7UUFDOUI7SUFDSjtJQUNBLE9BQU9GO0FBQ1gsRUFFQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9vbWl0LmpzP2ZiNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJvbWl0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvbWl0O1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgICBjb25zdCBvbWl0dGVkID0ge307XG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGlmICgha2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBvbWl0dGVkW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvbWl0dGVkO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJvbWl0Iiwib2JqZWN0Iiwia2V5cyIsIm9taXR0ZWQiLCJmb3JFYWNoIiwia2V5IiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/omit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/querystring.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    searchParamsToUrlQuery: function() {\n        return searchParamsToUrlQuery;\n    },\n    urlQueryToSearchParams: function() {\n        return urlQueryToSearchParams;\n    },\n    assign: function() {\n        return assign;\n    }\n});\nfunction searchParamsToUrlQuery(searchParams) {\n    const query = {};\n    searchParams.forEach((value, key)=>{\n        if (typeof query[key] === \"undefined\") {\n            query[key] = value;\n        } else if (Array.isArray(query[key])) {\n            query[key].push(value);\n        } else {\n            query[key] = [\n                query[key],\n                value\n            ];\n        }\n    });\n    return query;\n}\nfunction stringifyUrlQueryParam(param) {\n    if (typeof param === \"string\" || typeof param === \"number\" && !isNaN(param) || typeof param === \"boolean\") {\n        return String(param);\n    } else {\n        return \"\";\n    }\n}\nfunction urlQueryToSearchParams(urlQuery) {\n    const result = new URLSearchParams();\n    Object.entries(urlQuery).forEach((param)=>{\n        let [key, value] = param;\n        if (Array.isArray(value)) {\n            value.forEach((item)=>result.append(key, stringifyUrlQueryParam(item)));\n        } else {\n            result.set(key, stringifyUrlQueryParam(value));\n        }\n    });\n    return result;\n}\nfunction assign(target) {\n    for(var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        searchParamsList[_key - 1] = arguments[_key];\n    }\n    searchParamsList.forEach((searchParams)=>{\n        Array.from(searchParams.keys()).forEach((key)=>target.delete(key));\n        searchParams.forEach((value, key)=>target.append(key, value));\n    });\n    return target;\n} //# sourceMappingURL=querystring.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0FBQ0o7QUFDQSxTQUFTRix1QkFBdUJTLFlBQVk7SUFDeEMsTUFBTUMsUUFBUSxDQUFDO0lBQ2ZELGFBQWFFLE9BQU8sQ0FBQyxDQUFDYixPQUFPYztRQUN6QixJQUFJLE9BQU9GLEtBQUssQ0FBQ0UsSUFBSSxLQUFLLGFBQWE7WUFDbkNGLEtBQUssQ0FBQ0UsSUFBSSxHQUFHZDtRQUNqQixPQUFPLElBQUllLE1BQU1DLE9BQU8sQ0FBQ0osS0FBSyxDQUFDRSxJQUFJLEdBQUc7WUFDbENGLEtBQUssQ0FBQ0UsSUFBSSxDQUFDRyxJQUFJLENBQUNqQjtRQUNwQixPQUFPO1lBQ0hZLEtBQUssQ0FBQ0UsSUFBSSxHQUFHO2dCQUNURixLQUFLLENBQUNFLElBQUk7Z0JBQ1ZkO2FBQ0g7UUFDTDtJQUNKO0lBQ0EsT0FBT1k7QUFDWDtBQUNBLFNBQVNNLHVCQUF1QkMsS0FBSztJQUNqQyxJQUFJLE9BQU9BLFVBQVUsWUFBWSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0MsTUFBTUQsVUFBVSxPQUFPQSxVQUFVLFdBQVc7UUFDdkcsT0FBT0UsT0FBT0Y7SUFDbEIsT0FBTztRQUNILE9BQU87SUFDWDtBQUNKO0FBQ0EsU0FBU2hCLHVCQUF1Qm1CLFFBQVE7SUFDcEMsTUFBTUMsU0FBUyxJQUFJQztJQUNuQjNCLE9BQU80QixPQUFPLENBQUNILFVBQVVULE9BQU8sQ0FBQyxDQUFDTTtRQUM5QixJQUFJLENBQUNMLEtBQUtkLE1BQU0sR0FBR21CO1FBQ25CLElBQUlKLE1BQU1DLE9BQU8sQ0FBQ2hCLFFBQVE7WUFDdEJBLE1BQU1hLE9BQU8sQ0FBQyxDQUFDYSxPQUFPSCxPQUFPSSxNQUFNLENBQUNiLEtBQUtJLHVCQUF1QlE7UUFDcEUsT0FBTztZQUNISCxPQUFPSyxHQUFHLENBQUNkLEtBQUtJLHVCQUF1QmxCO1FBQzNDO0lBQ0o7SUFDQSxPQUFPdUI7QUFDWDtBQUNBLFNBQVNuQixPQUFPRSxNQUFNO0lBQ2xCLElBQUksSUFBSXVCLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsbUJBQW1CLElBQUlqQixNQUFNYyxPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJSSxPQUFPLEdBQUdBLE9BQU9KLE1BQU1JLE9BQU87UUFDbEhELGdCQUFnQixDQUFDQyxPQUFPLEVBQUUsR0FBR0gsU0FBUyxDQUFDRyxLQUFLO0lBQ2hEO0lBQ0FELGlCQUFpQm5CLE9BQU8sQ0FBQyxDQUFDRjtRQUN0QkksTUFBTW1CLElBQUksQ0FBQ3ZCLGFBQWF3QixJQUFJLElBQUl0QixPQUFPLENBQUMsQ0FBQ0MsTUFBTVIsT0FBTzhCLE1BQU0sQ0FBQ3RCO1FBQzdESCxhQUFhRSxPQUFPLENBQUMsQ0FBQ2IsT0FBT2MsTUFBTVIsT0FBT3FCLE1BQU0sQ0FBQ2IsS0FBS2Q7SUFDMUQ7SUFDQSxPQUFPTTtBQUNYLEVBRUEsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcXVlcnlzdHJpbmcuanM/MDE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnk6IG51bGwsXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogbnVsbCxcbiAgICBhc3NpZ246IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgc2VhcmNoUGFyYW1zVG9VcmxRdWVyeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZWFyY2hQYXJhbXNUb1VybFF1ZXJ5O1xuICAgIH0sXG4gICAgdXJsUXVlcnlUb1NlYXJjaFBhcmFtczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB1cmxRdWVyeVRvU2VhcmNoUGFyYW1zO1xuICAgIH0sXG4gICAgYXNzaWduOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbjtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHNlYXJjaFBhcmFtc1RvVXJsUXVlcnkoc2VhcmNoUGFyYW1zKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PntcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeVtrZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgcXVlcnlba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSBbXG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0ocGFyYW0pIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4ocGFyYW0pIHx8IHR5cGVvZiBwYXJhbSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gdXJsUXVlcnlUb1NlYXJjaFBhcmFtcyh1cmxRdWVyeSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBPYmplY3QuZW50cmllcyh1cmxRdWVyeSkuZm9yRWFjaCgocGFyYW0pPT57XG4gICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBwYXJhbTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKChpdGVtKT0+cmVzdWx0LmFwcGVuZChrZXksIHN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0oaXRlbSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBzdHJpbmdpZnlVcmxRdWVyeVBhcmFtKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGZvcih2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNlYXJjaFBhcmFtc0xpc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKyl7XG4gICAgICAgIHNlYXJjaFBhcmFtc0xpc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBzZWFyY2hQYXJhbXNMaXN0LmZvckVhY2goKHNlYXJjaFBhcmFtcyk9PntcbiAgICAgICAgQXJyYXkuZnJvbShzZWFyY2hQYXJhbXMua2V5cygpKS5mb3JFYWNoKChrZXkpPT50YXJnZXQuZGVsZXRlKGtleSkpO1xuICAgICAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSk9PnRhcmdldC5hcHBlbmQoa2V5LCB2YWx1ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsInNlYXJjaFBhcmFtc1RvVXJsUXVlcnkiLCJ1cmxRdWVyeVRvU2VhcmNoUGFyYW1zIiwiYXNzaWduIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2VhcmNoUGFyYW1zIiwicXVlcnkiLCJmb3JFYWNoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsInN0cmluZ2lmeVVybFF1ZXJ5UGFyYW0iLCJwYXJhbSIsImlzTmFOIiwiU3RyaW5nIiwidXJsUXVlcnkiLCJyZXN1bHQiLCJVUkxTZWFyY2hQYXJhbXMiLCJlbnRyaWVzIiwiaXRlbSIsImFwcGVuZCIsInNldCIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzZWFyY2hQYXJhbXNMaXN0IiwiX2tleSIsImZyb20iLCJrZXlzIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/querystring.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-matcher.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getRouteMatcher\", ({\n    enumerable: true,\n    get: function() {\n        return getRouteMatcher;\n    }\n}));\nconst _utils = __webpack_require__(/*! ../../utils */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\");\nfunction getRouteMatcher(param) {\n    let { re, groups } = param;\n    return (pathname)=>{\n        const routeMatch = re.exec(pathname);\n        if (!routeMatch) {\n            return false;\n        }\n        const decode = (param)=>{\n            try {\n                return decodeURIComponent(param);\n            } catch (_) {\n                throw new _utils.DecodeError(\"failed to decode param\");\n            }\n        };\n        const params = {};\n        Object.keys(groups).forEach((slugName)=>{\n            const g = groups[slugName];\n            const m = routeMatch[g.pos];\n            if (m !== undefined) {\n                params[slugName] = ~m.indexOf(\"/\") ? m.split(\"/\").map((entry)=>decode(entry)) : g.repeat ? [\n                    decode(m)\n                ] : decode(m);\n            }\n        });\n        return params;\n    };\n} //# sourceMappingURL=route-matcher.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtbWF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsbURBQWtEO0lBQzlDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMscUZBQWE7QUFDcEMsU0FBU0YsZ0JBQWdCRyxLQUFLO0lBQzFCLElBQUksRUFBRUMsRUFBRSxFQUFFQyxNQUFNLEVBQUUsR0FBR0Y7SUFDckIsT0FBTyxDQUFDRztRQUNKLE1BQU1DLGFBQWFILEdBQUdJLElBQUksQ0FBQ0Y7UUFDM0IsSUFBSSxDQUFDQyxZQUFZO1lBQ2IsT0FBTztRQUNYO1FBQ0EsTUFBTUUsU0FBUyxDQUFDTjtZQUNaLElBQUk7Z0JBQ0EsT0FBT08sbUJBQW1CUDtZQUM5QixFQUFFLE9BQU9RLEdBQUc7Z0JBQ1IsTUFBTSxJQUFJVixPQUFPVyxXQUFXLENBQUM7WUFDakM7UUFDSjtRQUNBLE1BQU1DLFNBQVMsQ0FBQztRQUNoQm5CLE9BQU9vQixJQUFJLENBQUNULFFBQVFVLE9BQU8sQ0FBQyxDQUFDQztZQUN6QixNQUFNQyxJQUFJWixNQUFNLENBQUNXLFNBQVM7WUFDMUIsTUFBTUUsSUFBSVgsVUFBVSxDQUFDVSxFQUFFRSxHQUFHLENBQUM7WUFDM0IsSUFBSUQsTUFBTUUsV0FBVztnQkFDakJQLE1BQU0sQ0FBQ0csU0FBUyxHQUFHLENBQUNFLEVBQUVHLE9BQU8sQ0FBQyxPQUFPSCxFQUFFSSxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLFFBQVFmLE9BQU9lLFVBQVVQLEVBQUVRLE1BQU0sR0FBRztvQkFDdkZoQixPQUFPUztpQkFDVixHQUFHVCxPQUFPUztZQUNmO1FBQ0o7UUFDQSxPQUFPTDtJQUNYO0FBQ0osRUFFQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9yb3V0ZS1tYXRjaGVyLmpzP2M4NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRSb3V0ZU1hdGNoZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldFJvdXRlTWF0Y2hlcjtcbiAgICB9XG59KTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldFJvdXRlTWF0Y2hlcihwYXJhbSkge1xuICAgIGxldCB7IHJlLCBncm91cHMgfSA9IHBhcmFtO1xuICAgIHJldHVybiAocGF0aG5hbWUpPT57XG4gICAgICAgIGNvbnN0IHJvdXRlTWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcbiAgICAgICAgaWYgKCFyb3V0ZU1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjb2RlID0gKHBhcmFtKT0+e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX3V0aWxzLkRlY29kZUVycm9yKFwiZmFpbGVkIHRvIGRlY29kZSBwYXJhbVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGdyb3VwcykuZm9yRWFjaCgoc2x1Z05hbWUpPT57XG4gICAgICAgICAgICBjb25zdCBnID0gZ3JvdXBzW3NsdWdOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSByb3V0ZU1hdGNoW2cucG9zXTtcbiAgICAgICAgICAgIGlmIChtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNbc2x1Z05hbWVdID0gfm0uaW5kZXhPZihcIi9cIikgPyBtLnNwbGl0KFwiL1wiKS5tYXAoKGVudHJ5KT0+ZGVjb2RlKGVudHJ5KSkgOiBnLnJlcGVhdCA/IFtcbiAgICAgICAgICAgICAgICAgICAgZGVjb2RlKG0pXG4gICAgICAgICAgICAgICAgXSA6IGRlY29kZShtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGUtbWF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0Um91dGVNYXRjaGVyIiwiX3V0aWxzIiwicmVxdWlyZSIsInBhcmFtIiwicmUiLCJncm91cHMiLCJwYXRobmFtZSIsInJvdXRlTWF0Y2giLCJleGVjIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiXyIsIkRlY29kZUVycm9yIiwicGFyYW1zIiwia2V5cyIsImZvckVhY2giLCJzbHVnTmFtZSIsImciLCJtIiwicG9zIiwidW5kZWZpbmVkIiwiaW5kZXhPZiIsInNwbGl0IiwibWFwIiwiZW50cnkiLCJyZXBlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-matcher.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/route-regex.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getRouteRegex: function() {\n        return getRouteRegex;\n    },\n    getNamedRouteRegex: function() {\n        return getNamedRouteRegex;\n    },\n    getNamedMiddlewareRegex: function() {\n        return getNamedMiddlewareRegex;\n    }\n});\nconst _interceptionroutes = __webpack_require__(/*! ../../../../server/future/helpers/interception-routes */ \"(app-pages-browser)/./node_modules/next/dist/server/future/helpers/interception-routes.js\");\nconst _escaperegexp = __webpack_require__(/*! ../../escape-regexp */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/escape-regexp.js\");\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst NEXT_INTERCEPTION_MARKER_PREFIX = \"nxtI\";\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route. Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n */ function parseParameter(param) {\n    const optional = param.startsWith(\"[\") && param.endsWith(\"]\");\n    if (optional) {\n        param = param.slice(1, -1);\n    }\n    const repeat = param.startsWith(\"...\");\n    if (repeat) {\n        param = param.slice(3);\n    }\n    return {\n        key: param,\n        repeat,\n        optional\n    };\n}\nfunction getParametrizedRoute(route) {\n    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const groups = {};\n    let groupIndex = 1;\n    return {\n        parameterizedRoute: segments.map((segment)=>{\n            const markerMatch = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (markerMatch && paramMatches) {\n                const { key, optional, repeat } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(markerMatch) + \"([^/]+?)\";\n            } else if (paramMatches) {\n                const { key, repeat, optional } = parseParameter(paramMatches[1]);\n                groups[key] = {\n                    pos: groupIndex++,\n                    repeat,\n                    optional\n                };\n                return repeat ? optional ? \"(?:/(.+?))?\" : \"/(.+?)\" : \"/([^/]+?)\";\n            } else {\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        groups\n    };\n}\nfunction getRouteRegex(normalizedRoute) {\n    const { parameterizedRoute, groups } = getParametrizedRoute(normalizedRoute);\n    return {\n        re: new RegExp(\"^\" + parameterizedRoute + \"(?:/)?$\"),\n        groups: groups\n    };\n}\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */ function buildGetSafeRouteKey() {\n    let i = 0;\n    return ()=>{\n        let routeKey = \"\";\n        let j = ++i;\n        while(j > 0){\n            routeKey += String.fromCharCode(97 + (j - 1) % 26);\n            j = Math.floor((j - 1) / 26);\n        }\n        return routeKey;\n    };\n}\nfunction getSafeKeyFromSegment(param) {\n    let { interceptionMarker, getSafeRouteKey, segment, routeKeys, keyPrefix } = param;\n    const { key, optional, repeat } = parseParameter(segment);\n    // replace any non-word characters since they can break\n    // the named regex\n    let cleanedKey = key.replace(/\\W/g, \"\");\n    if (keyPrefix) {\n        cleanedKey = \"\" + keyPrefix + cleanedKey;\n    }\n    let invalidKey = false;\n    // check if the key is still invalid and fallback to using a known\n    // safe key\n    if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n        invalidKey = true;\n    }\n    if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n        invalidKey = true;\n    }\n    if (invalidKey) {\n        cleanedKey = getSafeRouteKey();\n    }\n    if (keyPrefix) {\n        routeKeys[cleanedKey] = \"\" + keyPrefix + key;\n    } else {\n        routeKeys[cleanedKey] = key;\n    }\n    // if the segment has an interception marker, make sure that's part of the regex pattern\n    // this is to ensure that the route with the interception marker doesn't incorrectly match\n    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n    const interceptionPrefix = interceptionMarker ? (0, _escaperegexp.escapeStringRegexp)(interceptionMarker) : \"\";\n    return repeat ? optional ? \"(?:/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?))?\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">.+?)\" : \"/\" + interceptionPrefix + \"(?<\" + cleanedKey + \">[^/]+?)\";\n}\nfunction getNamedParametrizedRoute(route, prefixRouteKeys) {\n    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split(\"/\");\n    const getSafeRouteKey = buildGetSafeRouteKey();\n    const routeKeys = {};\n    return {\n        namedParameterizedRoute: segments.map((segment)=>{\n            const hasInterceptionMarker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.some((m)=>segment.startsWith(m));\n            const paramMatches = segment.match(/\\[((?:\\[.*\\])|.+)\\]/) // Check for parameters\n            ;\n            if (hasInterceptionMarker && paramMatches) {\n                const [usedMarker] = segment.split(paramMatches[0]);\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    interceptionMarker: usedMarker,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n                });\n            } else if (paramMatches) {\n                return getSafeKeyFromSegment({\n                    getSafeRouteKey,\n                    segment: paramMatches[1],\n                    routeKeys,\n                    keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined\n                });\n            } else {\n                return \"/\" + (0, _escaperegexp.escapeStringRegexp)(segment);\n            }\n        }).join(\"\"),\n        routeKeys\n    };\n}\nfunction getNamedRouteRegex(normalizedRoute, prefixRouteKey) {\n    const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey);\n    return {\n        ...getRouteRegex(normalizedRoute),\n        namedRegex: \"^\" + result.namedParameterizedRoute + \"(?:/)?$\",\n        routeKeys: result.routeKeys\n    };\n}\nfunction getNamedMiddlewareRegex(normalizedRoute, options) {\n    const { parameterizedRoute } = getParametrizedRoute(normalizedRoute);\n    const { catchAll = true } = options;\n    if (parameterizedRoute === \"/\") {\n        let catchAllRegex = catchAll ? \".*\" : \"\";\n        return {\n            namedRegex: \"^/\" + catchAllRegex + \"$\"\n        };\n    }\n    const { namedParameterizedRoute } = getNamedParametrizedRoute(normalizedRoute, false);\n    let catchAllGroupedRegex = catchAll ? \"(?:(/.*)?)\" : \"\";\n    return {\n        namedRegex: \"^\" + namedParameterizedRoute + catchAllGroupedRegex + \"$\"\n    };\n} //# sourceMappingURL=route-regex.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcm91dGUtcmVnZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLGVBQWU7UUFDWCxPQUFPQTtJQUNYO0lBQ0FDLG9CQUFvQjtRQUNoQixPQUFPQTtJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxzQkFBc0JDLG1CQUFPQSxDQUFDLHdKQUF1RDtBQUMzRixNQUFNQyxnQkFBZ0JELG1CQUFPQSxDQUFDLHFHQUFxQjtBQUNuRCxNQUFNRSx1QkFBdUJGLG1CQUFPQSxDQUFDLDhIQUF5QjtBQUM5RCxNQUFNRywwQkFBMEI7QUFDaEMsTUFBTUMsa0NBQWtDO0FBQ3hDOzs7Ozs7O0NBT0MsR0FBRyxTQUFTQyxlQUFlQyxLQUFLO0lBQzdCLE1BQU1DLFdBQVdELE1BQU1FLFVBQVUsQ0FBQyxRQUFRRixNQUFNRyxRQUFRLENBQUM7SUFDekQsSUFBSUYsVUFBVTtRQUNWRCxRQUFRQSxNQUFNSSxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzVCO0lBQ0EsTUFBTUMsU0FBU0wsTUFBTUUsVUFBVSxDQUFDO0lBQ2hDLElBQUlHLFFBQVE7UUFDUkwsUUFBUUEsTUFBTUksS0FBSyxDQUFDO0lBQ3hCO0lBQ0EsT0FBTztRQUNIRSxLQUFLTjtRQUNMSztRQUNBSjtJQUNKO0FBQ0o7QUFDQSxTQUFTTSxxQkFBcUJDLEtBQUs7SUFD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LE9BQU87Z0JBQ0gsT0FBTyxNQUFNLENBQUMsR0FBRzVELGNBQWM2QixrQkFBa0IsRUFBRVI7WUFDdkQ7UUFDSixHQUFHUyxJQUFJLENBQUM7UUFDUmU7SUFDSjtBQUNKO0FBQ0EsU0FBU3ZELG1CQUFtQnlDLGVBQWUsRUFBRThCLGNBQWM7SUFDdkQsTUFBTUMsU0FBU1IsMEJBQTBCdkIsaUJBQWlCOEI7SUFDMUQsT0FBTztRQUNILEdBQUd4RSxjQUFjMEMsZ0JBQWdCO1FBQ2pDZ0MsWUFBWSxNQUFNRCxPQUFPTix1QkFBdUIsR0FBRztRQUNuRFgsV0FBV2lCLE9BQU9qQixTQUFTO0lBQy9CO0FBQ0o7QUFDQSxTQUFTdEQsd0JBQXdCd0MsZUFBZSxFQUFFaUMsT0FBTztJQUNyRCxNQUFNLEVBQUU3QyxrQkFBa0IsRUFBRSxHQUFHUCxxQkFBcUJtQjtJQUNwRCxNQUFNLEVBQUVrQyxXQUFXLElBQUksRUFBRSxHQUFHRDtJQUM1QixJQUFJN0MsdUJBQXVCLEtBQUs7UUFDNUIsSUFBSStDLGdCQUFnQkQsV0FBVyxPQUFPO1FBQ3RDLE9BQU87WUFDSEYsWUFBWSxPQUFPRyxnQkFBZ0I7UUFDdkM7SUFDSjtJQUNBLE1BQU0sRUFBRVYsdUJBQXVCLEVBQUUsR0FBR0YsMEJBQTBCdkIsaUJBQWlCO0lBQy9FLElBQUlvQyx1QkFBdUJGLFdBQVcsZUFBZTtJQUNyRCxPQUFPO1FBQ0hGLFlBQVksTUFBTVAsMEJBQTBCVyx1QkFBdUI7SUFDdkU7QUFDSixFQUVBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JvdXRlLXJlZ2V4LmpzP2VhYzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnZXRSb3V0ZVJlZ2V4OiBudWxsLFxuICAgIGdldE5hbWVkUm91dGVSZWdleDogbnVsbCxcbiAgICBnZXROYW1lZE1pZGRsZXdhcmVSZWdleDogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBnZXRSb3V0ZVJlZ2V4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldFJvdXRlUmVnZXg7XG4gICAgfSxcbiAgICBnZXROYW1lZFJvdXRlUmVnZXg6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0TmFtZWRSb3V0ZVJlZ2V4O1xuICAgIH0sXG4gICAgZ2V0TmFtZWRNaWRkbGV3YXJlUmVnZXg6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0TmFtZWRNaWRkbGV3YXJlUmVnZXg7XG4gICAgfVxufSk7XG5jb25zdCBfaW50ZXJjZXB0aW9ucm91dGVzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL3NlcnZlci9mdXR1cmUvaGVscGVycy9pbnRlcmNlcHRpb24tcm91dGVzXCIpO1xuY29uc3QgX2VzY2FwZXJlZ2V4cCA9IHJlcXVpcmUoXCIuLi8uLi9lc2NhcGUtcmVnZXhwXCIpO1xuY29uc3QgX3JlbW92ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9yZW1vdmUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBORVhUX1FVRVJZX1BBUkFNX1BSRUZJWCA9IFwibnh0UFwiO1xuY29uc3QgTkVYVF9JTlRFUkNFUFRJT05fTUFSS0VSX1BSRUZJWCA9IFwibnh0SVwiO1xuLyoqXG4gKiBQYXJzZXMgYSBnaXZlbiBwYXJhbWV0ZXIgZnJvbSBhIHJvdXRlIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjYW4gYmUgdXNlZFxuICogdG8gZ2VuZXJhdGUgdGhlIHBhcmFtZXRyaXplZCByb3V0ZS4gRXhhbXBsZXM6XG4gKiAgIC0gYFsuLi5zbHVnXWAgLT4gYHsga2V5OiAnc2x1ZycsIHJlcGVhdDogdHJ1ZSwgb3B0aW9uYWw6IHRydWUgfWBcbiAqICAgLSBgLi4uc2x1Z2AgLT4gYHsga2V5OiAnc2x1ZycsIHJlcGVhdDogdHJ1ZSwgb3B0aW9uYWw6IGZhbHNlIH1gXG4gKiAgIC0gYFtmb29dYCAtPiBgeyBrZXk6ICdmb28nLCByZXBlYXQ6IGZhbHNlLCBvcHRpb25hbDogdHJ1ZSB9YFxuICogICAtIGBiYXJgIC0+IGB7IGtleTogJ2JhcicsIHJlcGVhdDogZmFsc2UsIG9wdGlvbmFsOiBmYWxzZSB9YFxuICovIGZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgY29uc3Qgb3B0aW9uYWwgPSBwYXJhbS5zdGFydHNXaXRoKFwiW1wiKSAmJiBwYXJhbS5lbmRzV2l0aChcIl1cIik7XG4gICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICAgIHBhcmFtID0gcGFyYW0uc2xpY2UoMSwgLTEpO1xuICAgIH1cbiAgICBjb25zdCByZXBlYXQgPSBwYXJhbS5zdGFydHNXaXRoKFwiLi4uXCIpO1xuICAgIGlmIChyZXBlYXQpIHtcbiAgICAgICAgcGFyYW0gPSBwYXJhbS5zbGljZSgzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBwYXJhbSxcbiAgICAgICAgcmVwZWF0LFxuICAgICAgICBvcHRpb25hbFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRQYXJhbWV0cml6ZWRSb3V0ZShyb3V0ZSkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHJvdXRlKS5zbGljZSgxKS5zcGxpdChcIi9cIik7XG4gICAgY29uc3QgZ3JvdXBzID0ge307XG4gICAgbGV0IGdyb3VwSW5kZXggPSAxO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhcmFtZXRlcml6ZWRSb3V0ZTogc2VnbWVudHMubWFwKChzZWdtZW50KT0+e1xuICAgICAgICAgICAgY29uc3QgbWFya2VyTWF0Y2ggPSBfaW50ZXJjZXB0aW9ucm91dGVzLklOVEVSQ0VQVElPTl9ST1VURV9NQVJLRVJTLmZpbmQoKG0pPT5zZWdtZW50LnN0YXJ0c1dpdGgobSkpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1NYXRjaGVzID0gc2VnbWVudC5tYXRjaCgvXFxbKCg/OlxcWy4qXFxdKXwuKylcXF0vKSAvLyBDaGVjayBmb3IgcGFyYW1ldGVyc1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgaWYgKG1hcmtlck1hdGNoICYmIHBhcmFtTWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5LCBvcHRpb25hbCwgcmVwZWF0IH0gPSBwYXJzZVBhcmFtZXRlcihwYXJhbU1hdGNoZXNbMV0pO1xuICAgICAgICAgICAgICAgIGdyb3Vwc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICBwb3M6IGdyb3VwSW5kZXgrKyxcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0LFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiL1wiICsgKDAsIF9lc2NhcGVyZWdleHAuZXNjYXBlU3RyaW5nUmVnZXhwKShtYXJrZXJNYXRjaCkgKyBcIihbXi9dKz8pXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtTWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5LCByZXBlYXQsIG9wdGlvbmFsIH0gPSBwYXJzZVBhcmFtZXRlcihwYXJhbU1hdGNoZXNbMV0pO1xuICAgICAgICAgICAgICAgIGdyb3Vwc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICBwb3M6IGdyb3VwSW5kZXgrKyxcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0LFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGVhdCA/IG9wdGlvbmFsID8gXCIoPzovKC4rPykpP1wiIDogXCIvKC4rPylcIiA6IFwiLyhbXi9dKz8pXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIi9cIiArICgwLCBfZXNjYXBlcmVnZXhwLmVzY2FwZVN0cmluZ1JlZ2V4cCkoc2VnbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmpvaW4oXCJcIiksXG4gICAgICAgIGdyb3Vwc1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRSb3V0ZSkge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyaXplZFJvdXRlLCBncm91cHMgfSA9IGdldFBhcmFtZXRyaXplZFJvdXRlKG5vcm1hbGl6ZWRSb3V0ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmU6IG5ldyBSZWdFeHAoXCJeXCIgKyBwYXJhbWV0ZXJpemVkUm91dGUgKyBcIig/Oi8pPyRcIiksXG4gICAgICAgIGdyb3VwczogZ3JvdXBzXG4gICAgfTtcbn1cbi8qKlxuICogQnVpbGRzIGEgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSBtaW5pbWFsIHJvdXRlS2V5IHVzaW5nIG9ubHkgYS16IGFuZCBtaW5pbWFsXG4gKiBudW1iZXIgb2YgY2hhcmFjdGVycy5cbiAqLyBmdW5jdGlvbiBidWlsZEdldFNhZmVSb3V0ZUtleSgpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuICgpPT57XG4gICAgICAgIGxldCByb3V0ZUtleSA9IFwiXCI7XG4gICAgICAgIGxldCBqID0gKytpO1xuICAgICAgICB3aGlsZShqID4gMCl7XG4gICAgICAgICAgICByb3V0ZUtleSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgKGogLSAxKSAlIDI2KTtcbiAgICAgICAgICAgIGogPSBNYXRoLmZsb29yKChqIC0gMSkgLyAyNik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdXRlS2V5O1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTYWZlS2V5RnJvbVNlZ21lbnQocGFyYW0pIHtcbiAgICBsZXQgeyBpbnRlcmNlcHRpb25NYXJrZXIsIGdldFNhZmVSb3V0ZUtleSwgc2VnbWVudCwgcm91dGVLZXlzLCBrZXlQcmVmaXggfSA9IHBhcmFtO1xuICAgIGNvbnN0IHsga2V5LCBvcHRpb25hbCwgcmVwZWF0IH0gPSBwYXJzZVBhcmFtZXRlcihzZWdtZW50KTtcbiAgICAvLyByZXBsYWNlIGFueSBub24td29yZCBjaGFyYWN0ZXJzIHNpbmNlIHRoZXkgY2FuIGJyZWFrXG4gICAgLy8gdGhlIG5hbWVkIHJlZ2V4XG4gICAgbGV0IGNsZWFuZWRLZXkgPSBrZXkucmVwbGFjZSgvXFxXL2csIFwiXCIpO1xuICAgIGlmIChrZXlQcmVmaXgpIHtcbiAgICAgICAgY2xlYW5lZEtleSA9IFwiXCIgKyBrZXlQcmVmaXggKyBjbGVhbmVkS2V5O1xuICAgIH1cbiAgICBsZXQgaW52YWxpZEtleSA9IGZhbHNlO1xuICAgIC8vIGNoZWNrIGlmIHRoZSBrZXkgaXMgc3RpbGwgaW52YWxpZCBhbmQgZmFsbGJhY2sgdG8gdXNpbmcgYSBrbm93blxuICAgIC8vIHNhZmUga2V5XG4gICAgaWYgKGNsZWFuZWRLZXkubGVuZ3RoID09PSAwIHx8IGNsZWFuZWRLZXkubGVuZ3RoID4gMzApIHtcbiAgICAgICAgaW52YWxpZEtleSA9IHRydWU7XG4gICAgfVxuICAgIGlmICghaXNOYU4ocGFyc2VJbnQoY2xlYW5lZEtleS5zbGljZSgwLCAxKSkpKSB7XG4gICAgICAgIGludmFsaWRLZXkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaW52YWxpZEtleSkge1xuICAgICAgICBjbGVhbmVkS2V5ID0gZ2V0U2FmZVJvdXRlS2V5KCk7XG4gICAgfVxuICAgIGlmIChrZXlQcmVmaXgpIHtcbiAgICAgICAgcm91dGVLZXlzW2NsZWFuZWRLZXldID0gXCJcIiArIGtleVByZWZpeCArIGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZUtleXNbY2xlYW5lZEtleV0gPSBrZXk7XG4gICAgfVxuICAgIC8vIGlmIHRoZSBzZWdtZW50IGhhcyBhbiBpbnRlcmNlcHRpb24gbWFya2VyLCBtYWtlIHN1cmUgdGhhdCdzIHBhcnQgb2YgdGhlIHJlZ2V4IHBhdHRlcm5cbiAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSB0aGF0IHRoZSByb3V0ZSB3aXRoIHRoZSBpbnRlcmNlcHRpb24gbWFya2VyIGRvZXNuJ3QgaW5jb3JyZWN0bHkgbWF0Y2hcbiAgICAvLyB0aGUgbm9uLWludGVyY2VwdGVkIHJvdXRlIChpZSAvYXBwLyguKVt1c2VybmFtZV0gc2hvdWxkIG5vdCBtYXRjaCAvYXBwL1t1c2VybmFtZV0pXG4gICAgY29uc3QgaW50ZXJjZXB0aW9uUHJlZml4ID0gaW50ZXJjZXB0aW9uTWFya2VyID8gKDAsIF9lc2NhcGVyZWdleHAuZXNjYXBlU3RyaW5nUmVnZXhwKShpbnRlcmNlcHRpb25NYXJrZXIpIDogXCJcIjtcbiAgICByZXR1cm4gcmVwZWF0ID8gb3B0aW9uYWwgPyBcIig/Oi9cIiArIGludGVyY2VwdGlvblByZWZpeCArIFwiKD88XCIgKyBjbGVhbmVkS2V5ICsgXCI+Lis/KSk/XCIgOiBcIi9cIiArIGludGVyY2VwdGlvblByZWZpeCArIFwiKD88XCIgKyBjbGVhbmVkS2V5ICsgXCI+Lis/KVwiIDogXCIvXCIgKyBpbnRlcmNlcHRpb25QcmVmaXggKyBcIig/PFwiICsgY2xlYW5lZEtleSArIFwiPlteL10rPylcIjtcbn1cbmZ1bmN0aW9uIGdldE5hbWVkUGFyYW1ldHJpemVkUm91dGUocm91dGUsIHByZWZpeFJvdXRlS2V5cykge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHJvdXRlKS5zbGljZSgxKS5zcGxpdChcIi9cIik7XG4gICAgY29uc3QgZ2V0U2FmZVJvdXRlS2V5ID0gYnVpbGRHZXRTYWZlUm91dGVLZXkoKTtcbiAgICBjb25zdCByb3V0ZUtleXMgPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZTogc2VnbWVudHMubWFwKChzZWdtZW50KT0+e1xuICAgICAgICAgICAgY29uc3QgaGFzSW50ZXJjZXB0aW9uTWFya2VyID0gX2ludGVyY2VwdGlvbnJvdXRlcy5JTlRFUkNFUFRJT05fUk9VVEVfTUFSS0VSUy5zb21lKChtKT0+c2VnbWVudC5zdGFydHNXaXRoKG0pKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtTWF0Y2hlcyA9IHNlZ21lbnQubWF0Y2goL1xcWygoPzpcXFsuKlxcXSl8LispXFxdLykgLy8gQ2hlY2sgZm9yIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRpb25NYXJrZXIgJiYgcGFyYW1NYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3VzZWRNYXJrZXJdID0gc2VnbWVudC5zcGxpdChwYXJhbU1hdGNoZXNbMF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRTYWZlS2V5RnJvbVNlZ21lbnQoe1xuICAgICAgICAgICAgICAgICAgICBnZXRTYWZlUm91dGVLZXksXG4gICAgICAgICAgICAgICAgICAgIGludGVyY2VwdGlvbk1hcmtlcjogdXNlZE1hcmtlcixcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudDogcGFyYW1NYXRjaGVzWzFdLFxuICAgICAgICAgICAgICAgICAgICByb3V0ZUtleXMsXG4gICAgICAgICAgICAgICAgICAgIGtleVByZWZpeDogcHJlZml4Um91dGVLZXlzID8gTkVYVF9JTlRFUkNFUFRJT05fTUFSS0VSX1BSRUZJWCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbU1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U2FmZUtleUZyb21TZWdtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U2FmZVJvdXRlS2V5LFxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50OiBwYXJhbU1hdGNoZXNbMV0sXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlS2V5cyxcbiAgICAgICAgICAgICAgICAgICAga2V5UHJlZml4OiBwcmVmaXhSb3V0ZUtleXMgPyBORVhUX1FVRVJZX1BBUkFNX1BSRUZJWCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIvXCIgKyAoMCwgX2VzY2FwZXJlZ2V4cC5lc2NhcGVTdHJpbmdSZWdleHApKHNlZ21lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5qb2luKFwiXCIpLFxuICAgICAgICByb3V0ZUtleXNcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0TmFtZWRSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRSb3V0ZSwgcHJlZml4Um91dGVLZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBnZXROYW1lZFBhcmFtZXRyaXplZFJvdXRlKG5vcm1hbGl6ZWRSb3V0ZSwgcHJlZml4Um91dGVLZXkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmdldFJvdXRlUmVnZXgobm9ybWFsaXplZFJvdXRlKSxcbiAgICAgICAgbmFtZWRSZWdleDogXCJeXCIgKyByZXN1bHQubmFtZWRQYXJhbWV0ZXJpemVkUm91dGUgKyBcIig/Oi8pPyRcIixcbiAgICAgICAgcm91dGVLZXlzOiByZXN1bHQucm91dGVLZXlzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE5hbWVkTWlkZGxld2FyZVJlZ2V4KG5vcm1hbGl6ZWRSb3V0ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyaXplZFJvdXRlIH0gPSBnZXRQYXJhbWV0cml6ZWRSb3V0ZShub3JtYWxpemVkUm91dGUpO1xuICAgIGNvbnN0IHsgY2F0Y2hBbGwgPSB0cnVlIH0gPSBvcHRpb25zO1xuICAgIGlmIChwYXJhbWV0ZXJpemVkUm91dGUgPT09IFwiL1wiKSB7XG4gICAgICAgIGxldCBjYXRjaEFsbFJlZ2V4ID0gY2F0Y2hBbGwgPyBcIi4qXCIgOiBcIlwiO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZWRSZWdleDogXCJeL1wiICsgY2F0Y2hBbGxSZWdleCArIFwiJFwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZWRQYXJhbWV0ZXJpemVkUm91dGUgfSA9IGdldE5hbWVkUGFyYW1ldHJpemVkUm91dGUobm9ybWFsaXplZFJvdXRlLCBmYWxzZSk7XG4gICAgbGV0IGNhdGNoQWxsR3JvdXBlZFJlZ2V4ID0gY2F0Y2hBbGwgPyBcIig/OigvLiopPylcIiA6IFwiXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZWRSZWdleDogXCJeXCIgKyBuYW1lZFBhcmFtZXRlcml6ZWRSb3V0ZSArIGNhdGNoQWxsR3JvdXBlZFJlZ2V4ICsgXCIkXCJcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1yZWdleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJnZXRSb3V0ZVJlZ2V4IiwiZ2V0TmFtZWRSb3V0ZVJlZ2V4IiwiZ2V0TmFtZWRNaWRkbGV3YXJlUmVnZXgiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfaW50ZXJjZXB0aW9ucm91dGVzIiwicmVxdWlyZSIsIl9lc2NhcGVyZWdleHAiLCJfcmVtb3ZldHJhaWxpbmdzbGFzaCIsIk5FWFRfUVVFUllfUEFSQU1fUFJFRklYIiwiTkVYVF9JTlRFUkNFUFRJT05fTUFSS0VSX1BSRUZJWCIsInBhcnNlUGFyYW1ldGVyIiwicGFyYW0iLCJvcHRpb25hbCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInNsaWNlIiwicmVwZWF0Iiwia2V5IiwiZ2V0UGFyYW1ldHJpemVkUm91dGUiLCJyb3V0ZSIsInNlZ21lbnRzIiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsInNwbGl0IiwiZ3JvdXBzIiwiZ3JvdXBJbmRleCIsInBhcmFtZXRlcml6ZWRSb3V0ZSIsIm1hcCIsInNlZ21lbnQiLCJtYXJrZXJNYXRjaCIsIklOVEVSQ0VQVElPTl9ST1VURV9NQVJLRVJTIiwiZmluZCIsIm0iLCJwYXJhbU1hdGNoZXMiLCJtYXRjaCIsInBvcyIsImVzY2FwZVN0cmluZ1JlZ2V4cCIsImpvaW4iLCJub3JtYWxpemVkUm91dGUiLCJyZSIsIlJlZ0V4cCIsImJ1aWxkR2V0U2FmZVJvdXRlS2V5IiwiaSIsInJvdXRlS2V5IiwiaiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIk1hdGgiLCJmbG9vciIsImdldFNhZmVLZXlGcm9tU2VnbWVudCIsImludGVyY2VwdGlvbk1hcmtlciIsImdldFNhZmVSb3V0ZUtleSIsInJvdXRlS2V5cyIsImtleVByZWZpeCIsImNsZWFuZWRLZXkiLCJyZXBsYWNlIiwiaW52YWxpZEtleSIsImxlbmd0aCIsImlzTmFOIiwicGFyc2VJbnQiLCJpbnRlcmNlcHRpb25QcmVmaXgiLCJnZXROYW1lZFBhcmFtZXRyaXplZFJvdXRlIiwicHJlZml4Um91dGVLZXlzIiwibmFtZWRQYXJhbWV0ZXJpemVkUm91dGUiLCJoYXNJbnRlcmNlcHRpb25NYXJrZXIiLCJzb21lIiwidXNlZE1hcmtlciIsInVuZGVmaW5lZCIsInByZWZpeFJvdXRlS2V5IiwicmVzdWx0IiwibmFtZWRSZWdleCIsIm9wdGlvbnMiLCJjYXRjaEFsbCIsImNhdGNoQWxsUmVnZXgiLCJjYXRjaEFsbEdyb3VwZWRSZWdleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/route-regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getSortedRoutes\", ({\n    enumerable: true,\n    get: function() {\n        return getSortedRoutes;\n    }\n}));\nclass UrlNode {\n    insert(urlPath) {\n        this._insert(urlPath.split(\"/\").filter(Boolean), [], false);\n    }\n    smoosh() {\n        return this._smoosh();\n    }\n    _smoosh(prefix) {\n        if (prefix === void 0) prefix = \"/\";\n        const childrenPaths = [\n            ...this.children.keys()\n        ].sort();\n        if (this.slugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[]\"), 1);\n        }\n        if (this.restSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[...]\"), 1);\n        }\n        if (this.optionalRestSlugName !== null) {\n            childrenPaths.splice(childrenPaths.indexOf(\"[[...]]\"), 1);\n        }\n        const routes = childrenPaths.map((c)=>this.children.get(c)._smoosh(\"\" + prefix + c + \"/\")).reduce((prev, curr)=>[\n                ...prev,\n                ...curr\n            ], []);\n        if (this.slugName !== null) {\n            routes.push(...this.children.get(\"[]\")._smoosh(prefix + \"[\" + this.slugName + \"]/\"));\n        }\n        if (!this.placeholder) {\n            const r = prefix === \"/\" ? \"/\" : prefix.slice(0, -1);\n            if (this.optionalRestSlugName != null) {\n                throw new Error('You cannot define a route with the same specificity as a optional catch-all route (\"' + r + '\" and \"' + r + \"[[...\" + this.optionalRestSlugName + ']]\").');\n            }\n            routes.unshift(r);\n        }\n        if (this.restSlugName !== null) {\n            routes.push(...this.children.get(\"[...]\")._smoosh(prefix + \"[...\" + this.restSlugName + \"]/\"));\n        }\n        if (this.optionalRestSlugName !== null) {\n            routes.push(...this.children.get(\"[[...]]\")._smoosh(prefix + \"[[...\" + this.optionalRestSlugName + \"]]/\"));\n        }\n        return routes;\n    }\n    _insert(urlPaths, slugNames, isCatchAll) {\n        if (urlPaths.length === 0) {\n            this.placeholder = false;\n            return;\n        }\n        if (isCatchAll) {\n            throw new Error(\"Catch-all must be the last part of the URL.\");\n        }\n        // The next segment in the urlPaths list\n        let nextSegment = urlPaths[0];\n        // Check if the segment matches `[something]`\n        if (nextSegment.startsWith(\"[\") && nextSegment.endsWith(\"]\")) {\n            // Strip `[` and `]`, leaving only `something`\n            let segmentName = nextSegment.slice(1, -1);\n            let isOptional = false;\n            if (segmentName.startsWith(\"[\") && segmentName.endsWith(\"]\")) {\n                // Strip optional `[` and `]`, leaving only `something`\n                segmentName = segmentName.slice(1, -1);\n                isOptional = true;\n            }\n            if (segmentName.startsWith(\"...\")) {\n                // Strip `...`, leaving only `something`\n                segmentName = segmentName.substring(3);\n                isCatchAll = true;\n            }\n            if (segmentName.startsWith(\"[\") || segmentName.endsWith(\"]\")) {\n                throw new Error(\"Segment names may not start or end with extra brackets ('\" + segmentName + \"').\");\n            }\n            if (segmentName.startsWith(\".\")) {\n                throw new Error(\"Segment names may not start with erroneous periods ('\" + segmentName + \"').\");\n            }\n            function handleSlug(previousSlug, nextSlug) {\n                if (previousSlug !== null) {\n                    // If the specific segment already has a slug but the slug is not `something`\n                    // This prevents collisions like:\n                    // pages/[post]/index.js\n                    // pages/[id]/index.js\n                    // Because currently multiple dynamic params on the same segment level are not supported\n                    if (previousSlug !== nextSlug) {\n                        // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n                        throw new Error(\"You cannot use different slug names for the same dynamic path ('\" + previousSlug + \"' !== '\" + nextSlug + \"').\");\n                    }\n                }\n                slugNames.forEach((slug)=>{\n                    if (slug === nextSlug) {\n                        throw new Error('You cannot have the same slug name \"' + nextSlug + '\" repeat within a single dynamic path');\n                    }\n                    if (slug.replace(/\\W/g, \"\") === nextSegment.replace(/\\W/g, \"\")) {\n                        throw new Error('You cannot have the slug names \"' + slug + '\" and \"' + nextSlug + '\" differ only by non-word symbols within a single dynamic path');\n                    }\n                });\n                slugNames.push(nextSlug);\n            }\n            if (isCatchAll) {\n                if (isOptional) {\n                    if (this.restSlugName != null) {\n                        throw new Error('You cannot use both an required and optional catch-all route at the same level (\"[...' + this.restSlugName + ']\" and \"' + urlPaths[0] + '\" ).');\n                    }\n                    handleSlug(this.optionalRestSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.optionalRestSlugName = segmentName;\n                    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n                    nextSegment = \"[[...]]\";\n                } else {\n                    if (this.optionalRestSlugName != null) {\n                        throw new Error('You cannot use both an optional and required catch-all route at the same level (\"[[...' + this.optionalRestSlugName + ']]\" and \"' + urlPaths[0] + '\").');\n                    }\n                    handleSlug(this.restSlugName, segmentName);\n                    // slugName is kept as it can only be one particular slugName\n                    this.restSlugName = segmentName;\n                    // nextSegment is overwritten to [...] so that it can later be sorted specifically\n                    nextSegment = \"[...]\";\n                }\n            } else {\n                if (isOptional) {\n                    throw new Error('Optional route parameters are not yet supported (\"' + urlPaths[0] + '\").');\n                }\n                handleSlug(this.slugName, segmentName);\n                // slugName is kept as it can only be one particular slugName\n                this.slugName = segmentName;\n                // nextSegment is overwritten to [] so that it can later be sorted specifically\n                nextSegment = \"[]\";\n            }\n        }\n        // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n        if (!this.children.has(nextSegment)) {\n            this.children.set(nextSegment, new UrlNode());\n        }\n        this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);\n    }\n    constructor(){\n        this.placeholder = true;\n        this.children = new Map();\n        this.slugName = null;\n        this.restSlugName = null;\n        this.optionalRestSlugName = null;\n    }\n}\nfunction getSortedRoutes(normalizedPages) {\n    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n    // Only 1 dynamic segment per nesting level\n    // So in the case that is test/integration/dynamic-routing it'll be this:\n    // pages/[post]/comments.js\n    // pages/blog/[post]/comment/[id].js\n    // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n    // So in this case `UrlNode` created here has `this.slugName === 'post'`\n    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n    // Instead what has to be passed through is the upwards path's dynamic names\n    const root = new UrlNode();\n    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n    normalizedPages.forEach((pagePath)=>root.insert(pagePath));\n    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n    return root.smoosh();\n} //# sourceMappingURL=sorted-routes.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvc29ydGVkLXJvdXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsbURBQWtEO0lBQzlDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUM7SUFDRkMsT0FBT0MsT0FBTyxFQUFFO1FBQ1osSUFBSSxDQUFDQyxPQUFPLENBQUNELFFBQVFFLEtBQUssQ0FBQyxLQUFLQyxNQUFNLENBQUNDLFVBQVUsRUFBRSxFQUFFO0lBQ3pEO0lBQ0FDLFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQ0MsT0FBTztJQUN2QjtJQUNBQSxRQUFRQyxNQUFNLEVBQUU7UUFDWixJQUFJQSxXQUFXLEtBQUssR0FBR0EsU0FBUztRQUNoQyxNQUFNQyxnQkFBZ0I7ZUFDZixJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSTtTQUN4QixDQUFDQyxJQUFJO1FBQ04sSUFBSSxJQUFJLENBQUNDLFFBQVEsS0FBSyxNQUFNO1lBQ3hCSixjQUFjSyxNQUFNLENBQUNMLGNBQWNNLE9BQU8sQ0FBQyxPQUFPO1FBQ3REO1FBQ0EsSUFBSSxJQUFJLENBQUNDLFlBQVksS0FBSyxNQUFNO1lBQzVCUCxjQUFjSyxNQUFNLENBQUNMLGNBQWNNLE9BQU8sQ0FBQyxVQUFVO1FBQ3pEO1FBQ0EsSUFBSSxJQUFJLENBQUNFLG9CQUFvQixLQUFLLE1BQU07WUFDcENSLGNBQWNLLE1BQU0sQ0FBQ0wsY0FBY00sT0FBTyxDQUFDLFlBQVk7UUFDM0Q7UUFDQSxNQUFNRyxTQUFTVCxjQUFjVSxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxJQUFJLENBQUNWLFFBQVEsQ0FBQ2IsR0FBRyxDQUFDdUIsR0FBR2IsT0FBTyxDQUFDLEtBQUtDLFNBQVNZLElBQUksTUFBTUMsTUFBTSxDQUFD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RkFBaUY7UUFDakYsSUFBSSxDQUFDLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQ29DLEdBQUcsQ0FBQ1osY0FBYztZQUNqQyxJQUFJLENBQUN4QixRQUFRLENBQUNxQyxHQUFHLENBQUNiLGFBQWEsSUFBSW5DO1FBQ3ZDO1FBQ0EsSUFBSSxDQUFDVyxRQUFRLENBQUNiLEdBQUcsQ0FBQ3FDLGFBQWFoQyxPQUFPLENBQUM0QixTQUFTSCxLQUFLLENBQUMsSUFBSUksV0FBV0M7SUFDekU7SUFDQWdCLGFBQWE7UUFDVCxJQUFJLENBQUN2QixXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDZixRQUFRLEdBQUcsSUFBSXVDO1FBQ3BCLElBQUksQ0FBQ3BDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNHLFlBQVksR0FBRztRQUNwQixJQUFJLENBQUNDLG9CQUFvQixHQUFHO0lBQ2hDO0FBQ0o7QUFDQSxTQUFTbkIsZ0JBQWdCb0QsZUFBZTtJQUNwQyxrRkFBa0Y7SUFDbEYsNEVBQTRFO0lBQzVFLDJDQUEyQztJQUMzQyx5RUFBeUU7SUFDekUsMkJBQTJCO0lBQzNCLG9DQUFvQztJQUNwQyw4RUFBOEU7SUFDOUUsd0VBQXdFO0lBQ3hFLGdIQUFnSDtJQUNoSCw0RUFBNEU7SUFDNUUsTUFBTUMsT0FBTyxJQUFJcEQ7SUFDakIsNkZBQTZGO0lBQzdGbUQsZ0JBQWdCUCxPQUFPLENBQUMsQ0FBQ1MsV0FBV0QsS0FBS25ELE1BQU0sQ0FBQ29EO0lBQ2hELDRHQUE0RztJQUM1RyxPQUFPRCxLQUFLN0MsTUFBTTtBQUN0QixFQUVBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3NvcnRlZC1yb3V0ZXMuanM/MmY3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFNvcnRlZFJvdXRlc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0U29ydGVkUm91dGVzO1xuICAgIH1cbn0pO1xuY2xhc3MgVXJsTm9kZSB7XG4gICAgaW5zZXJ0KHVybFBhdGgpIHtcbiAgICAgICAgdGhpcy5faW5zZXJ0KHVybFBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcihCb29sZWFuKSwgW10sIGZhbHNlKTtcbiAgICB9XG4gICAgc21vb3NoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc21vb3NoKCk7XG4gICAgfVxuICAgIF9zbW9vc2gocHJlZml4KSB7XG4gICAgICAgIGlmIChwcmVmaXggPT09IHZvaWQgMCkgcHJlZml4ID0gXCIvXCI7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuUGF0aHMgPSBbXG4gICAgICAgICAgICAuLi50aGlzLmNoaWxkcmVuLmtleXMoKVxuICAgICAgICBdLnNvcnQoKTtcbiAgICAgICAgaWYgKHRoaXMuc2x1Z05hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuUGF0aHMuc3BsaWNlKGNoaWxkcmVuUGF0aHMuaW5kZXhPZihcIltdXCIpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXN0U2x1Z05hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuUGF0aHMuc3BsaWNlKGNoaWxkcmVuUGF0aHMuaW5kZXhPZihcIlsuLi5dXCIpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2hpbGRyZW5QYXRocy5zcGxpY2UoY2hpbGRyZW5QYXRocy5pbmRleE9mKFwiW1suLi5dXVwiKSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm91dGVzID0gY2hpbGRyZW5QYXRocy5tYXAoKGMpPT50aGlzLmNoaWxkcmVuLmdldChjKS5fc21vb3NoKFwiXCIgKyBwcmVmaXggKyBjICsgXCIvXCIpKS5yZWR1Y2UoKHByZXYsIGN1cnIpPT5bXG4gICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICAuLi5jdXJyXG4gICAgICAgICAgICBdLCBbXSk7XG4gICAgICAgIGlmICh0aGlzLnNsdWdOYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICByb3V0ZXMucHVzaCguLi50aGlzLmNoaWxkcmVuLmdldChcIltdXCIpLl9zbW9vc2gocHJlZml4ICsgXCJbXCIgKyB0aGlzLnNsdWdOYW1lICsgXCJdL1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICBjb25zdCByID0gcHJlZml4ID09PSBcIi9cIiA/IFwiL1wiIDogcHJlZml4LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbmFsUmVzdFNsdWdOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgZGVmaW5lIGEgcm91dGUgd2l0aCB0aGUgc2FtZSBzcGVjaWZpY2l0eSBhcyBhIG9wdGlvbmFsIGNhdGNoLWFsbCByb3V0ZSAoXCInICsgciArICdcIiBhbmQgXCInICsgciArIFwiW1suLi5cIiArIHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgKyAnXV1cIikuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3V0ZXMudW5zaGlmdChyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXN0U2x1Z05hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJvdXRlcy5wdXNoKC4uLnRoaXMuY2hpbGRyZW4uZ2V0KFwiWy4uLl1cIikuX3Ntb29zaChwcmVmaXggKyBcIlsuLi5cIiArIHRoaXMucmVzdFNsdWdOYW1lICsgXCJdL1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJvdXRlcy5wdXNoKC4uLnRoaXMuY2hpbGRyZW4uZ2V0KFwiW1suLi5dXVwiKS5fc21vb3NoKHByZWZpeCArIFwiW1suLi5cIiArIHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgKyBcIl1dL1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvdXRlcztcbiAgICB9XG4gICAgX2luc2VydCh1cmxQYXRocywgc2x1Z05hbWVzLCBpc0NhdGNoQWxsKSB7XG4gICAgICAgIGlmICh1cmxQYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYXRjaEFsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2F0Y2gtYWxsIG11c3QgYmUgdGhlIGxhc3QgcGFydCBvZiB0aGUgVVJMLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbmV4dCBzZWdtZW50IGluIHRoZSB1cmxQYXRocyBsaXN0XG4gICAgICAgIGxldCBuZXh0U2VnbWVudCA9IHVybFBhdGhzWzBdO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc2VnbWVudCBtYXRjaGVzIGBbc29tZXRoaW5nXWBcbiAgICAgICAgaWYgKG5leHRTZWdtZW50LnN0YXJ0c1dpdGgoXCJbXCIpICYmIG5leHRTZWdtZW50LmVuZHNXaXRoKFwiXVwiKSkge1xuICAgICAgICAgICAgLy8gU3RyaXAgYFtgIGFuZCBgXWAsIGxlYXZpbmcgb25seSBgc29tZXRoaW5nYFxuICAgICAgICAgICAgbGV0IHNlZ21lbnROYW1lID0gbmV4dFNlZ21lbnQuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgbGV0IGlzT3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZWdtZW50TmFtZS5zdGFydHNXaXRoKFwiW1wiKSAmJiBzZWdtZW50TmFtZS5lbmRzV2l0aChcIl1cIikpIHtcbiAgICAgICAgICAgICAgICAvLyBTdHJpcCBvcHRpb25hbCBgW2AgYW5kIGBdYCwgbGVhdmluZyBvbmx5IGBzb21ldGhpbmdgXG4gICAgICAgICAgICAgICAgc2VnbWVudE5hbWUgPSBzZWdtZW50TmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgaXNPcHRpb25hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VnbWVudE5hbWUuc3RhcnRzV2l0aChcIi4uLlwiKSkge1xuICAgICAgICAgICAgICAgIC8vIFN0cmlwIGAuLi5gLCBsZWF2aW5nIG9ubHkgYHNvbWV0aGluZ2BcbiAgICAgICAgICAgICAgICBzZWdtZW50TmFtZSA9IHNlZ21lbnROYW1lLnN1YnN0cmluZygzKTtcbiAgICAgICAgICAgICAgICBpc0NhdGNoQWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWdtZW50TmFtZS5zdGFydHNXaXRoKFwiW1wiKSB8fCBzZWdtZW50TmFtZS5lbmRzV2l0aChcIl1cIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWdtZW50IG5hbWVzIG1heSBub3Qgc3RhcnQgb3IgZW5kIHdpdGggZXh0cmEgYnJhY2tldHMgKCdcIiArIHNlZ21lbnROYW1lICsgXCInKS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VnbWVudE5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWdtZW50IG5hbWVzIG1heSBub3Qgc3RhcnQgd2l0aCBlcnJvbmVvdXMgcGVyaW9kcyAoJ1wiICsgc2VnbWVudE5hbWUgKyBcIicpLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVNsdWcocHJldmlvdXNTbHVnLCBuZXh0U2x1Zykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1NsdWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNwZWNpZmljIHNlZ21lbnQgYWxyZWFkeSBoYXMgYSBzbHVnIGJ1dCB0aGUgc2x1ZyBpcyBub3QgYHNvbWV0aGluZ2BcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBjb2xsaXNpb25zIGxpa2U6XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhZ2VzL1twb3N0XS9pbmRleC5qc1xuICAgICAgICAgICAgICAgICAgICAvLyBwYWdlcy9baWRdL2luZGV4LmpzXG4gICAgICAgICAgICAgICAgICAgIC8vIEJlY2F1c2UgY3VycmVudGx5IG11bHRpcGxlIGR5bmFtaWMgcGFyYW1zIG9uIHRoZSBzYW1lIHNlZ21lbnQgbGV2ZWwgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU2x1ZyAhPT0gbmV4dFNsdWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgZXJyb3Igc2VlbXMgdG8gYmUgY29uZnVzaW5nIGZvciB1c2VycywgbmVlZHMgYW4gZXJyb3IgbGluaywgdGhlIGRlc2NyaXB0aW9uIGNhbiBiZSBiYXNlZCBvbiBhYm92ZSBjb21tZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbm5vdCB1c2UgZGlmZmVyZW50IHNsdWcgbmFtZXMgZm9yIHRoZSBzYW1lIGR5bmFtaWMgcGF0aCAoJ1wiICsgcHJldmlvdXNTbHVnICsgXCInICE9PSAnXCIgKyBuZXh0U2x1ZyArIFwiJykuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNsdWdOYW1lcy5mb3JFYWNoKChzbHVnKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2x1ZyA9PT0gbmV4dFNsdWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCBoYXZlIHRoZSBzYW1lIHNsdWcgbmFtZSBcIicgKyBuZXh0U2x1ZyArICdcIiByZXBlYXQgd2l0aGluIGEgc2luZ2xlIGR5bmFtaWMgcGF0aCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbHVnLnJlcGxhY2UoL1xcVy9nLCBcIlwiKSA9PT0gbmV4dFNlZ21lbnQucmVwbGFjZSgvXFxXL2csIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgaGF2ZSB0aGUgc2x1ZyBuYW1lcyBcIicgKyBzbHVnICsgJ1wiIGFuZCBcIicgKyBuZXh0U2x1ZyArICdcIiBkaWZmZXIgb25seSBieSBub24td29yZCBzeW1ib2xzIHdpdGhpbiBhIHNpbmdsZSBkeW5hbWljIHBhdGgnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNsdWdOYW1lcy5wdXNoKG5leHRTbHVnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0NhdGNoQWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzdFNsdWdOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCB1c2UgYm90aCBhbiByZXF1aXJlZCBhbmQgb3B0aW9uYWwgY2F0Y2gtYWxsIHJvdXRlIGF0IHRoZSBzYW1lIGxldmVsIChcIlsuLi4nICsgdGhpcy5yZXN0U2x1Z05hbWUgKyAnXVwiIGFuZCBcIicgKyB1cmxQYXRoc1swXSArICdcIiApLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNsdWcodGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSwgc2VnbWVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzbHVnTmFtZSBpcyBrZXB0IGFzIGl0IGNhbiBvbmx5IGJlIG9uZSBwYXJ0aWN1bGFyIHNsdWdOYW1lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgPSBzZWdtZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dFNlZ21lbnQgaXMgb3ZlcndyaXR0ZW4gdG8gW1suLi5dXSBzbyB0aGF0IGl0IGNhbiBsYXRlciBiZSBzb3J0ZWQgc3BlY2lmaWNhbGx5XG4gICAgICAgICAgICAgICAgICAgIG5leHRTZWdtZW50ID0gXCJbWy4uLl1dXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uYWxSZXN0U2x1Z05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgY2Fubm90IHVzZSBib3RoIGFuIG9wdGlvbmFsIGFuZCByZXF1aXJlZCBjYXRjaC1hbGwgcm91dGUgYXQgdGhlIHNhbWUgbGV2ZWwgKFwiW1suLi4nICsgdGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSArICddXVwiIGFuZCBcIicgKyB1cmxQYXRoc1swXSArICdcIikuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2x1Zyh0aGlzLnJlc3RTbHVnTmFtZSwgc2VnbWVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzbHVnTmFtZSBpcyBrZXB0IGFzIGl0IGNhbiBvbmx5IGJlIG9uZSBwYXJ0aWN1bGFyIHNsdWdOYW1lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdFNsdWdOYW1lID0gc2VnbWVudE5hbWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHRTZWdtZW50IGlzIG92ZXJ3cml0dGVuIHRvIFsuLi5dIHNvIHRoYXQgaXQgY2FuIGxhdGVyIGJlIHNvcnRlZCBzcGVjaWZpY2FsbHlcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNlZ21lbnQgPSBcIlsuLi5dXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbmFsIHJvdXRlIHBhcmFtZXRlcnMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIChcIicgKyB1cmxQYXRoc1swXSArICdcIikuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZVNsdWcodGhpcy5zbHVnTmFtZSwgc2VnbWVudE5hbWUpO1xuICAgICAgICAgICAgICAgIC8vIHNsdWdOYW1lIGlzIGtlcHQgYXMgaXQgY2FuIG9ubHkgYmUgb25lIHBhcnRpY3VsYXIgc2x1Z05hbWVcbiAgICAgICAgICAgICAgICB0aGlzLnNsdWdOYW1lID0gc2VnbWVudE5hbWU7XG4gICAgICAgICAgICAgICAgLy8gbmV4dFNlZ21lbnQgaXMgb3ZlcndyaXR0ZW4gdG8gW10gc28gdGhhdCBpdCBjYW4gbGF0ZXIgYmUgc29ydGVkIHNwZWNpZmljYWxseVxuICAgICAgICAgICAgICAgIG5leHRTZWdtZW50ID0gXCJbXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoaXMgVXJsTm9kZSBkb2Vzbid0IGhhdmUgdGhlIG5leHRTZWdtZW50IHlldCB3ZSBjcmVhdGUgYSBuZXcgY2hpbGQgVXJsTm9kZVxuICAgICAgICBpZiAoIXRoaXMuY2hpbGRyZW4uaGFzKG5leHRTZWdtZW50KSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zZXQobmV4dFNlZ21lbnQsIG5ldyBVcmxOb2RlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZ2V0KG5leHRTZWdtZW50KS5faW5zZXJ0KHVybFBhdGhzLnNsaWNlKDEpLCBzbHVnTmFtZXMsIGlzQ2F0Y2hBbGwpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zbHVnTmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzdFNsdWdOYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcHRpb25hbFJlc3RTbHVnTmFtZSA9IG51bGw7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0U29ydGVkUm91dGVzKG5vcm1hbGl6ZWRQYWdlcykge1xuICAgIC8vIEZpcnN0IHRoZSBVcmxOb2RlIGlzIGNyZWF0ZWQsIGFuZCBldmVyeSBVcmxOb2RlIGNhbiBoYXZlIG9ubHkgMSBkeW5hbWljIHNlZ21lbnRcbiAgICAvLyBFZyB5b3UgY2FuJ3QgaGF2ZSBwYWdlcy9bcG9zdF0vYWJjLmpzIGFuZCBwYWdlcy9baGVsbG9dL3NvbWV0aGluZy1lbHNlLmpzXG4gICAgLy8gT25seSAxIGR5bmFtaWMgc2VnbWVudCBwZXIgbmVzdGluZyBsZXZlbFxuICAgIC8vIFNvIGluIHRoZSBjYXNlIHRoYXQgaXMgdGVzdC9pbnRlZ3JhdGlvbi9keW5hbWljLXJvdXRpbmcgaXQnbGwgYmUgdGhpczpcbiAgICAvLyBwYWdlcy9bcG9zdF0vY29tbWVudHMuanNcbiAgICAvLyBwYWdlcy9ibG9nL1twb3N0XS9jb21tZW50L1tpZF0uanNcbiAgICAvLyBCb3RoIGFyZSBmaW5lIGJlY2F1c2UgYHBhZ2VzL1twb3N0XWAgYW5kIGBwYWdlcy9ibG9nYCBhcmUgb24gdGhlIHNhbWUgbGV2ZWxcbiAgICAvLyBTbyBpbiB0aGlzIGNhc2UgYFVybE5vZGVgIGNyZWF0ZWQgaGVyZSBoYXMgYHRoaXMuc2x1Z05hbWUgPT09ICdwb3N0J2BcbiAgICAvLyBBbmQgc2luY2UgeW91ciBQUiBwYXNzZWQgdGhyb3VnaCBgc2x1Z05hbWVgIGFzIGFuIGFycmF5IGJhc2ljYWxseSBpdCdkIGluY2x1ZGluZyBpdCBpbiB0b28gbWFueSBwb3NzaWJpbGl0aWVzXG4gICAgLy8gSW5zdGVhZCB3aGF0IGhhcyB0byBiZSBwYXNzZWQgdGhyb3VnaCBpcyB0aGUgdXB3YXJkcyBwYXRoJ3MgZHluYW1pYyBuYW1lc1xuICAgIGNvbnN0IHJvb3QgPSBuZXcgVXJsTm9kZSgpO1xuICAgIC8vIEhlcmUgdGhlIGByb290YCBnZXRzIGluamVjdGVkIG11bHRpcGxlIHBhdGhzLCBhbmQgaW5zZXJ0IHdpbGwgYnJlYWsgdGhlbSB1cCBpbnRvIHN1YmxldmVsc1xuICAgIG5vcm1hbGl6ZWRQYWdlcy5mb3JFYWNoKChwYWdlUGF0aCk9PnJvb3QuaW5zZXJ0KHBhZ2VQYXRoKSk7XG4gICAgLy8gU21vb3NoIHdpbGwgdGhlbiBzb3J0IHRob3NlIHN1YmxldmVscyB1cCB0byB0aGUgcG9pbnQgd2hlcmUgeW91IGdldCB0aGUgY29ycmVjdCByb3V0ZSBkZWZpbml0aW9uIHByaW9yaXR5XG4gICAgcmV0dXJuIHJvb3Quc21vb3NoKCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvcnRlZC1yb3V0ZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldFNvcnRlZFJvdXRlcyIsIlVybE5vZGUiLCJpbnNlcnQiLCJ1cmxQYXRoIiwiX2luc2VydCIsInNwbGl0IiwiZmlsdGVyIiwiQm9vbGVhbiIsInNtb29zaCIsIl9zbW9vc2giLCJwcmVmaXgiLCJjaGlsZHJlblBhdGhzIiwiY2hpbGRyZW4iLCJrZXlzIiwic29ydCIsInNsdWdOYW1lIiwic3BsaWNlIiwiaW5kZXhPZiIsInJlc3RTbHVnTmFtZSIsIm9wdGlvbmFsUmVzdFNsdWdOYW1lIiwicm91dGVzIiwibWFwIiwiYyIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwicHVzaCIsInBsYWNlaG9sZGVyIiwiciIsInNsaWNlIiwiRXJyb3IiLCJ1bnNoaWZ0IiwidXJsUGF0aHMiLCJzbHVnTmFtZXMiLCJpc0NhdGNoQWxsIiwibGVuZ3RoIiwibmV4dFNlZ21lbnQiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzZWdtZW50TmFtZSIsImlzT3B0aW9uYWwiLCJzdWJzdHJpbmciLCJoYW5kbGVTbHVnIiwicHJldmlvdXNTbHVnIiwibmV4dFNsdWciLCJmb3JFYWNoIiwic2x1ZyIsInJlcGxhY2UiLCJoYXMiLCJzZXQiLCJjb25zdHJ1Y3RvciIsIk1hcCIsIm5vcm1hbGl6ZWRQYWdlcyIsInJvb3QiLCJwYWdlUGF0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router/utils/sorted-routes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/utils.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    WEB_VITALS: function() {\n        return WEB_VITALS;\n    },\n    execOnce: function() {\n        return execOnce;\n    },\n    isAbsoluteUrl: function() {\n        return isAbsoluteUrl;\n    },\n    getLocationOrigin: function() {\n        return getLocationOrigin;\n    },\n    getURL: function() {\n        return getURL;\n    },\n    getDisplayName: function() {\n        return getDisplayName;\n    },\n    isResSent: function() {\n        return isResSent;\n    },\n    normalizeRepeatedSlashes: function() {\n        return normalizeRepeatedSlashes;\n    },\n    loadGetInitialProps: function() {\n        return loadGetInitialProps;\n    },\n    SP: function() {\n        return SP;\n    },\n    ST: function() {\n        return ST;\n    },\n    DecodeError: function() {\n        return DecodeError;\n    },\n    NormalizeError: function() {\n        return NormalizeError;\n    },\n    PageNotFoundError: function() {\n        return PageNotFoundError;\n    },\n    MissingStaticPage: function() {\n        return MissingStaticPage;\n    },\n    MiddlewareNotFoundError: function() {\n        return MiddlewareNotFoundError;\n    },\n    stringifyError: function() {\n        return stringifyError;\n    }\n});\nconst WEB_VITALS = [\n    \"CLS\",\n    \"FCP\",\n    \"FID\",\n    \"INP\",\n    \"LCP\",\n    \"TTFB\"\n];\nfunction execOnce(fn) {\n    let used = false;\n    let result;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!used) {\n            used = true;\n            result = fn(...args);\n        }\n        return result;\n    };\n}\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\nconst isAbsoluteUrl = (url)=>ABSOLUTE_URL_REGEX.test(url);\nfunction getLocationOrigin() {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port ? \":\" + port : \"\");\n}\nfunction getURL() {\n    const { href } = window.location;\n    const origin = getLocationOrigin();\n    return href.substring(origin.length);\n}\nfunction getDisplayName(Component) {\n    return typeof Component === \"string\" ? Component : Component.displayName || Component.name || \"Unknown\";\n}\nfunction isResSent(res) {\n    return res.finished || res.headersSent;\n}\nfunction normalizeRepeatedSlashes(url) {\n    const urlParts = url.split(\"?\");\n    const urlNoQuery = urlParts[0];\n    return urlNoQuery // first we replace any non-encoded backslashes with forward\n    // then normalize repeated forward slashes\n    .replace(/\\\\/g, \"/\").replace(/\\/\\/+/g, \"/\") + (urlParts[1] ? \"?\" + urlParts.slice(1).join(\"?\") : \"\");\n}\nasync function loadGetInitialProps(App, ctx) {\n    if (true) {\n        var _App_prototype;\n        if ((_App_prototype = App.prototype) == null ? void 0 : _App_prototype.getInitialProps) {\n            const message = '\"' + getDisplayName(App) + '.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';\n            throw new Error(message);\n        }\n    }\n    // when called from _app `ctx` is nested in `ctx`\n    const res = ctx.res || ctx.ctx && ctx.ctx.res;\n    if (!App.getInitialProps) {\n        if (ctx.ctx && ctx.Component) {\n            // @ts-ignore pageProps default\n            return {\n                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)\n            };\n        }\n        return {};\n    }\n    const props = await App.getInitialProps(ctx);\n    if (res && isResSent(res)) {\n        return props;\n    }\n    if (!props) {\n        const message = '\"' + getDisplayName(App) + '.getInitialProps()\" should resolve to an object. But found \"' + props + '\" instead.';\n        throw new Error(message);\n    }\n    if (true) {\n        if (Object.keys(props).length === 0 && !ctx.ctx) {\n            console.warn(\"\" + getDisplayName(App) + \" returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps\");\n        }\n    }\n    return props;\n}\nconst SP = typeof performance !== \"undefined\";\nconst ST = SP && [\n    \"mark\",\n    \"measure\",\n    \"getEntriesByName\"\n].every((method)=>typeof performance[method] === \"function\");\nclass DecodeError extends Error {\n}\nclass NormalizeError extends Error {\n}\nclass PageNotFoundError extends Error {\n    constructor(page){\n        super();\n        this.code = \"ENOENT\";\n        this.name = \"PageNotFoundError\";\n        this.message = \"Cannot find module for page: \" + page;\n    }\n}\nclass MissingStaticPage extends Error {\n    constructor(page, message){\n        super();\n        this.message = \"Failed to load static file for page: \" + page + \" \" + message;\n    }\n}\nclass MiddlewareNotFoundError extends Error {\n    constructor(){\n        super();\n        this.code = \"ENOENT\";\n        this.message = \"Cannot find the middleware module\";\n    }\n}\nfunction stringifyError(error) {\n    return JSON.stringify({\n        message: error.message,\n        stack: error.stack\n    });\n} //# sourceMappingURL=utils.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/Animations/AnimatedContent.tsx":
/*!********************************************!*\
  !*** ./src/Animations/AnimatedContent.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_spring_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/web */ \"(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst AnimatedContent = (param)=>{\n    let { children, distance = 100, direction = \"vertical\", reverse = false, config = {\n        tension: 50,\n        friction: 25\n    }, initialOpacity = 0, animateOpacity = true, scale = 1, threshold = 0.1, delay = 0 } = param;\n    _s();\n    const [inView, setInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const element = ref.current;\n        if (!element) return;\n        const observer = new IntersectionObserver((param)=>{\n            let [entry] = param;\n            if (entry.isIntersecting) {\n                observer.unobserve(element);\n                setTimeout(()=>{\n                    setInView(true);\n                }, delay);\n            }\n        }, {\n            threshold\n        });\n        observer.observe(element);\n        return ()=>observer.disconnect();\n    }, [\n        threshold,\n        delay\n    ]);\n    const directions = {\n        vertical: \"Y\",\n        horizontal: \"X\"\n    };\n    const springProps = (0,_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring)({\n        from: {\n            transform: \"translate\".concat(directions[direction], \"(\").concat(reverse ? \"-\".concat(distance, \"px\") : \"\".concat(distance, \"px\"), \") scale(\").concat(scale, \")\"),\n            opacity: animateOpacity ? initialOpacity : 1\n        },\n        to: inView ? {\n            transform: \"translate\".concat(directions[direction], \"(0px) scale(1)\"),\n            opacity: 1\n        } : undefined,\n        config\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_spring_web__WEBPACK_IMPORTED_MODULE_2__.animated.div, {\n        ref: ref,\n        style: springProps,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/AnimatedContent.tsx\",\n        lineNumber: 77,\n        columnNumber: 5\n    }, undefined);\n};\n_s(AnimatedContent, \"EMXQA33323jPruWQyA88T+hT+zo=\", false, function() {\n    return [\n        _react_spring_web__WEBPACK_IMPORTED_MODULE_2__.useSpring\n    ];\n});\n_c = AnimatedContent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (AnimatedContent);\nvar _c;\n$RefreshReg$(_c, \"AnimatedContent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9BbmltYXRpb25zL0FuaW1hdGVkQ29udGVudC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUUrRDtBQUNPO0FBZXRFLE1BQU1LLGtCQUFrRDtRQUFDLEVBQ3ZEQyxRQUFRLEVBQ1JDLFdBQVcsR0FBRyxFQUNkQyxZQUFZLFVBQVUsRUFDdEJDLFVBQVUsS0FBSyxFQUNmQyxTQUFTO1FBQUVDLFNBQVM7UUFBSUMsVUFBVTtJQUFHLENBQUMsRUFDdENDLGlCQUFpQixDQUFDLEVBQ2xCQyxpQkFBaUIsSUFBSSxFQUNyQkMsUUFBUSxDQUFDLEVBQ1RDLFlBQVksR0FBRyxFQUNmQyxRQUFRLENBQUMsRUFDVjs7SUFDQyxNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR2pCLCtDQUFRQSxDQUFDO0lBQ3JDLE1BQU1rQixNQUFNcEIsNkNBQU1BLENBQXdCO0lBRTFDQyxnREFBU0EsQ0FBQztRQUNSLE1BQU1vQixVQUFVRCxJQUFJRSxPQUFPO1FBQzNCLElBQUksQ0FBQ0QsU0FBUztRQUVkLE1BQU1FLFdBQVcsSUFBSUMscUJBQ25CO2dCQUFDLENBQUNDLE1BQU07WUFDTixJQUFJQSxNQUFNQyxjQUFjLEVBQUU7Z0JBQ3hCSCxTQUFTSSxTQUFTLENBQUNOO2dCQUNuQk8sV0FBVztvQkFDVFQsVUFBVTtnQkFDWixHQUFHRjtZQUNMO1FBQ0YsR0FDQTtZQUFFRDtRQUFVO1FBR2RPLFNBQVNNLE9BQU8sQ0FBQ1I7UUFFakIsT0FBTyxJQUFNRSxTQUFTTyxVQUFVO0lBQ2xDLEdBQUc7UUFBQ2Q7UUFBV0M7S0FBTTtJQUVyQixNQUFNYyxhQUF3RDtRQUM1REMsVUFBVTtRQUNWQyxZQUFZO0lBQ2Q7SUFFQSxNQUFNQyxjQUFjL0IsNERBQVNBLENBQUM7UUFDNUJnQyxNQUFNO1lBQ0pDLFdBQVcsWUFDVDNCLE9BRHFCc0IsVUFBVSxDQUFDdkIsVUFBVSxFQUFDLEtBRWxDTyxPQURUTixVQUFVLElBQWEsT0FBVEYsVUFBUyxRQUFNLEdBQVksT0FBVEEsVUFBUyxPQUMxQyxZQUFnQixPQUFOUSxPQUFNO1lBQ2pCc0IsU0FBU3ZCLGlCQUFpQkQsaUJBQWlCO1FBQzdDO1FBQ0F5QixJQUFJcEIsU0FDQTtZQUNFa0IsV0FBVyxZQUFrQyxPQUF0QkwsVUFBVSxDQUFDdkIsVUFBVSxFQUFDO1lBQzdDNkIsU0FBUztRQUNYLElBQ0FFO1FBQ0o3QjtJQUNGO0lBRUEscUJBQ0UsOERBQUNOLHVEQUFRQSxDQUFDb0MsR0FBRztRQUFDcEIsS0FBS0E7UUFBS3FCLE9BQU9QO2tCQUM1QjVCOzs7Ozs7QUFHUDtHQTlETUQ7O1FBeUNnQkYsd0RBQVNBOzs7S0F6Q3pCRTtBQWdFTiwrREFBZUEsZUFBZUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvQW5pbWF0aW9ucy9BbmltYXRlZENvbnRlbnQudHN4PzFiNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTcHJpbmcsIGFuaW1hdGVkLCBTcHJpbmdDb25maWcgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy93ZWJcIjtcblxuaW50ZXJmYWNlIEFuaW1hdGVkQ29udGVudFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgZGlzdGFuY2U/OiBudW1iZXI7XG4gIGRpcmVjdGlvbj86IFwidmVydGljYWxcIiB8IFwiaG9yaXpvbnRhbFwiO1xuICByZXZlcnNlPzogYm9vbGVhbjtcbiAgY29uZmlnPzogU3ByaW5nQ29uZmlnO1xuICBpbml0aWFsT3BhY2l0eT86IG51bWJlcjtcbiAgYW5pbWF0ZU9wYWNpdHk/OiBib29sZWFuO1xuICBzY2FsZT86IG51bWJlcjtcbiAgdGhyZXNob2xkPzogbnVtYmVyO1xuICBkZWxheT86IG51bWJlcjtcbn1cblxuY29uc3QgQW5pbWF0ZWRDb250ZW50OiBSZWFjdC5GQzxBbmltYXRlZENvbnRlbnRQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgZGlzdGFuY2UgPSAxMDAsXG4gIGRpcmVjdGlvbiA9IFwidmVydGljYWxcIixcbiAgcmV2ZXJzZSA9IGZhbHNlLFxuICBjb25maWcgPSB7IHRlbnNpb246IDUwLCBmcmljdGlvbjogMjUgfSxcbiAgaW5pdGlhbE9wYWNpdHkgPSAwLFxuICBhbmltYXRlT3BhY2l0eSA9IHRydWUsXG4gIHNjYWxlID0gMSxcbiAgdGhyZXNob2xkID0gMC4xLFxuICBkZWxheSA9IDAsXG59KSA9PiB7XG4gIGNvbnN0IFtpblZpZXcsIHNldEluVmlld10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICAoW2VudHJ5XSkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzZXRJblZpZXcodHJ1ZSk7XG4gICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyB0aHJlc2hvbGQgfVxuICAgICk7XG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuICgpID0+IG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfSwgW3RocmVzaG9sZCwgZGVsYXldKTtcblxuICBjb25zdCBkaXJlY3Rpb25zOiBSZWNvcmQ8XCJ2ZXJ0aWNhbFwiIHwgXCJob3Jpem9udGFsXCIsIHN0cmluZz4gPSB7XG4gICAgdmVydGljYWw6IFwiWVwiLFxuICAgIGhvcml6b250YWw6IFwiWFwiLFxuICB9O1xuXG4gIGNvbnN0IHNwcmluZ1Byb3BzID0gdXNlU3ByaW5nKHtcbiAgICBmcm9tOiB7XG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUke2RpcmVjdGlvbnNbZGlyZWN0aW9uXX0oJHtcbiAgICAgICAgcmV2ZXJzZSA/IGAtJHtkaXN0YW5jZX1weGAgOiBgJHtkaXN0YW5jZX1weGBcbiAgICAgIH0pIHNjYWxlKCR7c2NhbGV9KWAsXG4gICAgICBvcGFjaXR5OiBhbmltYXRlT3BhY2l0eSA/IGluaXRpYWxPcGFjaXR5IDogMSxcbiAgICB9LFxuICAgIHRvOiBpblZpZXdcbiAgICAgID8ge1xuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSR7ZGlyZWN0aW9uc1tkaXJlY3Rpb25dfSgwcHgpIHNjYWxlKDEpYCxcbiAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICBjb25maWcsXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGFuaW1hdGVkLmRpdiByZWY9e3JlZn0gc3R5bGU9e3NwcmluZ1Byb3BzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2FuaW1hdGVkLmRpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGVkQ29udGVudDtcbiJdLCJuYW1lcyI6WyJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZVNwcmluZyIsImFuaW1hdGVkIiwiQW5pbWF0ZWRDb250ZW50IiwiY2hpbGRyZW4iLCJkaXN0YW5jZSIsImRpcmVjdGlvbiIsInJldmVyc2UiLCJjb25maWciLCJ0ZW5zaW9uIiwiZnJpY3Rpb24iLCJpbml0aWFsT3BhY2l0eSIsImFuaW1hdGVPcGFjaXR5Iiwic2NhbGUiLCJ0aHJlc2hvbGQiLCJkZWxheSIsImluVmlldyIsInNldEluVmlldyIsInJlZiIsImVsZW1lbnQiLCJjdXJyZW50Iiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJ1bm9ic2VydmUiLCJzZXRUaW1lb3V0Iiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJkaXJlY3Rpb25zIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwic3ByaW5nUHJvcHMiLCJmcm9tIiwidHJhbnNmb3JtIiwib3BhY2l0eSIsInRvIiwidW5kZWZpbmVkIiwiZGl2Iiwic3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/Animations/AnimatedContent.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/Animations/FallingText.tsx":
/*!****************************************!*\
  !*** ./src/Animations/FallingText.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! matter-js */ \"(app-pages-browser)/./node_modules/matter-js/build/matter.js\");\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(matter_js__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst FallingText = (param)=>{\n    let { text = \"\", highlightWords = [], trigger = \"auto\", backgroundColor = \"transparent\", wireframes = false, gravity = 1, mouseConstraintStiffness = 0.2, fontSize = \"1rem\" } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const textRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const canvasContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [effectStarted, setEffectStarted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!textRef.current) return;\n        const words = text.split(\" \");\n        const newHTML = words.map((word)=>{\n            const isHighlighted = highlightWords.some((hw)=>word.startsWith(hw));\n            return '<span\\n          class=\"inline-block mx-[2px] select-none '.concat(isHighlighted ? \"text-cyan-500 font-bold\" : \"text-white\", '\"\\n          style=\"font-size: ').concat(fontSize, '; text-shadow: 0 0 10px rgba(255,255,255,0.1);\"\\n        >\\n          ').concat(word, \"\\n        </span>\");\n        }).join(\" \");\n        textRef.current.innerHTML = newHTML;\n    }, [\n        text,\n        highlightWords\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (trigger === \"auto\") {\n            setEffectStarted(true);\n            return;\n        }\n        if (trigger === \"scroll\" && containerRef.current) {\n            const observer = new IntersectionObserver((param)=>{\n                let [entry] = param;\n                if (entry.isIntersecting) {\n                    setEffectStarted(true);\n                    observer.disconnect();\n                }\n            }, {\n                threshold: 0.1\n            });\n            observer.observe(containerRef.current);\n            return ()=>observer.disconnect();\n        }\n    }, [\n        trigger\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!effectStarted) return;\n        const { Engine, Render, World, Bodies, Runner, Mouse, MouseConstraint } = (matter_js__WEBPACK_IMPORTED_MODULE_2___default());\n        if (!containerRef.current || !canvasContainerRef.current) return;\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const width = containerRect.width;\n        const height = containerRect.height;\n        if (width <= 0 || height <= 0) return;\n        const engine = Engine.create();\n        engine.world.gravity.y = gravity;\n        const render = Render.create({\n            element: canvasContainerRef.current,\n            engine,\n            options: {\n                width,\n                height,\n                background: backgroundColor,\n                wireframes\n            }\n        });\n        const boundaryOptions = {\n            isStatic: true,\n            render: {\n                fillStyle: \"transparent\"\n            }\n        };\n        const floor = Bodies.rectangle(width / 2, height + 25, width, 50, boundaryOptions);\n        const leftWall = Bodies.rectangle(-25, height / 2, 50, height, boundaryOptions);\n        const rightWall = Bodies.rectangle(width + 25, height / 2, 50, height, boundaryOptions);\n        const ceiling = Bodies.rectangle(width / 2, -25, width, 50, boundaryOptions);\n        if (!textRef.current) return;\n        const wordSpans = textRef.current.querySelectorAll(\"span\");\n        const wordBodies = Array.from(wordSpans).map((elem)=>{\n            const rect = elem.getBoundingClientRect();\n            const x = rect.left - containerRect.left + rect.width / 2;\n            const y = rect.top - containerRect.top + rect.height / 2;\n            const body = Bodies.rectangle(x, y, rect.width, rect.height, {\n                render: {\n                    fillStyle: \"transparent\"\n                },\n                restitution: 0.3,\n                frictionAir: 0.01,\n                friction: 0.1,\n                density: 0.001,\n                mass: 1\n            });\n            matter_js__WEBPACK_IMPORTED_MODULE_2___default().Body.setVelocity(body, {\n                x: (Math.random() - 0.5) * 2,\n                y: -2 - Math.random() * 3\n            });\n            matter_js__WEBPACK_IMPORTED_MODULE_2___default().Body.setAngularVelocity(body, (Math.random() - 0.5) * 0.01);\n            return {\n                elem,\n                body\n            };\n        });\n        wordBodies.forEach((param)=>{\n            let { elem, body } = param;\n            elem.style.position = \"absolute\";\n            elem.style.left = \"\".concat(body.position.x - body.bounds.max.x + body.bounds.min.x / 2, \"px\");\n            elem.style.top = \"\".concat(body.position.y - body.bounds.max.y + body.bounds.min.y / 2, \"px\");\n            elem.style.transform = \"none\";\n        });\n        const mouse = Mouse.create(containerRef.current);\n        const mouseConstraint = MouseConstraint.create(engine, {\n            mouse,\n            constraint: {\n                stiffness: mouseConstraintStiffness,\n                render: {\n                    visible: false\n                }\n            }\n        });\n        render.mouse = mouse;\n        World.add(engine.world, [\n            floor,\n            leftWall,\n            rightWall,\n            ceiling,\n            mouseConstraint,\n            ...wordBodies.map((wb)=>wb.body)\n        ]);\n        const runner = Runner.create();\n        Runner.run(runner, engine);\n        Render.run(render);\n        const updateLoop = ()=>{\n            wordBodies.forEach((param)=>{\n                let { body, elem } = param;\n                const { x, y } = body.position;\n                elem.style.left = \"\".concat(x, \"px\");\n                elem.style.top = \"\".concat(y, \"px\");\n                elem.style.transform = \"translate(-50%, -50%) rotate(\".concat(body.angle, \"rad)\");\n            });\n            matter_js__WEBPACK_IMPORTED_MODULE_2___default().Engine.update(engine);\n            requestAnimationFrame(updateLoop);\n        };\n        updateLoop();\n        return ()=>{\n            Render.stop(render);\n            Runner.stop(runner);\n            if (render.canvas && canvasContainerRef.current) {\n                canvasContainerRef.current.removeChild(render.canvas);\n            }\n            World.clear(engine.world, false);\n            Engine.clear(engine);\n        };\n    }, [\n        effectStarted,\n        gravity,\n        wireframes,\n        backgroundColor,\n        mouseConstraintStiffness\n    ]);\n    const handleTrigger = ()=>{\n        if (!effectStarted && (trigger === \"click\" || trigger === \"hover\")) {\n            setEffectStarted(true);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"relative w-full h-full cursor-pointer overflow-hidden\",\n        onClick: trigger === \"click\" ? handleTrigger : undefined,\n        onMouseOver: trigger === \"hover\" ? handleTrigger : undefined,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: textRef,\n                className: \"absolute inset-0 flex items-center justify-center text-center px-4\",\n                style: {\n                    fontSize,\n                    lineHeight: 1.5,\n                    pointerEvents: effectStarted ? \"none\" : \"auto\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/FallingText.tsx\",\n                lineNumber: 234,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: canvasContainerRef,\n                className: \"absolute inset-0\",\n                style: {\n                    pointerEvents: effectStarted ? \"auto\" : \"none\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/FallingText.tsx\",\n                lineNumber: 243,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/Animations/FallingText.tsx\",\n        lineNumber: 228,\n        columnNumber: 5\n    }, undefined);\n};\n_s(FallingText, \"eHvFl6O29bOgs5Z9Y2zvcA3Wbb4=\");\n_c = FallingText;\n/* harmony default export */ __webpack_exports__[\"default\"] = (FallingText);\nvar _c;\n$RefreshReg$(_c, \"FallingText\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/Animations/FallingText.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/MagnetLine.tsx":
/*!***************************************!*\
  !*** ./src/components/MagnetLine.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst MagnetLines = (param)=>{\n    let { rows = 5, columns = 12, containerWidth = \"100%\", containerHeight = \"40vh\", lineColor = \"#1D1D1F\", lineWidth = \"2px\", lineHeight = \"32px\", baseAngle = -10, className = \"\", style = {} } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const container = containerRef.current;\n        if (!container) return;\n        const items = container.querySelectorAll(\"span\");\n        const onPointerMove = (pointer)=>{\n            items.forEach((item)=>{\n                const rect = item.getBoundingClientRect();\n                const centerX = rect.x + rect.width / 2;\n                const centerY = rect.y + rect.height / 2;\n                const b = pointer.x - centerX;\n                const a = pointer.y - centerY;\n                const c = Math.sqrt(a * a + b * b) || 1;\n                const r = Math.acos(b / c) * 180 / Math.PI * (pointer.y > centerY ? 1 : -1);\n                item.style.setProperty(\"--rotate\", \"\".concat(r, \"deg\"));\n            });\n        };\n        const handlePointerMove = (e)=>{\n            onPointerMove({\n                x: e.x,\n                y: e.y\n            });\n        };\n        window.addEventListener(\"pointermove\", handlePointerMove);\n        if (items.length) {\n            const middleIndex = Math.floor(items.length / 2);\n            const rect = items[middleIndex].getBoundingClientRect();\n            onPointerMove({\n                x: rect.x,\n                y: rect.y\n            });\n        }\n        return ()=>{\n            window.removeEventListener(\"pointermove\", handlePointerMove);\n        };\n    }, []);\n    const total = rows * columns;\n    const spans = Array.from({\n        length: total\n    }, (_, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n            className: \"block origin-center\",\n            style: {\n                backgroundColor: lineColor,\n                width: lineWidth,\n                height: lineHeight,\n                //@ts-ignore\n                \"--rotate\": \"\".concat(baseAngle, \"deg\"),\n                transform: \"rotate(var(--rotate))\",\n                willChange: \"transform\"\n            }\n        }, i, false, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/MagnetLine.tsx\",\n            lineNumber: 73,\n            columnNumber: 5\n        }, undefined));\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"grid place-items-center \".concat(className),\n        style: {\n            gridTemplateColumns: \"repeat(\".concat(columns, \", 1fr)\"),\n            gridTemplateRows: \"repeat(\".concat(rows, \", 1fr)\"),\n            width: containerWidth,\n            height: containerHeight,\n            ...style\n        },\n        children: spans\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/MagnetLine.tsx\",\n        lineNumber: 89,\n        columnNumber: 5\n    }, undefined);\n};\n_s(MagnetLines, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = MagnetLines;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MagnetLines);\nvar _c;\n$RefreshReg$(_c, \"MagnetLines\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL01hZ25ldExpbmUudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUVnRTtBQWVoRSxNQUFNRyxjQUEwQztRQUFDLEVBQy9DQyxPQUFPLENBQUMsRUFDUkMsVUFBVSxFQUFFLEVBQ1pDLGlCQUFpQixNQUFNLEVBQ3ZCQyxrQkFBa0IsTUFBTSxFQUN4QkMsWUFBWSxTQUFTLEVBQ3JCQyxZQUFZLEtBQUssRUFDakJDLGFBQWEsTUFBTSxFQUNuQkMsWUFBWSxDQUFDLEVBQUUsRUFDZkMsWUFBWSxFQUFFLEVBQ2RDLFFBQVEsQ0FBQyxDQUFDLEVBQ1g7O0lBQ0MsTUFBTUMsZUFBZWIsNkNBQU1BLENBQXdCO0lBRW5EQyxnREFBU0EsQ0FBQztRQUNSLE1BQU1hLFlBQVlELGFBQWFFLE9BQU87UUFDdEMsSUFBSSxDQUFDRCxXQUFXO1FBRWhCLE1BQU1FLFFBQVFGLFVBQVVHLGdCQUFnQixDQUFrQjtRQUUxRCxNQUFNQyxnQkFBZ0IsQ0FBQ0M7WUFDckJILE1BQU1JLE9BQU8sQ0FBQyxDQUFDQztnQkFDYixNQUFNQyxPQUFPRCxLQUFLRSxxQkFBcUI7Z0JBQ3ZDLE1BQU1DLFVBQVVGLEtBQUtHLENBQUMsR0FBR0gsS0FBS0ksS0FBSyxHQUFHO2dCQUN0QyxNQUFNQyxVQUFVTCxLQUFLTSxDQUFDLEdBQUdOLEtBQUtPLE1BQU0sR0FBRztnQkFFdkMsTUFBTUMsSUFBSVgsUUFBUU0sQ0FBQyxHQUFHRDtnQkFDdEIsTUFBTU8sSUFBSVosUUFBUVMsQ0FBQyxHQUFHRDtnQkFDdEIsTUFBTUssSUFBSUMsS0FBS0MsSUFBSSxDQUFDSCxJQUFJQSxJQUFJRCxJQUFJQSxNQUFNO2dCQUN0QyxNQUFNSyxJQUNKLEtBQU9DLElBQUksQ0FBQ04sSUFBSUUsS0FBSyxNQUFPQyxLQUFLSSxFQUFFLEdBQUtsQixDQUFBQSxRQUFRUyxDQUFDLEdBQUdELFVBQVUsSUFBSSxDQUFDO2dCQUVyRU4sS0FBS1QsS0FBSyxDQUFDMEIsV0FBVyxDQUFDLFlBQVksR0FBSyxPQUFGSCxHQUFFO1lBQzFDO1FBQ0Y7UUFFQSxNQUFNSSxvQkFBb0IsQ0FBQ0M7WUFDekJ0QixjQUFjO2dCQUFFTyxHQUFHZSxFQUFFZixDQUFDO2dCQUFFRyxHQUFHWSxFQUFFWixDQUFDO1lBQUM7UUFDakM7UUFFQWEsT0FBT0MsZ0JBQWdCLENBQUMsZUFBZUg7UUFFdkMsSUFBSXZCLE1BQU0yQixNQUFNLEVBQUU7WUFDaEIsTUFBTUMsY0FBY1gsS0FBS1ksS0FBSyxDQUFDN0IsTUFBTTJCLE1BQU0sR0FBRztZQUM5QyxNQUFNckIsT0FBT04sS0FBSyxDQUFDNEIsWUFBWSxDQUFDckIscUJBQXFCO1lBQ3JETCxjQUFjO2dCQUFFTyxHQUFHSCxLQUFLRyxDQUFDO2dCQUFFRyxHQUFHTixLQUFLTSxDQUFDO1lBQUM7UUFDdkM7UUFFQSxPQUFPO1lBQ0xhLE9BQU9LLG1CQUFtQixDQUFDLGVBQWVQO1FBQzVDO0lBQ0YsR0FBRyxFQUFFO0lBRUwsTUFBTVEsUUFBUTVDLE9BQU9DO0lBQ3JCLE1BQU00QyxRQUFRQyxNQUFNQyxJQUFJLENBQUM7UUFBRVAsUUFBUUk7SUFBTSxHQUFHLENBQUNJLEdBQUdDLGtCQUM5Qyw4REFBQ0M7WUFFQzFDLFdBQVU7WUFDVkMsT0FBTztnQkFDTDBDLGlCQUFpQi9DO2dCQUNqQm1CLE9BQU9sQjtnQkFDUHFCLFFBQVFwQjtnQkFDUixZQUFZO2dCQUNaLFlBQVksR0FBYSxPQUFWQyxXQUFVO2dCQUN6QjZDLFdBQVc7Z0JBQ1hDLFlBQVk7WUFDZDtXQVZLSjs7Ozs7SUFjVCxxQkFDRSw4REFBQ0s7UUFDQ0MsS0FBSzdDO1FBQ0xGLFdBQVcsMkJBQXFDLE9BQVZBO1FBQ3RDQyxPQUFPO1lBQ0wrQyxxQkFBcUIsVUFBa0IsT0FBUnZELFNBQVE7WUFDdkN3RCxrQkFBa0IsVUFBZSxPQUFMekQsTUFBSztZQUNqQ3VCLE9BQU9yQjtZQUNQd0IsUUFBUXZCO1lBQ1IsR0FBR00sS0FBSztRQUNWO2tCQUVDb0M7Ozs7OztBQUdQO0dBckZNOUM7S0FBQUE7QUF1Rk4sK0RBQWVBLFdBQVdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTWFnbmV0TGluZS50c3g/NjMzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCBDU1NQcm9wZXJ0aWVzIH0gZnJvbSBcInJlYWN0XCI7XG5cbmludGVyZmFjZSBNYWduZXRMaW5lc1Byb3BzIHtcbiAgcm93cz86IG51bWJlcjtcbiAgY29sdW1ucz86IG51bWJlcjtcbiAgY29udGFpbmVyV2lkdGg/OiBzdHJpbmc7XG4gIGNvbnRhaW5lckhlaWdodD86IHN0cmluZztcbiAgbGluZUNvbG9yPzogc3RyaW5nO1xuICBsaW5lV2lkdGg/OiBzdHJpbmc7XG4gIGxpbmVIZWlnaHQ/OiBzdHJpbmc7XG4gIGJhc2VBbmdsZT86IG51bWJlcjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG59XG5cbmNvbnN0IE1hZ25ldExpbmVzOiBSZWFjdC5GQzxNYWduZXRMaW5lc1Byb3BzPiA9ICh7XG4gIHJvd3MgPSA1LFxuICBjb2x1bW5zID0gMTIsXG4gIGNvbnRhaW5lcldpZHRoID0gXCIxMDAlXCIsXG4gIGNvbnRhaW5lckhlaWdodCA9IFwiNDB2aFwiLFxuICBsaW5lQ29sb3IgPSBcIiMxRDFEMUZcIixcbiAgbGluZVdpZHRoID0gXCIycHhcIixcbiAgbGluZUhlaWdodCA9IFwiMzJweFwiLFxuICBiYXNlQW5nbGUgPSAtMTAsXG4gIGNsYXNzTmFtZSA9IFwiXCIsXG4gIHN0eWxlID0ge30sXG59KSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcblxuICAgIGNvbnN0IGl0ZW1zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTFNwYW5FbGVtZW50PihcInNwYW5cIik7XG5cbiAgICBjb25zdCBvblBvaW50ZXJNb3ZlID0gKHBvaW50ZXI6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSkgPT4ge1xuICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCByZWN0ID0gaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHJlY3QueCArIHJlY3Qud2lkdGggLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gcmVjdC55ICsgcmVjdC5oZWlnaHQgLyAyO1xuXG4gICAgICAgIGNvbnN0IGIgPSBwb2ludGVyLnggLSBjZW50ZXJYO1xuICAgICAgICBjb25zdCBhID0gcG9pbnRlci55IC0gY2VudGVyWTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSB8fCAxO1xuICAgICAgICBjb25zdCByID1cbiAgICAgICAgICAoKE1hdGguYWNvcyhiIC8gYykgKiAxODApIC8gTWF0aC5QSSkgKiAocG9pbnRlci55ID4gY2VudGVyWSA/IDEgOiAtMSk7XG5cbiAgICAgICAgaXRlbS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcm90YXRlXCIsIGAke3J9ZGVnYCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlUG9pbnRlck1vdmUgPSAoZTogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgICBvblBvaW50ZXJNb3ZlKHsgeDogZS54LCB5OiBlLnkgfSk7XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgaGFuZGxlUG9pbnRlck1vdmUpO1xuXG4gICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgY29uc3QgbWlkZGxlSW5kZXggPSBNYXRoLmZsb29yKGl0ZW1zLmxlbmd0aCAvIDIpO1xuICAgICAgY29uc3QgcmVjdCA9IGl0ZW1zW21pZGRsZUluZGV4XS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIG9uUG9pbnRlck1vdmUoeyB4OiByZWN0LngsIHk6IHJlY3QueSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBoYW5kbGVQb2ludGVyTW92ZSk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHRvdGFsID0gcm93cyAqIGNvbHVtbnM7XG4gIGNvbnN0IHNwYW5zID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogdG90YWwgfSwgKF8sIGkpID0+IChcbiAgICA8c3BhblxuICAgICAga2V5PXtpfVxuICAgICAgY2xhc3NOYW1lPVwiYmxvY2sgb3JpZ2luLWNlbnRlclwiXG4gICAgICBzdHlsZT17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpbmVDb2xvcixcbiAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBsaW5lSGVpZ2h0LFxuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgXCItLXJvdGF0ZVwiOiBgJHtiYXNlQW5nbGV9ZGVnYCxcbiAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSh2YXIoLS1yb3RhdGUpKVwiLFxuICAgICAgICB3aWxsQ2hhbmdlOiBcInRyYW5zZm9ybVwiLFxuICAgICAgfX1cbiAgICAvPlxuICApKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHJlZj17Y29udGFpbmVyUmVmfVxuICAgICAgY2xhc3NOYW1lPXtgZ3JpZCBwbGFjZS1pdGVtcy1jZW50ZXIgJHtjbGFzc05hbWV9YH1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IGByZXBlYXQoJHtjb2x1bW5zfSwgMWZyKWAsXG4gICAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6IGByZXBlYXQoJHtyb3dzfSwgMWZyKWAsXG4gICAgICAgIHdpZHRoOiBjb250YWluZXJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjb250YWluZXJIZWlnaHQsXG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7c3BhbnN9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYWduZXRMaW5lcztcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVJlZiIsInVzZUVmZmVjdCIsIk1hZ25ldExpbmVzIiwicm93cyIsImNvbHVtbnMiLCJjb250YWluZXJXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsImxpbmVDb2xvciIsImxpbmVXaWR0aCIsImxpbmVIZWlnaHQiLCJiYXNlQW5nbGUiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNvbnRhaW5lclJlZiIsImNvbnRhaW5lciIsImN1cnJlbnQiLCJpdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvblBvaW50ZXJNb3ZlIiwicG9pbnRlciIsImZvckVhY2giLCJpdGVtIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNlbnRlclgiLCJ4Iiwid2lkdGgiLCJjZW50ZXJZIiwieSIsImhlaWdodCIsImIiLCJhIiwiYyIsIk1hdGgiLCJzcXJ0IiwiciIsImFjb3MiLCJQSSIsInNldFByb3BlcnR5IiwiaGFuZGxlUG9pbnRlck1vdmUiLCJlIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsIm1pZGRsZUluZGV4IiwiZmxvb3IiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG90YWwiLCJzcGFucyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwic3BhbiIsImJhY2tncm91bmRDb2xvciIsInRyYW5zZm9ybSIsIndpbGxDaGFuZ2UiLCJkaXYiLCJyZWYiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MagnetLine.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/blogSection.tsx":
/*!****************************************!*\
  !*** ./src/components/blogSection.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TestimonialsSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Animations/AnimatedContent */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction TestimonialsSection() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full bg-monochrome-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-[1680px] gap-[64px] mx-auto flex flex-col px-4 md:px-6 lg:px-8 py-8 md:py-12\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-title font-medium font-satoshi leading-[48px] text-monochrome-800\",\n                            children: \"/Blog\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                            lineNumber: 9,\n                            columnNumber: 21\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            href: \"https://medium.com/@clement.sainthilaire.app\",\n                            target: \"_blank\",\n                            className: \"flex items-center gap-2 group cursor-pointer\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                    children: \"explorer tous les articles\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                    lineNumber: 11,\n                                    columnNumber: 25\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                    width: \"15\",\n                                    height: \"8\",\n                                    viewBox: \"0 0 15 8\",\n                                    fill: \"none\",\n                                    xmlns: \"http://www.w3.org/2000/svg\",\n                                    className: \"transform transition-transform group-hover:translate-x-1\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M14.3536 4.35355C14.5488 4.15829 14.5488 3.84171 14.3536 3.64645L11.1716 0.464466C10.9763 0.269204 10.6597 0.269204 10.4645 0.464466C10.2692 0.659728 10.2692 0.976311 10.4645 1.17157L13.2929 4L10.4645 6.82843C10.2692 7.02369 10.2692 7.34027 10.4645 7.53553C10.6597 7.7308 10.9763 7.7308 11.1716 7.53553L14.3536 4.35355ZM0 4.5L14 4.5V3.5L0 3.5L0 4.5Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 14,\n                                        columnNumber: 29\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                    lineNumber: 12,\n                                    columnNumber: 25\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                            lineNumber: 10,\n                            columnNumber: 21\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                    lineNumber: 8,\n                    columnNumber: 17\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col md:flex-row w-full gap-[32px]\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3 h-auto gap-[64px]\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                            lineNumber: 21,\n                            columnNumber: 21\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-2/3 h-auto gap-[64px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex flex-col md:grid grid-cols-2 gap-16\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"Grilles vs Listes\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 27,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 28,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"Lors de la r\\xe9alisation d’un projet client, la question de l’affichage de leurs produit s’est pos\\xe9 quant au choix de la disposition en liste ou en grille. Si l’affichage en grille peut para\\xeetre \\xe9vident et plus efficace au premier abord, ce dernier n’est clairement pas parfait et les listes sont en r\\xe9alit\\xe9s privil\\xe9gi\\xe9s sous certaines conditions.\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 29,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 26,\n                                            columnNumber: 33\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 25,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"iMessage et le chiffrement quantique\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 34,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 35,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"D\\xe9couvrez comment Apple \\xe0 dors et d\\xe9j\\xe0 rendu sa messagerie propri\\xe9taire s\\xe9curis\\xe9 contre les “menaces” les nouveaux types de cyberattaques que pourrait engendrer les ordinateurs quantiques.\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 36,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 33,\n                                            columnNumber: 29\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 32,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"L'importance des couleurs dans le design\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 41,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 42,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"Les couleurs jouent un r\\xf4le fondamental dans le design. Elles influencent les \\xe9motions et la perception des utilisateurs. Choisir la bonne palette de couleurs peut am\\xe9liorer l'exp\\xe9rience utilisateur et renforcer l'identit\\xe9 de marque.\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 43,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 40,\n                                            columnNumber: 29\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 39,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"Wtf is a bento in design ?\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 48,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 49,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"Si vous suivez le monde de la tech, vous avez d\\xfb \\xeatre t\\xe9moin de l’\\xe9mergence de cette nouvelle mode des bentos. Le bento est un concept simple : il s’agit ni plus ni moins que d'un mode d’organisation d’\\xe9l\\xe9ments dans un espace, une technique qui permet de compiler un grand nombre d’informations et de les organiser, sans pour autant se retrouver avec une page dont le “trop” dessert l’objectif dont il a l’origine.\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 50,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 47,\n                                            columnNumber: 29\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 46,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"La vision du futur dans la techno du pr\\xe9sent\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 55,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 56,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"L’Apple Vision Pro \\xe0 fait coul\\xe9 de l’encre \\xe0 tous les niveaux, de part ses prouesse technologiques, son prix, ses fonctionnalit\\xe9s, l’experiences qu’il procure et celles qu’il promet. \"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 57,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 54,\n                                            columnNumber: 29\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 53,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"col-span-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#1d1d1f] text-xl font-medium font-['Satoshi_Variable'] leading-relaxed mb-2\",\n                                                    children: \"L'importance des couleurs dans le design\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 62,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch h-0 relative ring-1 ring-[#1d1d1f]\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 63,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-[#75757a] text-base font-medium font-['Satoshi_Variable'] leading-snug pt-2\",\n                                                    children: \"Les couleurs jouent un r\\xf4le fondamental dans le design. Elles influencent les \\xe9motions et la perception des utilisateurs. Choisir la bonne palette de couleurs peut am\\xe9liorer l'exp\\xe9rience utilisateur et renforcer l'identit\\xe9 de marque.\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                                    lineNumber: 64,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                            lineNumber: 61,\n                                            columnNumber: 29\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                        lineNumber: 60,\n                                        columnNumber: 29\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                                lineNumber: 24,\n                                columnNumber: 25\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                            lineNumber: 23,\n                            columnNumber: 21\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n                    lineNumber: 20,\n                    columnNumber: 17\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n            lineNumber: 7,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/blogSection.tsx\",\n        lineNumber: 6,\n        columnNumber: 9\n    }, this);\n}\n_c = TestimonialsSection;\nvar _c;\n$RefreshReg$(_c, \"TestimonialsSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/blogSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/footerSection.tsx":
/*!******************************************!*\
  !*** ./src/components/footerSection.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FooterSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Animations/AnimatedContent */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\");\n/* harmony import */ var _MagnetLine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MagnetLine */ \"(app-pages-browser)/./src/components/MagnetLine.tsx\");\n/* harmony import */ var _react_spring_web__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/web */ \"(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction FooterSection() {\n    _s();\n    const [rotateAnimation, api] = (0,_react_spring_web__WEBPACK_IMPORTED_MODULE_3__.useSpring)(()=>({\n            from: {\n                transform: \"rotate(0deg)\"\n            },\n            config: {\n                tension: 200,\n                friction: 20,\n                duration: 200\n            }\n        }));\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full bg-monochrome-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-[1680px] gap-[64px] mx-auto flex flex-col px-4 md:px-6 lg:px-4 py-4 md:py-4\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"self-stretch bg-white inline-flex flex-col justify-start items-center gap-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"self-stretch w-full py-16 inline-flex justify-start items-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex-1 inline-flex flex-col justify-center items-start gap-8\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"self-stretch relative justify-start text-monochrome-800 text-subtitle md:text-display font-medium font-satoshi md:leading-[65px]\",\n                                            children: \"Cr\\xe9ons ensemble quelque chose de beau.\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 24,\n                                            columnNumber: 33\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                        lineNumber: 23,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex mx-auto md:mx-0 md:inline-flex justify-center md:justify-start md:items-start gap-4\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"relative group\",\n                                                onMouseEnter: ()=>api.start({\n                                                        transform: \"rotate(90deg)\"\n                                                    }),\n                                                onMouseLeave: ()=>api.start({\n                                                        transform: \"rotate(0deg)\"\n                                                    }),\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        className: \"w-[200px] h-14 px-4 py-2 bg-monochrome-800 rounded-[9px] shadow-[0px_2px_4px_0px_rgba(0,0,0,0.10)] border-[1.5px] border-white/80 backdrop-blur-[100px] flex justify-center items-center gap-2\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"relative justify-start text-monochrome-200 text-base font-bold font-satoshi leading-snug\",\n                                                                children: \"Me contacter\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                lineNumber: 37,\n                                                                columnNumber: 41\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_spring_web__WEBPACK_IMPORTED_MODULE_3__.animated.div, {\n                                                                style: rotateAnimation,\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"w-6 h-6 relative rounded overflow-hidden\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                        width: \"24\",\n                                                                        height: \"24\",\n                                                                        viewBox: \"0 0 24 24\",\n                                                                        fill: \"none\",\n                                                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                            d: \"M8.99995 6L15.0001 12L8.99995 18\",\n                                                                            stroke: \"#F5F5F7\",\n                                                                            \"stroke-width\": \"1.5\",\n                                                                            \"stroke-linecap\": \"round\",\n                                                                            \"stroke-linejoin\": \"round\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                            lineNumber: 41,\n                                                                            columnNumber: 53\n                                                                        }, this)\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                        lineNumber: 40,\n                                                                        columnNumber: 49\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                    lineNumber: 39,\n                                                                    columnNumber: 45\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                lineNumber: 38,\n                                                                columnNumber: 41\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                        lineNumber: 34,\n                                                        columnNumber: 37\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"absolute left-0 mt-2 w-[200px] bg-monochrome-800 rounded-[9px] shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-10\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                                href: \"mailto:clement.sainthilaire.pro@gmail.com\",\n                                                                className: \"block px-4 py-3 text-monochrome-100 hover:bg-monochrome-600 rounded-t-[9px] font-satoshi flex items-center gap-2\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                        width: \"21\",\n                                                                        height: \"20\",\n                                                                        viewBox: \"0 0 25 24\",\n                                                                        fill: \"none\",\n                                                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                d: \"M2.5 7.5L11.6056 12.0528C12.1686 12.3343 12.8314 12.3343 13.3944 12.0528L22.5 7.5C22.5 5.567 20.933 4 19 4H6C4.067 4 2.5 5.567 2.5 7.5Z\",\n                                                                                fill: \"#F5F5F7\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                                lineNumber: 49,\n                                                                                columnNumber: 49\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                d: \"M5.5 20H19.5C21.1569 20 22.5 18.6569 22.5 17V9.5L13.8416 13.8292C12.9971 14.2515 12.0029 14.2515 11.1584 13.8292L2.5 9.5V17C2.5 18.6569 3.84315 20 5.5 20Z\",\n                                                                                fill: \"#F5F5F7\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                                lineNumber: 50,\n                                                                                columnNumber: 49\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                        lineNumber: 48,\n                                                                        columnNumber: 45\n                                                                    }, this),\n                                                                    \"Email\"\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                lineNumber: 47,\n                                                                columnNumber: 41\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                                href: \"https://linkedin.com/in/username\",\n                                                                target: \"_blank\",\n                                                                className: \"block px-4 py-3 text-monochrome-100 hover:bg-monochrome-600 font-satoshi flex items-center gap-2\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                        width: \"20\",\n                                                                        height: \"20\",\n                                                                        viewBox: \"0 0 24 24\",\n                                                                        fill: \"none\",\n                                                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                d: \"M16 8C17.5913 8 19.1174 8.63214 20.2426 9.75736C21.3679 10.8826 22 12.4087 22 14V21H18V14C18 13.4696 17.7893 12.9609 17.4142 12.5858C17.0391 12.2107 16.5304 12 16 12C15.4696 12 14.9609 12.2107 14.5858 12.5858C14.2107 12.9609 14 13.4696 14 14V21H10V14C10 12.4087 10.6321 10.8826 11.7574 9.75736C12.8826 8.63214 14.4087 8 16 8Z\",\n                                                                                fill: \"#f5f5f7\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                                lineNumber: 56,\n                                                                                columnNumber: 49\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                d: \"M6 9H2V21H6V9Z\",\n                                                                                fill: \"#f5f5f7\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                                lineNumber: 57,\n                                                                                columnNumber: 49\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                d: \"M4 6C5.10457 6 6 5.10457 6 4C6 2.89543 5.10457 2 4 2C2.89543 2 2 2.89543 2 4C2 5.10457 2.89543 6 4 6Z\",\n                                                                                fill: \"#f5f5f7\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                                lineNumber: 58,\n                                                                                columnNumber: 49\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                        lineNumber: 55,\n                                                                        columnNumber: 45\n                                                                    }, this),\n                                                                    \"LinkedIn\"\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                lineNumber: 54,\n                                                                columnNumber: 41\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                                href: \"https://twitter.com/username\",\n                                                                target: \"_blank\",\n                                                                className: \"block px-4 py-3 text-monochrome-100 hover:bg-monochrome-600 rounded-b-[9px] font-satoshi flex items-center gap-2\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                        width: \"20\",\n                                                                        height: \"20\",\n                                                                        viewBox: \"0 0 24 24\",\n                                                                        fill: \"none\",\n                                                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                            d: \"M17.2645 11.1966C17.1698 11.1512 17.0735 11.1074 16.976 11.0656C16.8062 7.93667 15.0965 6.14536 12.2257 6.12703C12.2127 6.12695 12.1998 6.12695 12.1868 6.12695C10.4697 6.12695 9.04158 6.85989 8.1626 8.19362L9.74145 9.27668C10.3981 8.28043 11.4286 8.06805 12.1875 8.06805C12.1963 8.06805 12.2051 8.06805 12.2138 8.06813C13.159 8.07416 13.8723 8.34899 14.3339 8.88494C14.6699 9.27513 14.8946 9.81432 15.0059 10.4948C14.1678 10.3524 13.2614 10.3086 12.2925 10.3641C9.56312 10.5213 7.80844 12.1132 7.92629 14.3251C7.98609 15.4471 8.54505 16.4124 9.50013 17.0429C10.3076 17.576 11.3477 17.8366 12.4286 17.7776C13.856 17.6994 14.9758 17.1548 15.7571 16.1589C16.3504 15.4027 16.7256 14.4226 16.8913 13.1878C17.5716 13.5983 18.0758 14.1386 18.3542 14.788C18.8277 15.8921 18.8553 17.7062 17.375 19.1853C16.078 20.481 14.519 21.0415 12.1629 21.0588C9.54931 21.0395 7.5727 20.2013 6.28757 18.5676C5.08415 17.0378 4.46221 14.8281 4.43901 12C4.46221 9.17183 5.08415 6.96218 6.28757 5.43239C7.5727 3.79869 9.54928 2.96052 12.1628 2.9411C14.7954 2.96067 16.8064 3.80287 18.1408 5.44446C18.795 6.24947 19.2883 7.26184 19.6135 8.44222L21.4637 7.94859C21.0695 6.49567 20.4493 5.24367 19.6052 4.20535C17.8946 2.10077 15.3928 1.02236 12.1693 1H12.1564C8.93943 1.02228 6.46564 2.10479 4.80374 4.21742C3.32488 6.0974 2.56204 8.71326 2.53641 11.9923L2.53633 12L2.53641 12.0077C2.56204 15.2867 3.32488 17.9026 4.80374 19.7826C6.46564 21.8952 8.93943 22.9778 12.1564 23H12.1693C15.0294 22.9802 17.0453 22.2314 18.7061 20.5721C20.8789 18.4013 20.8135 15.6803 20.0974 14.0099C19.5836 12.8121 18.604 11.8391 17.2645 11.1966ZM12.3264 15.8393C11.1301 15.9067 9.88736 15.3698 9.82608 14.2197C9.78066 13.367 10.4329 12.4155 12.3998 12.3021C12.6251 12.2891 12.8461 12.2828 13.0632 12.2828C13.7776 12.2828 14.446 12.3522 15.0536 12.485C14.827 15.3155 13.4976 15.7751 12.3264 15.8393Z\",\n                                                                            fill: \"#F5F5F7\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                            lineNumber: 64,\n                                                                            columnNumber: 49\n                                                                        }, this)\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                        lineNumber: 63,\n                                                                        columnNumber: 45\n                                                                    }, this),\n                                                                    \"Threads\"\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                                lineNumber: 62,\n                                                                columnNumber: 41\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                        lineNumber: 46,\n                                                        columnNumber: 37\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                lineNumber: 29,\n                                                columnNumber: 33\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 27,\n                                            columnNumber: 33\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                        lineNumber: 26,\n                                        columnNumber: 29\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 22,\n                                columnNumber: 25\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"hidden md:flex flex-1 self-stretch flex justify-end items-center\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MagnetLine__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 74,\n                                    columnNumber: 33\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 73,\n                                columnNumber: 25\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 21\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col md:flex-row self-stretch max-w-[1680px] pb-16 md:inline-flex justify-between items-start gap-[24px] md:gap-0\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"inline-flex flex-col justify-start items-start gap-[16px]\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative justify-start text-monochrome-800 text-subtitle font-medium font-satoshi leading-[30px] pb-8\",\n                                            children: \"Navigation\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 80,\n                                            columnNumber: 29\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"self-stretch flex flex-col justify-start items-start gap-4\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Index\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 82,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Projets\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 83,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Services\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 84,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Produits\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 85,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"A propos\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 86,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Contact\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 87,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 81,\n                                            columnNumber: 29\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 79,\n                                    columnNumber: 29\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 78,\n                                columnNumber: 25\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"inline-flex flex-col justify-start items-start gap-[16px]\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative justify-start text-monochrome-800 text-subtitle font-medium font-satoshi leading-[30px] pb-8\",\n                                            children: \"Ressources\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 93,\n                                            columnNumber: 29\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"self-stretch flex flex-col justify-start items-start gap-4\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Resume\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 95,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Newsletter\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 96,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Serveur Discord\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 97,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Blog\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 98,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 94,\n                                            columnNumber: 29\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 92,\n                                    columnNumber: 29\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 91,\n                                columnNumber: 25\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"inline-flex flex-col justify-start items-start gap-[16px]\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative justify-start text-monochrome-800 text-subtitle font-medium font-satoshi leading-[30px] pb-8\",\n                                            children: \"Contact\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 104,\n                                            columnNumber: 29\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex flex-col justify-start items-start gap-4\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Mail\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 106,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Linkedin\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 107,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Instagram\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 108,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"self-stretch relative justify-start text-monochrome-500 text-body font-medium font-satoshi leading-snug\",\n                                                    children: \"Threads\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 109,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 105,\n                                            columnNumber: 29\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 103,\n                                    columnNumber: 29\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 102,\n                                columnNumber: 25\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"hidden md:flex w-[450px] inline-flex flex-col justify-center items-start gap-4\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative justify-start text-monochrome-800 text-subtitle font-medium font-satoshi leading-[30px] pb-8\",\n                                            children: \"Newsletter\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 115,\n                                            columnNumber: 29\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"self-stretch p-4 rounded-[999px] border border-monochrome-800 inline-flex justify-center items-center gap-2.5\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex-1 relative justify-start text-monochrome-500 text-body font-normal font-satoshi leading-snug\",\n                                                    children: \"email\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 117,\n                                                    columnNumber: 33\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"w-6 h-6 relative origin-top-left rounded items-center overflow-hidden\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                        width: \"24\",\n                                                        height: \"24\",\n                                                        viewBox: \"0 0 24 24\",\n                                                        fill: \"none\",\n                                                        xmlns: \"http://www.w3.org/2000/svg\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                            d: \"M8.53021 20.4697C8.8231 20.7626 8.8231 21.2374 8.53021 21.5303C8.23731 21.8232 7.76244 21.8232 7.46955 21.5303L3.46955 17.5303C3.17665 17.2374 3.17665 16.7626 3.46955 16.4697L7.46955 12.4697C7.76244 12.1768 8.23731 12.1768 8.53021 12.4697C8.8231 12.7626 8.8231 13.2374 8.53021 13.5303L5.81054 16.25H15C17.8995 16.25 20.25 13.8995 20.25 11C20.25 8.10051 17.8995 5.75 15 5.75H4.99988C4.58566 5.75 4.24988 5.41421 4.24988 5C4.24988 4.58579 4.58566 4.25 4.99988 4.25H15C18.7279 4.25 21.75 7.27208 21.75 11C21.75 14.7279 18.7279 17.75 15 17.75H5.81054L8.53021 20.4697Z\",\n                                                            fill: \"#75757A\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                            lineNumber: 120,\n                                                            columnNumber: 41\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                        lineNumber: 119,\n                                                        columnNumber: 37\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                                    lineNumber: 118,\n                                                    columnNumber: 33\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                            lineNumber: 116,\n                                            columnNumber: 29\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 114,\n                                    columnNumber: 25\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 113,\n                                columnNumber: 25\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                        lineNumber: 77,\n                        columnNumber: 21\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-full justify-between items-center inline-flex\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-monochrome-500 text-subbody font-normal leading-tight\",\n                                children: [\n                                    \" \",\n                                    new Date().getFullYear(),\n                                    \" Cl\\xe9ment Saint-Hilaire. All Rights Reserved.\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 129,\n                                columnNumber: 25\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"px-5 py-2.5 bg-monochrome-300 rounded-[999px] justify-center items-center gap-2.5 hidden md:flex\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-monochrome-800 text-subbody font-normal leading-tight\",\n                                    children: \"made by csh\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                    lineNumber: 131,\n                                    columnNumber: 29\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                                lineNumber: 130,\n                                columnNumber: 25\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                        lineNumber: 128,\n                        columnNumber: 21\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n                lineNumber: 20,\n                columnNumber: 17\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n            lineNumber: 19,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/footerSection.tsx\",\n        lineNumber: 18,\n        columnNumber: 9\n    }, this);\n}\n_s(FooterSection, \"1s5qQKhFyPMVPu7fIDTNcxmlp5c=\", false, function() {\n    return [\n        _react_spring_web__WEBPACK_IMPORTED_MODULE_3__.useSpring\n    ];\n});\n_c = FooterSection;\nvar _c;\n$RefreshReg$(_c, \"FooterSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/footerSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/heroSection.tsx":
/*!****************************************!*\
  !*** ./src/components/heroSection.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/Animations/AnimatedContent */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst BLUR_FADE_DELAY = 0.04;\nconst HeroSection = ()=>{\n    _s();\n    const [activeSection, setActiveSection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"For anyone\");\n    const content = {\n        \"For anyone\": '<span>Hello there, I\\'m \\n      <span style=\"color: #0a84ff;\">Cl\\xe9ment Saint-Hilaire</span> \\n      a french \\n      digital creator who cares about making beautiful\\n      things that help people.\\n      </span>',\n        designer: \"I'm a systems thinker with a high bar for quality. From process to pixels, I'll collaborate with you, learn from you, and help make something we're proud of.\",\n        developer: '<span>I\\'m {highly_technical} and while (I\\'m ≠ engineer) I know my way /around & can speak \"fluently\" with you; I built (this.site) but feel free to visit my <a href=\"https://github.com/ClementSaint-Hilaire\"><span style=\"color: #0a84ff;\">[Github]</span></a>.</span>',\n        recruiters: '<span>I\\'m a french designer with 4 years of experience accross brand & products, at compagny large and small. You can download my resume  <a href=\"/home/resume_Clement_SAINT-HILAIRE.pdf\"><span style=\"color: #0a84ff;\">here</span></a>.</span>',\n        CM: \"I currently serve as the CM for both Wattiz and Skorpia.fr. While It's not my speciality, I know my way around and know the do & don't.\",\n        \"mom & Dad\": \"I do magic stuff on my computer to make the internet look better. <br/>And yes I ate my vegetables already...\"\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"justify-center flex flex-col w-full max-w-[1680px] h-[85vh] max-h-[1000px] mx-auto\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex flex-col justify-center md:items-center w-full mx-auto px-[16px]\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-full max-w-[600px] flex flex-col items-start gap-[16px] inline-flex\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full items-center inline-flex overflow-scroll scroll-smooth gap-[32px]\",\n                            children: Object.keys(content).map((key)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    onClick: ()=>setActiveSection(key),\n                                    className: \"font-satoshi text-subbody cursor-pointer flex flex-none transition-colors \".concat(activeSection === key ? \"text-monochrome-800 \" : \"text-monochrome-500 hover:text-monochrome-600\"),\n                                    children: key.charAt(0).toUpperCase() + key.slice(1)\n                                }, key, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                                    lineNumber: 39,\n                                    columnNumber: 15\n                                }, undefined))\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                            lineNumber: 37,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"font-satoshi text-body text-monochrome-800 font-medium leading-[22px]\",\n                            dangerouslySetInnerHTML: {\n                                __html: content[activeSection]\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                            lineNumber: 53,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                    lineNumber: 36,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n                lineNumber: 34,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n            lineNumber: 33,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/heroSection.tsx\",\n        lineNumber: 32,\n        columnNumber: 5\n    }, undefined);\n};\n_s(HeroSection, \"Kxo63WzDBSvd1Xp6zEVpCqRzDWc=\");\n_c = HeroSection;\n/* harmony default export */ __webpack_exports__[\"default\"] = (HeroSection);\nvar _c;\n$RefreshReg$(_c, \"HeroSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2hlcm9TZWN0aW9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ2lDO0FBQzBCO0FBRzNELE1BQU1FLGtCQUFrQjtBQUV4QixNQUFNQyxjQUFjOztJQUNsQixNQUFNLENBQUNDLGVBQWVDLGlCQUFpQixHQUFHTCwrQ0FBUUEsQ0FBQztJQUVuRCxNQUFNTSxVQUFxQztRQUN6QyxjQUNHO1FBTUhDLFVBQ0U7UUFDRkMsV0FDRztRQUNIQyxZQUNHO1FBQ0hDLElBQ0U7UUFDRixhQUNFO0lBQ0o7SUFFQSxxQkFDRSw4REFBQ0M7UUFBUUMsV0FBVTtrQkFDakIsNEVBQUNDO1lBQUlELFdBQVU7c0JBQ2IsNEVBQUNYLG1FQUFlQTswQkFFaEIsNEVBQUNZO29CQUFJRCxXQUFVOztzQ0FDYiw4REFBQ0M7NEJBQUlELFdBQVU7c0NBQ1pFLE9BQU9DLElBQUksQ0FBQ1QsU0FBU1UsR0FBRyxDQUFDLENBQUNDLG9CQUN6Qiw4REFBQ0o7b0NBRUNLLFNBQVMsSUFBTWIsaUJBQWlCWTtvQ0FDaENMLFdBQVcsNkVBSVYsT0FIQ1Isa0JBQWtCYSxNQUNkLHlCQUNBOzhDQUdMQSxJQUFJRSxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLSCxJQUFJSSxLQUFLLENBQUM7bUNBUnBDSjs7Ozs7Ozs7OztzQ0FhVCw4REFBQ0o7NEJBQ0NELFdBQVU7NEJBQ1ZVLHlCQUF5QjtnQ0FBRUMsUUFBUWpCLE9BQU8sQ0FBQ0YsY0FBYzs0QkFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUXhFO0dBdkRNRDtLQUFBQTtBQXlETiwrREFBZUEsV0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9oZXJvU2VjdGlvbi50c3g/NTNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQW5pbWF0ZWRDb250ZW50IGZyb20gXCJAL0FuaW1hdGlvbnMvQW5pbWF0ZWRDb250ZW50XCI7XG5pbXBvcnQgSW1hZ2VUcmFpbCBmcm9tIFwiQC9BbmltYXRpb25zL0ltYWdlVHJhaWxcIjtcblxuY29uc3QgQkxVUl9GQURFX0RFTEFZID0gMC4wNDtcblxuY29uc3QgSGVyb1NlY3Rpb24gPSAoKSA9PiB7XG4gIGNvbnN0IFthY3RpdmVTZWN0aW9uLCBzZXRBY3RpdmVTZWN0aW9uXSA9IHVzZVN0YXRlKFwiRm9yIGFueW9uZVwiKTtcblxuICBjb25zdCBjb250ZW50OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIFwiRm9yIGFueW9uZVwiIDogXG4gICAgICBgPHNwYW4+SGVsbG8gdGhlcmUsIEknbSBcbiAgICAgIDxzcGFuIHN0eWxlPVwiY29sb3I6ICMwYTg0ZmY7XCI+Q2zDqW1lbnQgU2FpbnQtSGlsYWlyZTwvc3Bhbj4gXG4gICAgICBhIGZyZW5jaCBcbiAgICAgIGRpZ2l0YWwgY3JlYXRvciB3aG8gY2FyZXMgYWJvdXQgbWFraW5nIGJlYXV0aWZ1bFxuICAgICAgdGhpbmdzIHRoYXQgaGVscCBwZW9wbGUuXG4gICAgICA8L3NwYW4+YCxcbiAgICBkZXNpZ25lcjpcbiAgICAgIFwiSSdtIGEgc3lzdGVtcyB0aGlua2VyIHdpdGggYSBoaWdoIGJhciBmb3IgcXVhbGl0eS4gRnJvbSBwcm9jZXNzIHRvIHBpeGVscywgSSdsbCBjb2xsYWJvcmF0ZSB3aXRoIHlvdSwgbGVhcm4gZnJvbSB5b3UsIGFuZCBoZWxwIG1ha2Ugc29tZXRoaW5nIHdlJ3JlIHByb3VkIG9mLlwiLFxuICAgIGRldmVsb3BlcjpcbiAgICAgIGA8c3Bhbj5JJ20ge2hpZ2hseV90ZWNobmljYWx9IGFuZCB3aGlsZSAoSSdtIOKJoCBlbmdpbmVlcikgSSBrbm93IG15IHdheSAvYXJvdW5kICYgY2FuIHNwZWFrIFwiZmx1ZW50bHlcIiB3aXRoIHlvdTsgSSBidWlsdCAodGhpcy5zaXRlKSBidXQgZmVlbCBmcmVlIHRvIHZpc2l0IG15IDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vQ2xlbWVudFNhaW50LUhpbGFpcmVcIj48c3BhbiBzdHlsZT1cImNvbG9yOiAjMGE4NGZmO1wiPltHaXRodWJdPC9zcGFuPjwvYT4uPC9zcGFuPmAsXG4gICAgcmVjcnVpdGVyczpcbiAgICAgIGA8c3Bhbj5JJ20gYSBmcmVuY2ggZGVzaWduZXIgd2l0aCA0IHllYXJzIG9mIGV4cGVyaWVuY2UgYWNjcm9zcyBicmFuZCAmIHByb2R1Y3RzLCBhdCBjb21wYWdueSBsYXJnZSBhbmQgc21hbGwuIFlvdSBjYW4gZG93bmxvYWQgbXkgcmVzdW1lICA8YSBocmVmPVwiL2hvbWUvcmVzdW1lX0NsZW1lbnRfU0FJTlQtSElMQUlSRS5wZGZcIj48c3BhbiBzdHlsZT1cImNvbG9yOiAjMGE4NGZmO1wiPmhlcmU8L3NwYW4+PC9hPi48L3NwYW4+YCxcbiAgICBDTTogXG4gICAgICBcIkkgY3VycmVudGx5IHNlcnZlIGFzIHRoZSBDTSBmb3IgYm90aCBXYXR0aXogYW5kIFNrb3JwaWEuZnIuIFdoaWxlIEl0J3Mgbm90IG15IHNwZWNpYWxpdHksIEkga25vdyBteSB3YXkgYXJvdW5kIGFuZCBrbm93IHRoZSBkbyAmIGRvbid0LlwiLFxuICAgIFwibW9tICYgRGFkXCI6IFxuICAgICAgXCJJIGRvIG1hZ2ljIHN0dWZmIG9uIG15IGNvbXB1dGVyIHRvIG1ha2UgdGhlIGludGVybmV0IGxvb2sgYmV0dGVyLiA8YnIvPkFuZCB5ZXMgSSBhdGUgbXkgdmVnZXRhYmxlcyBhbHJlYWR5Li4uXCIsXG4gIH07XG4gIFxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImp1c3RpZnktY2VudGVyIGZsZXggZmxleC1jb2wgdy1mdWxsIG1heC13LVsxNjgwcHhdIGgtWzg1dmhdIG1heC1oLVsxMDAwcHhdIG14LWF1dG9cIj4gICAgICBcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBtZDppdGVtcy1jZW50ZXIgdy1mdWxsIG14LWF1dG8gcHgtWzE2cHhdXCI+XG4gICAgICAgIDxBbmltYXRlZENvbnRlbnQ+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWF4LXctWzYwMHB4XSBmbGV4IGZsZXgtY29sIGl0ZW1zLXN0YXJ0IGdhcC1bMTZweF0gaW5saW5lLWZsZXhcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZnVsbCBpdGVtcy1jZW50ZXIgaW5saW5lLWZsZXggb3ZlcmZsb3ctc2Nyb2xsIHNjcm9sbC1zbW9vdGggZ2FwLVszMnB4XVwiPlxuICAgICAgICAgICAge09iamVjdC5rZXlzKGNvbnRlbnQpLm1hcCgoa2V5KSA9PiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRBY3RpdmVTZWN0aW9uKGtleSl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgZm9udC1zYXRvc2hpIHRleHQtc3ViYm9keSBjdXJzb3ItcG9pbnRlciBmbGV4IGZsZXgtbm9uZSB0cmFuc2l0aW9uLWNvbG9ycyAke1xuICAgICAgICAgICAgICAgICAgYWN0aXZlU2VjdGlvbiA9PT0ga2V5XG4gICAgICAgICAgICAgICAgICAgID8gXCJ0ZXh0LW1vbm9jaHJvbWUtODAwIFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCJ0ZXh0LW1vbm9jaHJvbWUtNTAwIGhvdmVyOnRleHQtbW9ub2Nocm9tZS02MDBcIlxuICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2tleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvbnQtc2F0b3NoaSB0ZXh0LWJvZHkgdGV4dC1tb25vY2hyb21lLTgwMCBmb250LW1lZGl1bSBsZWFkaW5nLVsyMnB4XVwiXG4gICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY29udGVudFthY3RpdmVTZWN0aW9uXSB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9BbmltYXRlZENvbnRlbnQ+XG5cbiAgICAgIDwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlcm9TZWN0aW9uOyJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsIkFuaW1hdGVkQ29udGVudCIsIkJMVVJfRkFERV9ERUxBWSIsIkhlcm9TZWN0aW9uIiwiYWN0aXZlU2VjdGlvbiIsInNldEFjdGl2ZVNlY3Rpb24iLCJjb250ZW50IiwiZGVzaWduZXIiLCJkZXZlbG9wZXIiLCJyZWNydWl0ZXJzIiwiQ00iLCJzZWN0aW9uIiwiY2xhc3NOYW1lIiwiZGl2IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsIm9uQ2xpY2siLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/heroSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/navbarSection.tsx":
/*!******************************************!*\
  !*** ./src/components/navbarSection.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ NavbarSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"(app-pages-browser)/./node_modules/next/dist/api/link.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction NavbarSection() {\n    _s();\n    const [isMenuOpen, setIsMenuOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const toggleMenu = ()=>{\n        setIsMenuOpen(!isMenuOpen);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n        className: \"fixed top-0 left-0 w-screen z-50 bg-monochrome-100\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-between items-center py-4 px-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"z-20\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            href: \"/\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                width: \"83\",\n                                height: \"14\",\n                                viewBox: \"0 0 83 14\",\n                                fill: \"none\",\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M10.2067 11.0438H12.1045C12.1169 11.4776 12.2781 11.8185 12.5882 12.0664C12.8983 12.3143 13.3263 12.4382 13.872 12.4382C14.4426 12.4382 14.8829 12.3267 15.193 12.1036C15.5031 11.8805 15.6582 11.5892 15.6582 11.2297C15.6582 10.9571 15.5775 10.734 15.4163 10.5604C15.255 10.3745 14.9511 10.2258 14.5046 10.1142L12.8673 9.74236C12.0611 9.54405 11.4533 9.24037 11.044 8.83134C10.647 8.42231 10.4486 7.86454 10.4486 7.15803C10.4486 6.57548 10.5974 6.07968 10.8951 5.67065C11.2052 5.24923 11.6269 4.92696 12.1603 4.70385C12.6937 4.46835 13.3014 4.3506 13.9837 4.3506C14.6659 4.3506 15.2612 4.47455 15.7698 4.72244C16.2784 4.95795 16.6753 5.29261 16.9606 5.72643C17.2458 6.16025 17.3885 6.67463 17.3885 7.26959H15.4907C15.4783 6.83577 15.3357 6.49491 15.0628 6.24701C14.7899 5.99911 14.4054 5.87517 13.9092 5.87517C13.4255 5.87517 13.0472 5.98672 12.7743 6.20983C12.5014 6.42054 12.365 6.71182 12.365 7.08367C12.365 7.64143 12.7805 8.02567 13.6115 8.23639L15.2488 8.60823C16.0179 8.78176 16.5947 9.06684 16.9792 9.46348C17.3637 9.84772 17.5559 10.3869 17.5559 11.081C17.5559 11.6636 17.3947 12.178 17.0722 12.6242C16.7621 13.0704 16.328 13.4112 15.7698 13.6467C15.2116 13.8822 14.5604 14 13.8162 14C12.7123 14 11.8316 13.7273 11.1742 13.1819C10.5292 12.6366 10.2067 11.9239 10.2067 11.0438Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 20,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M21.3902 13.7583H19.3994V0H21.4088V5.91235C21.6941 5.44135 22.0972 5.0633 22.6181 4.77822C23.1391 4.49314 23.7469 4.3506 24.4415 4.3506C25.5826 4.3506 26.4385 4.69146 27.0091 5.37317C27.5921 6.05489 27.8835 6.97831 27.8835 8.14343V13.7583H25.8927V8.60823C25.8927 8.05046 25.8059 7.59186 25.6323 7.2324C25.4586 6.87295 25.2167 6.60646 24.9066 6.43293C24.6089 6.25941 24.2554 6.17264 23.8461 6.17264C23.3252 6.17264 22.8786 6.29039 22.5065 6.5259C22.1468 6.749 21.8677 7.05888 21.6693 7.45551C21.4832 7.83975 21.3902 8.27977 21.3902 8.77556V13.7583Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 21,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M29.7447 3.94157C29.7447 3.16069 29.9432 2.47897 30.3401 1.89641C30.7494 1.30146 31.3076 0.836653 32.0146 0.501991C32.734 0.16733 33.5589 0 34.4891 0C35.3822 0 36.1575 0.154936 36.8149 0.464807C37.4723 0.774678 37.987 1.22089 38.3591 1.80345C38.7312 2.38601 38.9359 3.07393 38.9731 3.8672H36.8521C36.8149 3.23506 36.5854 2.74546 36.1637 2.39841C35.7419 2.05135 35.1776 1.87782 34.4705 1.87782C33.6767 1.87782 33.0379 2.05755 32.5542 2.417C32.0828 2.77645 31.8471 3.26605 31.8471 3.88579C31.8471 4.39398 31.9898 4.80301 32.2751 5.11288C32.5728 5.42275 33.0193 5.64586 33.6147 5.7822L35.8102 6.2842C36.9389 6.53209 37.7824 6.95972 38.3405 7.56707C38.9111 8.16202 39.1964 8.94909 39.1964 9.92829C39.1964 10.7463 38.9917 11.4653 38.5824 12.085C38.1855 12.6923 37.6211 13.1633 36.8893 13.498C36.1575 13.8327 35.3016 14 34.3217 14C33.3914 14 32.5728 13.8451 31.8657 13.5352C31.1587 13.2129 30.6068 12.7605 30.2098 12.178C29.8129 11.5954 29.6021 10.9137 29.5772 10.1328H31.6797C31.7045 10.7402 31.9526 11.2236 32.4239 11.583C32.8953 11.9301 33.5341 12.1036 34.3403 12.1036C35.1838 12.1036 35.8536 11.9239 36.3497 11.5644C36.8459 11.205 37.0939 10.7216 37.0939 10.1142C37.0939 9.60602 36.9513 9.20319 36.666 8.90571C36.3931 8.59584 35.959 8.37273 35.3636 8.23639L33.1867 7.75299C32.058 7.50509 31.2021 7.06507 30.6192 6.43293C30.0362 5.7884 29.7447 4.95795 29.7447 3.94157Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 22,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M40.145 4.62948H45.6709V6.30279H40.145V4.62948ZM45.6337 12.0106L45.8755 13.6467C45.367 13.8575 44.8212 13.9628 44.2382 13.9628C43.6801 13.9628 43.2025 13.8637 42.8056 13.6653C42.4087 13.4546 42.0986 13.1324 41.8753 12.6985C41.6644 12.2647 41.559 11.7131 41.559 11.0438V1.76627H43.5498V10.7278C43.5498 11.2607 43.6615 11.6388 43.8847 11.8619C44.108 12.0726 44.3871 12.178 44.722 12.178C45.0073 12.178 45.3112 12.1222 45.6337 12.0106Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 23,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M53.7774 4.62948H55.7868V13.7583H53.9449L53.7588 12.4568C53.4983 12.9155 53.089 13.2873 52.5308 13.5724C51.9851 13.8575 51.3897 14 50.7447 14C49.6904 14 48.8717 13.6653 48.2887 12.996C47.7058 12.3267 47.4143 11.4343 47.4143 10.3187V4.61089H49.4237V9.63081C49.4237 10.548 49.6035 11.205 49.9633 11.6016C50.323 11.9982 50.8315 12.1965 51.4889 12.1965C52.2456 12.1965 52.8161 11.9672 53.2006 11.5086C53.5852 11.05 53.7774 10.3559 53.7774 9.4263V4.62948Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 24,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M61.7486 14C60.868 14 60.1052 13.7955 59.4602 13.3865C58.8276 12.9774 58.3376 12.4197 57.9903 11.7131C57.643 10.9942 57.4693 10.1638 57.4693 9.22178C57.4693 8.27977 57.643 7.44312 57.9903 6.71182C58.3376 5.98052 58.84 5.40416 59.4974 4.98274C60.1548 4.56131 60.9424 4.3506 61.8603 4.3506C62.5301 4.3506 63.1317 4.48694 63.665 4.75963C64.2108 5.03231 64.6325 5.42895 64.9302 5.94953V0H66.9396V13.7583H65.0977L64.9674 12.2151C64.6821 12.7853 64.248 13.2253 63.665 13.5352C63.0945 13.8451 62.4557 14 61.7486 14ZM62.1766 12.1594C62.7472 12.1594 63.2309 12.0354 63.6278 11.7875C64.0371 11.5272 64.3534 11.174 64.5767 10.7278C64.8 10.2691 64.9116 9.74856 64.9116 9.166C64.9116 8.57105 64.8 8.05046 64.5767 7.60425C64.3534 7.14564 64.0371 6.79239 63.6278 6.54449C63.2309 6.2842 62.7472 6.15405 62.1766 6.15405C61.6184 6.15405 61.1347 6.2842 60.7253 6.54449C60.3284 6.80478 60.0183 7.15803 59.7951 7.60425C59.5842 8.05046 59.4788 8.57105 59.4788 9.166C59.4788 9.74856 59.5842 10.2691 59.7951 10.7278C60.0183 11.174 60.3284 11.5272 60.7253 11.7875C61.1347 12.0354 61.6184 12.1594 62.1766 12.1594Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 25,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M69.384 13.7583V4.62948H71.3748V13.7583H69.384ZM70.3701 2.62151C70.0228 2.62151 69.7251 2.49756 69.477 2.24967C69.2289 2.00177 69.1049 1.70429 69.1049 1.35724C69.1049 1.01018 69.2289 0.712704 69.477 0.464807C69.7251 0.21691 70.0228 0.0929614 70.3701 0.0929614C70.7174 0.0929614 71.0151 0.21691 71.2631 0.464807C71.5112 0.712704 71.6352 1.01018 71.6352 1.35724C71.6352 1.70429 71.5112 2.00177 71.2631 2.24967C71.0151 2.49756 70.7174 2.62151 70.3701 2.62151Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 26,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        \"fill-rule\": \"evenodd\",\n                                        \"clip-rule\": \"evenodd\",\n                                        d: \"M78.075 13.9266C80.795 13.9266 83 11.7231 83 9.00507C83 6.287 80.795 4.08358 78.075 4.08358C75.3549 4.08358 73.1499 6.287 73.1499 9.00507C73.1499 11.7231 75.3549 13.9266 78.075 13.9266ZM78.075 11.9215C79.6868 11.9215 80.9935 10.6158 80.9935 9.00507C80.9935 7.39436 79.6868 6.08863 78.075 6.08863C76.4631 6.08863 75.1564 7.39436 75.1564 9.00507C75.1564 10.6158 76.4631 11.9215 78.075 11.9215Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 27,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M9.27361 10.5916C8.67472 12.5234 6.87266 13.9266 4.74262 13.9266C2.12335 13.9266 0 11.8047 0 9.18734C0 6.56995 2.12335 4.44813 4.74262 4.44813C6.87266 4.44813 8.67472 5.85132 9.27361 7.78313H7.39553C6.90426 6.8442 5.92029 6.20339 4.78654 6.20339C3.16162 6.20339 1.84436 7.51971 1.84436 9.14346C1.84436 10.7672 3.16162 12.0835 4.78654 12.0835C5.8846 12.0835 6.84217 11.4824 7.34769 10.5916H9.27361Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                        lineNumber: 28,\n                                        columnNumber: 17\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 19,\n                                columnNumber: 11\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 18,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                        lineNumber: 17,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"z-20 flex justify-center items-center w-8 h-8\",\n                        onClick: toggleMenu,\n                        \"aria-label\": \"Toggle menu\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                            width: \"24\",\n                            height: \"24\",\n                            viewBox: \"0 0 24 24\",\n                            fill: \"none\",\n                            xmlns: \"http://www.w3.org/2000/svg\",\n                            className: \"transition-transform duration-300\",\n                            style: {\n                                transform: isMenuOpen ? \"rotate(180deg)\" : \"rotate(0deg)\"\n                            },\n                            children: isMenuOpen ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M6.34325 6.34375L17.657 17.6575M17.6567 6.34375L6.34302 17.6575\",\n                                stroke: \"#1D1D1F\",\n                                strokeWidth: \"1.5\",\n                                strokeLinecap: \"round\",\n                                strokeLinejoin: \"round\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 51,\n                                columnNumber: 17\n                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                d: \"M4 9L20 9M12 15L20 15\",\n                                stroke: \"#1D1D1E\",\n                                strokeWidth: \"1.5\",\n                                strokeLinecap: \"round\",\n                                strokeLinejoin: \"round\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 59,\n                                columnNumber: 17\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 39,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                        lineNumber: 34,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                lineNumber: 15,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed w-screen inset-0 bg-monochrome-100 flex items-center justify-center transition-opacity duration-300 \".concat(isMenuOpen ? \"opacity-100 pointer-events-auto\" : \"opacity-0 pointer-events-none\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                    className: \"flex flex-col items-center font-satoshi font-medium\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"hover:bg-monochrome-200 py-2 px-8 rounded-[5px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                href: \"/\",\n                                className: \"text-monochrome-800 text-body font-satoshi font-medium\",\n                                onClick: toggleMenu,\n                                children: \"Index\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 78,\n                                columnNumber: 75\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 78,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"hover:bg-monochrome-200 py-2 px-8 rounded-[5px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                href: \"/travaux\",\n                                className: \"text-monochrome-800 text-body font-satoshi font-medium\",\n                                onClick: toggleMenu,\n                                children: \"Travaux\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 79,\n                                columnNumber: 75\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 79,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"hover:bg-monochrome-200 py-2 px-8 rounded-[5px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                href: \"/produits\",\n                                className: \"text-monochrome-800 text-body font-satoshi font-medium\",\n                                onClick: toggleMenu,\n                                children: \"Produits\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 80,\n                                columnNumber: 75\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 80,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"hover:bg-monochrome-200 py-2 px-8 rounded-[5px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                href: \"/blog\",\n                                className: \"text-monochrome-800 text-body font-satoshi font-medium\",\n                                onClick: toggleMenu,\n                                children: \"Blog\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 81,\n                                columnNumber: 75\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 81,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            className: \"hover:bg-monochrome-200 py-2 px-8 rounded-[5px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                href: \"/contact\",\n                                className: \"text-monochrome-800 text-body font-satoshi font-medium\",\n                                onClick: toggleMenu,\n                                children: \"Contact\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                                lineNumber: 82,\n                                columnNumber: 75\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                            lineNumber: 82,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                    lineNumber: 77,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n                lineNumber: 72,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/navbarSection.tsx\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, this);\n}\n_s(NavbarSection, \"vK10R+uCyHfZ4DZVnxbYkMWJB8g=\");\n_c = NavbarSection;\nvar _c;\n$RefreshReg$(_c, \"NavbarSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/navbarSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/newsSection.tsx":
/*!****************************************!*\
  !*** ./src/components/newsSection.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ NewsSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nfunction NewsSection() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"w-full px-4 md:px-6 lg:px-8 py-8 md:py-12 bg-monochrome-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-[1680px] mx-auto\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center gap-2 mb-4 transition-opacity duration-300\",\n                    id: \"scrollIndicator\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-2 h-4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                viewBox: \"0 0 8 15\",\n                                fill: \"none\",\n                                xmlns: \"http://www.w3.org/2000/svg\",\n                                className: \"w-full h-full\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    d: \"M3.64645 14.3536C3.84171 14.5488 4.15829 14.5488 4.35355 14.3536L7.53553 11.1716C7.7308 10.9763 7.7308 10.6597 7.53553 10.4645C7.34027 10.2692 7.02369 10.2692 6.82843 10.4645L4 13.2929L1.17157 10.4645C0.97631 10.2692 0.659728 10.2692 0.464466 10.4645C0.269203 10.6597 0.269203 10.9763 0.464466 11.1716L3.64645 14.3536ZM3.5 -2.18557e-08L3.5 14L4.5 14L4.5 2.18557e-08L3.5 -2.18557e-08Z\",\n                                    fill: \"#1D1D1F\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                    lineNumber: 11,\n                                    columnNumber: 29\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                lineNumber: 10,\n                                columnNumber: 25\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                            lineNumber: 9,\n                            columnNumber: 21\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-monochrome-800 text-subbody font-medium font-satoshi\",\n                            children: \"scroll to explore\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                            lineNumber: 14,\n                            columnNumber: 21\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                    lineNumber: 8,\n                    columnNumber: 17\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"script\", {\n                    dangerouslySetInnerHTML: {\n                        __html: \"\\n                    document.addEventListener('scroll', function() {\\n                        const indicator = document.getElementById('scrollIndicator');\\n                        if (window.scrollY > 100) {\\n                            indicator.classList.add('opacity-0');\\n                            setTimeout(() => {\\n                                indicator.classList.add('invisible');\\n                            }, 300);\\n                        } else {\\n                            indicator.classList.remove('invisible');\\n                            setTimeout(() => {\\n                                indicator.classList.remove('opacity-0');\\n                            }, 10);\\n                        }\\n                    });\\n                \"\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                    lineNumber: 16,\n                    columnNumber: 17\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col md:flex-row gap-6 relative\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-3/4\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"sticky top-[64px]\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"aspect-video w-full bg-monochrome-800 rounded-[5px] mb-4\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                        lineNumber: 36,\n                                        columnNumber: 29\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-subtitle md:text-title font-medium font-satoshi text-monochrome-800\",\n                                                children: \"Titre du projet\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                lineNumber: 38,\n                                                columnNumber: 33\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                children: \"/cat\\xe9gorie\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                lineNumber: 39,\n                                                columnNumber: 33\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                        lineNumber: 37,\n                                        columnNumber: 29\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                lineNumber: 35,\n                                columnNumber: 25\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                            lineNumber: 34,\n                            columnNumber: 21\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-1/4 flex flex-col gap-6\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-shrink-0\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"aspect-square w-full bg-monochrome-800 rounded-[5px] mb-4\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 47,\n                                            columnNumber: 33\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-subtitle md:text-title font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"Blablou du projet\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 49,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"/cat\\xe9gorie\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 50,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 48,\n                                            columnNumber: 33\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                    lineNumber: 46,\n                                    columnNumber: 29\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-shrink-0\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"aspect-square w-full bg-monochrome-800 rounded-[5px] mb-4\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 54,\n                                            columnNumber: 33\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-subtitle md:text-title font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"Blablou du projet\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 56,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"/cat\\xe9gorie\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 57,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 55,\n                                            columnNumber: 33\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                    lineNumber: 53,\n                                    columnNumber: 29\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-shrink-0\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"aspect-square w-full bg-monochrome-800 rounded-[5px] mb-4\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 61,\n                                            columnNumber: 33\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-subtitle md:text-title font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"Blablou du projet\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 63,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                    children: \"/cat\\xe9gorie\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                                    lineNumber: 64,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                            lineNumber: 62,\n                                            columnNumber: 33\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                                    lineNumber: 60,\n                                    columnNumber: 29\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                            lineNumber: 44,\n                            columnNumber: 21\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n                    lineNumber: 33,\n                    columnNumber: 17\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n            lineNumber: 7,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/newsSection.tsx\",\n        lineNumber: 6,\n        columnNumber: 9\n    }, this);\n}\n_c = NewsSection;\nvar _c;\n$RefreshReg$(_c, \"NewsSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/newsSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/projectSection.tsx":
/*!*******************************************!*\
  !*** ./src/components/projectSection.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ProjectSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction ProjectSection() {\n    _s();\n    const scrollRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const projects = [\n        {\n            imageLink: \"/projects/1.jpg\",\n            name: \"Titre du projet\",\n            category: \"cat\\xe9gorie\",\n            width: 315,\n            height: 323\n        },\n        {\n            imageLink: \"/projects/2.jpg\",\n            name: \"Titre du projet\",\n            category: \"cat\\xe9gorie\",\n            width: 350,\n            height: 463\n        },\n        {\n            imageLink: \"/projects/3.jpg\",\n            name: \"Titre du projet\",\n            category: \"cat\\xe9gorie\",\n            width: 366,\n            height: 177\n        },\n        {\n            imageLink: \"/projects/4.jpg\",\n            name: \"Titre du projet\",\n            category: \"cat\\xe9gorie\",\n            width: 561,\n            height: 297\n        },\n        {\n            imageLink: \"/projects/5.jpg\",\n            name: \"Titre du projet\",\n            category: \"cat\\xe9gorie\",\n            width: 264,\n            height: 416\n        }\n    ];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const scrollContainer = scrollRef.current;\n        if (!scrollContainer) return;\n        let animationFrameId;\n        let scrollPosition = 0;\n        const scrollSpeed = 0.5; // Pixels per frame\n        const scroll = ()=>{\n            scrollPosition += scrollSpeed;\n            // Reset scroll position when reaching the first set of projects\n            if (scrollPosition >= scrollContainer.scrollWidth / 2) {\n                scrollPosition = 0;\n            }\n            scrollContainer.scrollLeft = scrollPosition;\n            animationFrameId = requestAnimationFrame(scroll);\n        };\n        // Start scrolling animation\n        animationFrameId = requestAnimationFrame(scroll);\n        // Pause on hover\n        const handleMouseEnter = ()=>cancelAnimationFrame(animationFrameId);\n        const handleMouseLeave = ()=>{\n            scrollPosition = scrollContainer.scrollLeft;\n            animationFrameId = requestAnimationFrame(scroll);\n        };\n        scrollContainer.addEventListener(\"mouseenter\", handleMouseEnter);\n        scrollContainer.addEventListener(\"mouseleave\", handleMouseLeave);\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n            scrollContainer.removeEventListener(\"mouseenter\", handleMouseEnter);\n            scrollContainer.removeEventListener(\"mouseleave\", handleMouseLeave);\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"w-full bg-monochrome-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-[1680px] mx-auto py-32\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex justify-between items-end mb-8 px-4 md:px-6 lg:px-8\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-title font-medium font-satoshi text-monochrome-800\",\n                            children: \"/Projets\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                            lineNumber: 67,\n                            columnNumber: 21\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            href: \"/travaux\",\n                            className: \"flex items-center gap-2 group cursor-pointer\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                    children: \"explorer tous les projets\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                    lineNumber: 69,\n                                    columnNumber: 25\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                    width: \"15\",\n                                    height: \"8\",\n                                    viewBox: \"0 0 15 8\",\n                                    fill: \"none\",\n                                    xmlns: \"http://www.w3.org/2000/svg\",\n                                    className: \"transform transition-transform group-hover:translate-x-1\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        d: \"M14.3536 4.35355C14.5488 4.15829 14.5488 3.84171 14.3536 3.64645L11.1716 0.464466C10.9763 0.269204 10.6597 0.269204 10.4645 0.464466C10.2692 0.659728 10.2692 0.976311 10.4645 1.17157L13.2929 4L10.4645 6.82843C10.2692 7.02369 10.2692 7.34027 10.4645 7.53553C10.6597 7.7308 10.9763 7.7308 11.1716 7.53553L14.3536 4.35355ZM0 4.5L14 4.5V3.5L0 3.5L0 4.5Z\",\n                                        fill: \"#1D1D1F\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                        lineNumber: 72,\n                                        columnNumber: 29\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                    lineNumber: 70,\n                                    columnNumber: 25\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                            lineNumber: 68,\n                            columnNumber: 21\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                    lineNumber: 66,\n                    columnNumber: 17\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"overflow-x-auto scrollbar-hide\",\n                    ref: scrollRef,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"inline-flex gap-4 px-4 md:px-6 lg:px-8 min-w-full\",\n                        children: [\n                            projects.map((project, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-none group\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative mb-4 overflow-hidden transition-all duration-500 ease-out shadow-none hover:shadow-[0_15px_45px_rgb(0,0,0,0.2)] transform hover:scale-[1.02]\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    width: project.width,\n                                                    height: project.height,\n                                                    background: \"#1D1D1F\",\n                                                    borderRadius: \"5px\"\n                                                },\n                                                className: \"transition-opacity duration-300\",\n                                                children: project.imageLink && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                    src: project.imageLink,\n                                                    alt: project.name,\n                                                    className: \"w-full h-full object-cover opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 91,\n                                                    columnNumber: 45\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                lineNumber: 84,\n                                                columnNumber: 37\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                            lineNumber: 83,\n                                            columnNumber: 33\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-y-1\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-xl font-medium font-satoshi text-monochrome-800\",\n                                                    children: project.name\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 100,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                    children: [\n                                                        \"/\",\n                                                        project.category\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 101,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                            lineNumber: 99,\n                                            columnNumber: 33\n                                        }, this)\n                                    ]\n                                }, index, true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                    lineNumber: 82,\n                                    columnNumber: 29\n                                }, this)),\n                            projects.map((project, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex-none group\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"relative mb-4 overflow-hidden transition-all duration-500 ease-out shadow-none hover:shadow-[0_15px_45px_rgb(0,0,0,0.2)] transform hover:scale-[1.02]\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                style: {\n                                                    width: project.width,\n                                                    height: project.height,\n                                                    background: \"#1D1D1F\",\n                                                    borderRadius: \"5px\"\n                                                },\n                                                className: \"transition-opacity duration-300\",\n                                                children: project.imageLink && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                    src: project.imageLink,\n                                                    alt: project.name,\n                                                    className: \"w-full h-full object-cover opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 116,\n                                                    columnNumber: 45\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                lineNumber: 109,\n                                                columnNumber: 37\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                            lineNumber: 108,\n                                            columnNumber: 33\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"space-y-1\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-xl font-medium font-satoshi text-monochrome-800\",\n                                                    children: project.name\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 125,\n                                                    columnNumber: 37\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-subbody font-medium font-satoshi text-monochrome-800\",\n                                                    children: [\n                                                        \"/\",\n                                                        project.category\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                                    lineNumber: 126,\n                                                    columnNumber: 37\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                            lineNumber: 124,\n                                            columnNumber: 33\n                                        }, this)\n                                    ]\n                                }, \"duplicate-\".concat(index), true, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                                    lineNumber: 107,\n                                    columnNumber: 29\n                                }, this))\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                        lineNumber: 79,\n                        columnNumber: 21\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n                    lineNumber: 78,\n                    columnNumber: 17\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n            lineNumber: 65,\n            columnNumber: 13\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/projectSection.tsx\",\n        lineNumber: 64,\n        columnNumber: 9\n    }, this);\n}\n_s(ProjectSection, \"P14GFulhWAl/Oec4Pk4QeBwKyr0=\");\n_c = ProjectSection;\nvar _c;\n$RefreshReg$(_c, \"ProjectSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/projectSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/skillsSection.tsx":
/*!******************************************!*\
  !*** ./src/components/skillsSection.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _Animations_FallingText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Animations/FallingText */ \"(app-pages-browser)/./src/Animations/FallingText.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction Home() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"w-full min-h-screen bg-[#1D1D1F] flex items-center justify-center\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"relative w-full h-[100px] px-8\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_FallingText__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                text: \"React Bits is a library of animated and interactive React components designed to streamline UI development and simplify your workflow.\",\n                highlightWords: [\n                    \"React\",\n                    \"Bits\",\n                    \"animated\",\n                    \"components\"\n                ],\n                trigger: \"hover\",\n                backgroundColor: \"#1D1D1F\",\n                wireframes: false,\n                gravity: 0.2,\n                fontSize: \"1.75rem\",\n                mouseConstraintStiffness: 0.3\n            }, void 0, false, {\n                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/skillsSection.tsx\",\n                lineNumber: 10,\n                columnNumber: 11\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/skillsSection.tsx\",\n            lineNumber: 9,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/skillsSection.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL3NraWxsc1NlY3Rpb24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFbUQ7QUFHcEMsU0FBU0M7SUFDdEIscUJBQ0UsOERBQUNDO1FBQVFDLFdBQVU7a0JBQ2YsNEVBQUNDO1lBQUlELFdBQVU7c0JBQ2IsNEVBQUNILCtEQUFXQTtnQkFDVkssTUFBSztnQkFDTEMsZ0JBQWdCO29CQUFDO29CQUFTO29CQUFRO29CQUFZO2lCQUFhO2dCQUMzREMsU0FBUTtnQkFDUkMsaUJBQWdCO2dCQUNoQkMsWUFBWTtnQkFDWkMsU0FBUztnQkFDVEMsVUFBUztnQkFDVEMsMEJBQTBCOzs7Ozs7Ozs7Ozs7Ozs7O0FBS3RDO0tBakJ3QlgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvc2tpbGxzU2VjdGlvbi50c3g/NTI2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IEZhbGxpbmdUZXh0IGZyb20gJ0AvQW5pbWF0aW9ucy9GYWxsaW5nVGV4dCc7XG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZSgpIHtcbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJ3LWZ1bGwgbWluLWgtc2NyZWVuIGJnLVsjMUQxRDFGXSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHctZnVsbCBoLVsxMDBweF0gcHgtOFwiPlxuICAgICAgICAgIDxGYWxsaW5nVGV4dFxuICAgICAgICAgICAgdGV4dD1cIlJlYWN0IEJpdHMgaXMgYSBsaWJyYXJ5IG9mIGFuaW1hdGVkIGFuZCBpbnRlcmFjdGl2ZSBSZWFjdCBjb21wb25lbnRzIGRlc2lnbmVkIHRvIHN0cmVhbWxpbmUgVUkgZGV2ZWxvcG1lbnQgYW5kIHNpbXBsaWZ5IHlvdXIgd29ya2Zsb3cuXCJcbiAgICAgICAgICAgIGhpZ2hsaWdodFdvcmRzPXtbXCJSZWFjdFwiLCBcIkJpdHNcIiwgXCJhbmltYXRlZFwiLCBcImNvbXBvbmVudHNcIl19XG4gICAgICAgICAgICB0cmlnZ2VyPVwiaG92ZXJcIlxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yPVwiIzFEMUQxRlwiXG4gICAgICAgICAgICB3aXJlZnJhbWVzPXtmYWxzZX1cbiAgICAgICAgICAgIGdyYXZpdHk9ezAuMn1cbiAgICAgICAgICAgIGZvbnRTaXplPVwiMS43NXJlbVwiXG4gICAgICAgICAgICBtb3VzZUNvbnN0cmFpbnRTdGlmZm5lc3M9ezAuM31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59ICJdLCJuYW1lcyI6WyJGYWxsaW5nVGV4dCIsIkhvbWUiLCJzZWN0aW9uIiwiY2xhc3NOYW1lIiwiZGl2IiwidGV4dCIsImhpZ2hsaWdodFdvcmRzIiwidHJpZ2dlciIsImJhY2tncm91bmRDb2xvciIsIndpcmVmcmFtZXMiLCJncmF2aXR5IiwiZm9udFNpemUiLCJtb3VzZUNvbnN0cmFpbnRTdGlmZm5lc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/skillsSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/valeursSection.tsx":
/*!*******************************************!*\
  !*** ./src/components/valeursSection.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ValeursSection; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/Animations/AnimatedContent */ \"(app-pages-browser)/./src/Animations/AnimatedContent.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nfunction ValeursSection() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full bg-monochrome-100\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-[1680px] gap-[64px] mx-auto flex flex-col px-4 md:px-6 lg:px-8 py-8 md:py-12\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col w-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-subtitle md:text-title font-medium font-satoshi leading-[48px] text-monochrome-800\",\n                                children: \"Form that follow fonction\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 12,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 11,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-subtitle md:text-title font-medium font-satoshi leading-[48px] text-monochrome-800\",\n                                children: \"Flowless experiences\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 17,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 16,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-subtitle md:text-title font-medium font-satoshi leading-[48px] text-monochrome-800\",\n                                children: \"Attention to details\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 22,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 21,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-subtitle md:text-title font-medium font-satoshi leading-[48px] text-monochrome-800\",\n                                children: \"Visual efficency\"\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 27,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 26,\n                            columnNumber: 17\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                    lineNumber: 10,\n                    columnNumber: 13\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex md:gap-[64px] w-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 34,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 35,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-1/3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-body font-medium font-satoshi text-monochrome-800\",\n                                    children: \"Le design n'existe pas simplement pour \\xeatre esth\\xe9tique, il doit avant tout servir une fonction. Chaque choix visuel d\\xe9coule d'un besoin pr\\xe9cis et d'une logique d'usage. Une interface, une identit\\xe9 visuelle ou un support graphique doivent \\xeatre con\\xe7us pour maximiser leur efficacit\\xe9 tout en restant \\xe9l\\xe9gants et intuitifs. Cette approche garantit des cr\\xe9ations qui ne sont jamais superficielles, mais toujours pertinentes et strat\\xe9giques. Il s'agit de mon premier pilier de raisonnement.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                    lineNumber: 38,\n                                    columnNumber: 25\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 37,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 36,\n                            columnNumber: 17\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                    lineNumber: 33,\n                    columnNumber: 13\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex md:gap-[64px] w-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 46,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-1/3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-body font-medium font-satoshi text-monochrome-800\",\n                                    children: \"Une bonne exp\\xe9rience utilisateur est invisible : elle se ressent sans jamais perturber. Tout doit \\xeatre fluide, logique et agr\\xe9able, sans friction. Du parcours utilisateur \\xe0 l'ergonomie des interfaces, chaque d\\xe9tail est pens\\xe9 pour que l'interaction soit naturelle et immersive. Un bon design ne se limite pas \\xe0 l'esth\\xe9tique, il accompagne et facilite l'exp\\xe9rience de l'utilisateur \\xe0 chaque \\xe9tape. Il s'agit de mon second pilier de raisonnement.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                    lineNumber: 49,\n                                    columnNumber: 25\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 48,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 47,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 54,\n                            columnNumber: 17\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                    lineNumber: 45,\n                    columnNumber: 13\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex md:gap-[64px] w-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 58,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 59,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-1/3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-body font-medium font-satoshi text-monochrome-800\",\n                                    children: \"Les d\\xe9tails font la diff\\xe9rence. Une typographie ajust\\xe9e au pixel pr\\xe8s, un espacement \\xe9quilibr\\xe9, une micro-interaction subtile : ces \\xe9l\\xe9ments souvent imperceptibles pris individuellement cr\\xe9ent ensemble une impression d'excellence consciente et subliminale. Prendre le temps d'affiner chaque composant, c'est garantir une exp\\xe9rience coh\\xe9rente et aboutie. C'est dans cette rigueur que r\\xe9side la signature d'un design de qualit\\xe9. Il s'agit de mon troisi\\xe8me pilier de raisonnement.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                    lineNumber: 62,\n                                    columnNumber: 25\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 61,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 60,\n                            columnNumber: 17\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                    lineNumber: 57,\n                    columnNumber: 13\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex md:gap-[64px] w-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 70,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-full md:w-1/3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Animations_AnimatedContent__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-body font-medium font-satoshi text-monochrome-800\",\n                                    children: \"Un design doit transmettre son message avec clart\\xe9 et impact. La simplicit\\xe9 est une force lorsqu'elle est ma\\xeetris\\xe9e. En \\xe9liminant le superflu et en privil\\xe9giant des compositions \\xe9quilibr\\xe9es, des contrastes efficaces et une hi\\xe9rarchie visuelle limpide, chaque cr\\xe9ation devient un outil puissant de communication. L'objectif est d'allier minimalisme et expressivit\\xe9 pour captiver sans jamais surcharger. Il s'agit de mon quatri\\xe8me pilier de raisonnement.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                    lineNumber: 73,\n                                    columnNumber: 25\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                                lineNumber: 72,\n                                columnNumber: 21\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 71,\n                            columnNumber: 17\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"w-0 md:w-1/3\"\n                        }, void 0, false, {\n                            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                            lineNumber: 78,\n                            columnNumber: 17\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n                    lineNumber: 69,\n                    columnNumber: 13\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n            lineNumber: 8,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/csh/Projet/cshStudio/cshStudio/src/components/valeursSection.tsx\",\n        lineNumber: 7,\n        columnNumber: 8\n    }, this);\n}\n_c = ValeursSection;\nvar _c;\n$RefreshReg$(_c, \"ValeursSection\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/valeursSection.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animated: function() { return /* binding */ Animated; },\n/* harmony export */   AnimatedArray: function() { return /* binding */ AnimatedArray; },\n/* harmony export */   AnimatedObject: function() { return /* binding */ AnimatedObject; },\n/* harmony export */   AnimatedString: function() { return /* binding */ AnimatedString; },\n/* harmony export */   AnimatedValue: function() { return /* binding */ AnimatedValue; },\n/* harmony export */   createHost: function() { return /* binding */ createHost; },\n/* harmony export */   getAnimated: function() { return /* binding */ getAnimated; },\n/* harmony export */   getAnimatedType: function() { return /* binding */ getAnimatedType; },\n/* harmony export */   getPayload: function() { return /* binding */ getPayload; },\n/* harmony export */   isAnimated: function() { return /* binding */ isAnimated; },\n/* harmony export */   setAnimated: function() { return /* binding */ setAnimated; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// src/Animated.ts\n\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = (value)=>!!value && value[$node] === value;\nvar getAnimated = (owner)=>owner && owner[$node];\nvar setAnimated = (owner, node)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.defineHidden)(owner, $node, node);\nvar getPayload = (owner)=>owner && owner[$node] && owner[$node].getPayload();\nvar Animated = class {\n    /** Get every `AnimatedValue` used by this node. */ getPayload() {\n        return this.payload || [];\n    }\n    constructor(){\n        setAnimated(this, this);\n    }\n};\n// src/AnimatedValue.ts\n\nvar AnimatedValue = class extends Animated {\n    /** @internal */ static create(value) {\n        return new AnimatedValue(value);\n    }\n    getPayload() {\n        return [\n            this\n        ];\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value, step) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(value)) {\n            this.lastPosition = value;\n            if (step) {\n                value = Math.round(value / step) * step;\n                if (this.done) {\n                    this.lastPosition = value;\n                }\n            }\n        }\n        if (this._value === value) {\n            return false;\n        }\n        this._value = value;\n        return true;\n    }\n    reset() {\n        const { done } = this;\n        this.done = false;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.elapsedTime = 0;\n            this.durationProgress = 0;\n            this.lastPosition = this._value;\n            if (done) this.lastVelocity = null;\n            this.v0 = null;\n        }\n    }\n    constructor(_value){\n        super();\n        this._value = _value;\n        this.done = true;\n        this.durationProgress = 0;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.lastPosition = this._value;\n        }\n    }\n};\n// src/AnimatedString.ts\n\nvar AnimatedString = class extends AnimatedValue {\n    /** @internal */ static create(value) {\n        return new AnimatedString(value);\n    }\n    getValue() {\n        const value = this._string;\n        return value == null ? this._string = this._toString(this._value) : value;\n    }\n    setValue(value) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(value)) {\n            if (value == this._string) {\n                return false;\n            }\n            this._string = value;\n            this._value = 1;\n        } else if (super.setValue(value)) {\n            this._string = null;\n        } else {\n            return false;\n        }\n        return true;\n    }\n    reset(goal) {\n        if (goal) {\n            this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n                output: [\n                    this.getValue(),\n                    goal\n                ]\n            });\n        }\n        this._value = 0;\n        super.reset();\n    }\n    constructor(value){\n        super(0);\n        this._string = null;\n        this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n            output: [\n                value,\n                value\n            ]\n        });\n    }\n};\n// src/AnimatedArray.ts\n\n// src/AnimatedObject.ts\n\n// src/context.ts\nvar TreeContext = {\n    dependencies: null\n};\n// src/AnimatedObject.ts\nvar AnimatedObject = class extends Animated {\n    getValue(animated) {\n        const values = {};\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.source, (source, key)=>{\n            if (isAnimated(source)) {\n                values[key] = source.getValue(animated);\n            } else if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                values[key] = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(source);\n            } else if (!animated) {\n                values[key] = source;\n            }\n        });\n        return values;\n    }\n    /** Replace the raw object data */ setValue(source) {\n        this.source = source;\n        this.payload = this._makePayload(source);\n    }\n    reset() {\n        if (this.payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(this.payload, (node)=>node.reset());\n        }\n    }\n    /** Create a payload set. */ _makePayload(source) {\n        if (source) {\n            const payload = /* @__PURE__ */ new Set();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(source, this._addToPayload, payload);\n            return Array.from(payload);\n        }\n    }\n    /** Add to a payload set. */ _addToPayload(source) {\n        if (TreeContext.dependencies && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n            TreeContext.dependencies.add(source);\n        }\n        const payload = getPayload(source);\n        if (payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(payload, (node)=>this.add(node));\n        }\n    }\n    constructor(source){\n        super();\n        this.source = source;\n        this.setValue(source);\n    }\n};\n// src/AnimatedArray.ts\nvar AnimatedArray = class extends AnimatedObject {\n    /** @internal */ static create(source) {\n        return new AnimatedArray(source);\n    }\n    getValue() {\n        return this.source.map((node)=>node.getValue());\n    }\n    setValue(source) {\n        const payload = this.getPayload();\n        if (source.length == payload.length) {\n            return payload.map((node, i)=>node.setValue(source[i])).some(Boolean);\n        }\n        super.setValue(source.map(makeAnimated));\n        return true;\n    }\n    constructor(source){\n        super(source);\n    }\n};\nfunction makeAnimated(value) {\n    const nodeType = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n    return nodeType.create(value);\n}\n// src/getAnimatedType.ts\n\nfunction getAnimatedType(value) {\n    const parentNode = getAnimated(value);\n    return parentNode ? parentNode.constructor : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? AnimatedArray : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n}\n// src/createHost.ts\n\n// src/withAnimated.tsx\n\n\n\nvar withAnimated = (Component, host)=>{\n    var _s = $RefreshSig$();\n    const hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s((givenProps, givenRef)=>{\n        _s();\n        const instanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((value)=>{\n            instanceRef.current = updateRef(givenRef, value);\n        }, [\n            givenRef\n        ]);\n        const [props, deps] = getAnimatedState(givenProps, host);\n        const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n        const callback = ()=>{\n            const instance = instanceRef.current;\n            if (hasInstance && !instance) {\n                return;\n            }\n            const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n            if (didUpdate === false) {\n                forceUpdate();\n            }\n        };\n        const observer = new PropsObserver(callback, deps);\n        const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n            observerRef.current = observer;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(dep, observer));\n            return ()=>{\n                if (observerRef.current) {\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observerRef.current.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observerRef.current));\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(observerRef.current.update);\n                }\n            };\n        });\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(callback, []);\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n                const observer2 = observerRef.current;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observer2.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observer2));\n            });\n        const usedProps = host.getComponentProps(props.getValue());\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, {\n            ...usedProps,\n            ref\n        });\n    }, \"Ap8f+txA57fFyfyEQgJjd7YWyo8=\", false, function() {\n        return [\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n        ];\n    }));\n};\nvar PropsObserver = class {\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.write(this.update);\n        }\n    }\n    constructor(update, deps){\n        this.update = update;\n        this.deps = deps;\n    }\n};\nfunction getAnimatedState(props, host) {\n    const dependencies = /* @__PURE__ */ new Set();\n    TreeContext.dependencies = dependencies;\n    if (props.style) props = {\n        ...props,\n        style: host.createAnimatedStyle(props.style)\n    };\n    props = new AnimatedObject(props);\n    TreeContext.dependencies = null;\n    return [\n        props,\n        dependencies\n    ];\n}\nfunction updateRef(ref, value) {\n    if (ref) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(ref)) ref(value);\n        else ref.current = value;\n    }\n    return value;\n}\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function(components) {\n    let { applyAnimatedValues = ()=>false, createAnimatedStyle = (style)=>new AnimatedObject(style), getComponentProps = (props)=>props } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const hostConfig = {\n        applyAnimatedValues,\n        createAnimatedStyle,\n        getComponentProps\n    };\n    const animated = (Component)=>{\n        const displayName = getDisplayName(Component) || \"Anonymous\";\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(Component)) {\n            Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n        } else {\n            Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n        }\n        Component.displayName = \"Animated(\".concat(displayName, \")\");\n        return Component;\n    };\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(components, (Component, key)=>{\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(components)) {\n            key = getDisplayName(Component);\n        }\n        animated[key] = animated(Component);\n    });\n    return {\n        animated\n    };\n};\nvar getDisplayName = (arg)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg) ? arg : arg && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg.displayName) ? arg.displayName : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) && arg.name || null;\n //# sourceMappingURL=react-spring_animated.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_types__WEBPACK_IMPORTED_MODULE_3__.Any; },\n/* harmony export */   BailSignal: function() { return /* binding */ BailSignal; },\n/* harmony export */   Controller: function() { return /* binding */ Controller; },\n/* harmony export */   FrameValue: function() { return /* binding */ FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* binding */ Interpolation; },\n/* harmony export */   Spring: function() { return /* binding */ Spring; },\n/* harmony export */   SpringContext: function() { return /* binding */ SpringContext; },\n/* harmony export */   SpringRef: function() { return /* binding */ SpringRef; },\n/* harmony export */   SpringValue: function() { return /* binding */ SpringValue; },\n/* harmony export */   Trail: function() { return /* binding */ Trail; },\n/* harmony export */   Transition: function() { return /* binding */ Transition; },\n/* harmony export */   config: function() { return /* binding */ config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* binding */ inferTo; },\n/* harmony export */   interpolate: function() { return /* binding */ interpolate; },\n/* harmony export */   to: function() { return /* binding */ to; },\n/* harmony export */   update: function() { return /* binding */ update; },\n/* harmony export */   useChain: function() { return /* binding */ useChain; },\n/* harmony export */   useInView: function() { return /* binding */ useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* binding */ useResize; },\n/* harmony export */   useScroll: function() { return /* binding */ useScroll; },\n/* harmony export */   useSpring: function() { return /* binding */ useSpring; },\n/* harmony export */   useSpringRef: function() { return /* binding */ useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* binding */ useSpringValue; },\n/* harmony export */   useSprings: function() { return /* binding */ useSprings; },\n/* harmony export */   useTrail: function() { return /* binding */ useTrail; },\n/* harmony export */   useTransition: function() { return /* binding */ useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n/* harmony import */ var _react_spring_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/types */ \"(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\");\n// src/hooks/useChain.ts\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$();\n\n// src/helpers.ts\n\nfunction callProp(value) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(...args) : value;\n}\nvar matchProp = (value, key)=>value === true || !!(key && value && (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(key) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(value).includes(key)));\nvar resolveProp = (prop, key)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(prop) ? key && prop[key] : prop;\nvar getDefaultProp = (props, key)=>props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nvar noopTransform = (value)=>value;\nvar getDefaultProps = function(props) {\n    let transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noopTransform;\n    let keys = DEFAULT_PROPS;\n    if (props.default && props.default !== true) {\n        props = props.default;\n        keys = Object.keys(props);\n    }\n    const defaults2 = {};\n    for (const key of keys){\n        const value = transform(props[key], key);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            defaults2[key] = value;\n        }\n    }\n    return defaults2;\n};\nvar DEFAULT_PROPS = [\n    \"config\",\n    \"onProps\",\n    \"onStart\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\",\n    \"onRest\"\n];\nvar RESERVED_PROPS = {\n    config: 1,\n    from: 1,\n    to: 1,\n    ref: 1,\n    loop: 1,\n    reset: 1,\n    pause: 1,\n    cancel: 1,\n    reverse: 1,\n    immediate: 1,\n    default: 1,\n    delay: 1,\n    onProps: 1,\n    onStart: 1,\n    onChange: 1,\n    onPause: 1,\n    onResume: 1,\n    onRest: 1,\n    onResolve: 1,\n    // Transition props\n    items: 1,\n    trail: 1,\n    sort: 1,\n    expires: 1,\n    initial: 1,\n    enter: 1,\n    update: 1,\n    leave: 1,\n    children: 1,\n    onDestroyed: 1,\n    // Internal props\n    keys: 1,\n    callId: 1,\n    parentId: 1\n};\nfunction getForwardProps(props) {\n    const forward = {};\n    let count = 0;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (value, prop)=>{\n        if (!RESERVED_PROPS[prop]) {\n            forward[prop] = value;\n            count++;\n        }\n    });\n    if (count) {\n        return forward;\n    }\n}\nfunction inferTo(props) {\n    const to2 = getForwardProps(props);\n    if (to2) {\n        const out = {\n            to: to2\n        };\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (val, key)=>key in to2 || (out[key] = val));\n        return out;\n    }\n    return {\n        ...props\n    };\n}\nfunction computeGoal(value) {\n    value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(value);\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? value.map(computeGoal) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.createStringInterpolator({\n        range: [\n            0,\n            1\n        ],\n        output: [\n            value,\n            value\n        ]\n    })(1) : value;\n}\nfunction hasProps(props) {\n    for(const _ in props)return true;\n    return false;\n}\nfunction isAsyncTo(to2) {\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2[0]);\n}\nfunction detachRefs(ctrl, ref) {\n    var _ctrl_ref;\n    (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n    ref === null || ref === void 0 ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n    if (ref && ctrl.ref !== ref) {\n        var _ctrl_ref;\n        (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n        ref.add(ctrl);\n        ctrl.ref = ref;\n    }\n}\n// src/hooks/useChain.ts\nfunction useChain(refs, timeSteps) {\n    let timeFrame = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;\n    _s();\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (timeSteps) {\n            let prevDelay = 0;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref, i)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    let delay = timeFrame * timeSteps[i];\n                    if (isNaN(delay)) delay = prevDelay;\n                    else prevDelay = delay;\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl)=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrl.queue, (props)=>{\n                            const memoizedDelayProp = props.delay;\n                            props.delay = (key)=>delay + callProp(memoizedDelayProp || 0, key);\n                        });\n                    });\n                    ref.start();\n                }\n            });\n        } else {\n            let p = Promise.resolve();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    const queues = controllers.map((ctrl)=>{\n                        const q = ctrl.queue;\n                        ctrl.queue = [];\n                        return q;\n                    });\n                    p = p.then(()=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl, i)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queues[i] || [], (update2)=>ctrl.queue.push(update2)));\n                        return Promise.all(ref.start());\n                    });\n                }\n            });\n        }\n    });\n}\n_s(useChain, \"Vd+jpwighRca2oU8HoLqd+zm4Bo=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useSpring.ts\n\n// src/hooks/useSprings.ts\n\n\n// src/SpringValue.ts\n\n\n// src/AnimationConfig.ts\n\n// src/constants.ts\nvar config = {\n    default: {\n        tension: 170,\n        friction: 26\n    },\n    gentle: {\n        tension: 120,\n        friction: 14\n    },\n    wobbly: {\n        tension: 180,\n        friction: 12\n    },\n    stiff: {\n        tension: 210,\n        friction: 20\n    },\n    slow: {\n        tension: 280,\n        friction: 60\n    },\n    molasses: {\n        tension: 280,\n        friction: 120\n    }\n};\n// src/AnimationConfig.ts\nvar defaults = {\n    ...config.default,\n    mass: 1,\n    damping: 1,\n    easing: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings.linear,\n    clamp: false\n};\nvar AnimationConfig = class {\n    constructor(){\n        /**\n     * The initial velocity of one or more values.\n     *\n     * @default 0\n     */ this.velocity = 0;\n        Object.assign(this, defaults);\n    }\n};\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n    if (defaultConfig) {\n        defaultConfig = {\n            ...defaultConfig\n        };\n        sanitizeConfig(defaultConfig, newConfig);\n        newConfig = {\n            ...defaultConfig,\n            ...newConfig\n        };\n    }\n    sanitizeConfig(config2, newConfig);\n    Object.assign(config2, newConfig);\n    for(const key in defaults){\n        if (config2[key] == null) {\n            config2[key] = defaults[key];\n        }\n    }\n    let { frequency, damping } = config2;\n    const { mass } = config2;\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(frequency)) {\n        if (frequency < 0.01) frequency = 0.01;\n        if (damping < 0) damping = 0;\n        config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n        config2.friction = 4 * Math.PI * damping * mass / frequency;\n    }\n    return config2;\n}\nfunction sanitizeConfig(config2, props) {\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.decay)) {\n        config2.duration = void 0;\n    } else {\n        const isTensionConfig = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.tension) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.friction);\n        if (isTensionConfig || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.frequency) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.damping) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.mass)) {\n            config2.duration = void 0;\n            config2.decay = void 0;\n        }\n        if (isTensionConfig) {\n            config2.frequency = void 0;\n        }\n    }\n}\n// src/Animation.ts\nvar emptyArray = [];\nvar Animation = class {\n    constructor(){\n        this.changed = false;\n        this.values = emptyArray;\n        this.toValues = null;\n        this.fromValues = emptyArray;\n        this.config = new AnimationConfig();\n        this.immediate = false;\n    }\n};\n// src/scheduleProps.ts\n\nfunction scheduleProps(callId, param) {\n    let { key, props, defaultProps, state, actions } = param;\n    return new Promise((resolve, reject)=>{\n        let delay;\n        let timeout;\n        var _props_cancel;\n        let cancel = matchProp((_props_cancel = props.cancel) !== null && _props_cancel !== void 0 ? _props_cancel : defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.cancel, key);\n        if (cancel) {\n            onStart();\n        } else {\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.pause)) {\n                state.paused = matchProp(props.pause, key);\n            }\n            let pause = defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.pause;\n            if (pause !== true) {\n                pause = state.paused || matchProp(pause, key);\n            }\n            delay = callProp(props.delay || 0, key);\n            if (pause) {\n                state.resumeQueue.add(onResume);\n                actions.pause();\n            } else {\n                actions.resume();\n                onResume();\n            }\n        }\n        function onPause() {\n            state.resumeQueue.add(onResume);\n            state.timeouts.delete(timeout);\n            timeout.cancel();\n            delay = timeout.time - _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.now();\n        }\n        function onResume() {\n            if (delay > 0 && !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                state.delayed = true;\n                timeout = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.setTimeout(onStart, delay);\n                state.pauseQueue.add(onPause);\n                state.timeouts.add(timeout);\n            } else {\n                onStart();\n            }\n        }\n        function onStart() {\n            if (state.delayed) {\n                state.delayed = false;\n            }\n            state.pauseQueue.delete(onPause);\n            state.timeouts.delete(timeout);\n            if (callId <= (state.cancelId || 0)) {\n                cancel = true;\n            }\n            try {\n                actions.start({\n                    ...props,\n                    callId,\n                    cancel\n                }, resolve);\n            } catch (err) {\n                reject(err);\n            }\n        }\n    });\n}\n// src/runAsync.ts\n\n// src/AnimationResult.ts\nvar getCombinedResult = (target, results)=>results.length == 1 ? results[0] : results.some((result)=>result.cancelled) ? getCancelledResult(target.get()) : results.every((result)=>result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result)=>result.finished));\nvar getNoopResult = (value)=>({\n        value,\n        noop: true,\n        finished: true,\n        cancelled: false\n    });\nvar getFinishedResult = function(value, finished) {\n    let cancelled = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return {\n        value,\n        finished,\n        cancelled\n    };\n};\nvar getCancelledResult = (value)=>({\n        value,\n        cancelled: true,\n        finished: false\n    });\n// src/runAsync.ts\nfunction runAsync(to2, props, state, target) {\n    const { callId, parentId, onRest } = props;\n    const { asyncTo: prevTo, promise: prevPromise } = state;\n    if (!parentId && to2 === prevTo && !props.reset) {\n        return prevPromise;\n    }\n    return state.promise = (async ()=>{\n        state.asyncId = callId;\n        state.asyncTo = to2;\n        const defaultProps = getDefaultProps(props, (value, key)=>// The `onRest` prop is only called when the `runAsync` promise is resolved.\n            key === \"onRest\" ? void 0 : value);\n        let preventBail;\n        let bail;\n        const bailPromise = new Promise((resolve, reject)=>(preventBail = resolve, bail = reject));\n        const bailIfEnded = (bailSignal)=>{\n            const bailResult = // The `cancel` prop or `stop` method was used.\n            callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n            callId !== state.asyncId && getFinishedResult(target, false);\n            if (bailResult) {\n                bailSignal.result = bailResult;\n                bail(bailSignal);\n                throw bailSignal;\n            }\n        };\n        const animate = (arg1, arg2)=>{\n            const bailSignal = new BailSignal();\n            const skipAnimationSignal = new SkipAnimationSignal();\n            return (async ()=>{\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                    stopAsync(state);\n                    skipAnimationSignal.result = getFinishedResult(target, false);\n                    bail(skipAnimationSignal);\n                    throw skipAnimationSignal;\n                }\n                bailIfEnded(bailSignal);\n                const props2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                    ...arg1\n                } : {\n                    ...arg2,\n                    to: arg1\n                };\n                props2.parentId = callId;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(defaultProps, (value, key)=>{\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2[key])) {\n                        props2[key] = value;\n                    }\n                });\n                const result2 = await target.start(props2);\n                bailIfEnded(bailSignal);\n                if (state.paused) {\n                    await new Promise((resume)=>{\n                        state.resumeQueue.add(resume);\n                    });\n                }\n                return result2;\n            })();\n        };\n        let result;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            stopAsync(state);\n            return getFinishedResult(target, false);\n        }\n        try {\n            let animating;\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2)) {\n                animating = (async (queue)=>{\n                    for (const props2 of queue){\n                        await animate(props2);\n                    }\n                })(to2);\n            } else {\n                animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n            }\n            await Promise.all([\n                animating.then(preventBail),\n                bailPromise\n            ]);\n            result = getFinishedResult(target.get(), true, false);\n        } catch (err) {\n            if (err instanceof BailSignal) {\n                result = err.result;\n            } else if (err instanceof SkipAnimationSignal) {\n                result = err.result;\n            } else {\n                throw err;\n            }\n        } finally{\n            if (callId == state.asyncId) {\n                state.asyncId = parentId;\n                state.asyncTo = parentId ? prevTo : void 0;\n                state.promise = parentId ? prevPromise : void 0;\n            }\n        }\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(onRest)) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                onRest(result, target, target.item);\n            });\n        }\n        return result;\n    })();\n}\nfunction stopAsync(state, cancelId) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(state.timeouts, (t)=>t.cancel());\n    state.pauseQueue.clear();\n    state.resumeQueue.clear();\n    state.asyncId = state.asyncTo = state.promise = void 0;\n    if (cancelId) state.cancelId = cancelId;\n}\nvar BailSignal = class extends Error {\n    constructor(){\n        super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n    }\n};\nvar SkipAnimationSignal = class extends Error {\n    constructor(){\n        super(\"SkipAnimationSignal\");\n    }\n};\n// src/FrameValue.ts\n\n\nvar isFrameValue = (value)=>value instanceof FrameValue;\nvar nextId = 1;\nvar FrameValue = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.FluidValue {\n    get priority() {\n        return this._priority;\n    }\n    set priority(priority) {\n        if (this._priority != priority) {\n            this._priority = priority;\n            this._onPriorityChange(priority);\n        }\n    }\n    /** Get the current value */ get() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node && node.getValue();\n    }\n    /** Create a spring that maps our value to another value */ to() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    /** @deprecated Use the `to` method instead. */ interpolate() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)();\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    toJSON() {\n        return this.get();\n    }\n    observerAdded(count) {\n        if (count == 1) this._attach();\n    }\n    observerRemoved(count) {\n        if (count == 0) this._detach();\n    }\n    /** Called when the first child is added. */ _attach() {}\n    /** Called when the last child is removed. */ _detach() {}\n    /** Tell our children about our new value */ _onChange(value) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"change\",\n            parent: this,\n            value,\n            idle\n        });\n    }\n    /** Tell our children about our new priority */ _onPriorityChange(priority) {\n        if (!this.idle) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.sort(this);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"priority\",\n            parent: this,\n            priority\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.id = nextId++;\n        this._priority = 0;\n    }\n};\n// src/SpringPhase.ts\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\nvar hasAnimated = (target)=>(target[$P] & HAS_ANIMATED) > 0;\nvar isAnimating = (target)=>(target[$P] & IS_ANIMATING) > 0;\nvar isPaused = (target)=>(target[$P] & IS_PAUSED) > 0;\nvar setActiveBit = (target, active)=>active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nvar setPausedBit = (target, paused)=>paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n// src/SpringValue.ts\nvar SpringValue = class extends FrameValue {\n    /** Equals true when not advancing on each frame. */ get idle() {\n        return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n    get goal() {\n        return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.animation.to);\n    }\n    get velocity() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node instanceof _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2)=>node2.lastVelocity || 0);\n    }\n    /**\n   * When true, this value has been animated at least once.\n   */ get hasAnimated() {\n        return hasAnimated(this);\n    }\n    /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */ get isAnimating() {\n        return isAnimating(this);\n    }\n    /**\n   * When true, all current and future animations are paused.\n   */ get isPaused() {\n        return isPaused(this);\n    }\n    /**\n   *\n   *\n   */ get isDelayed() {\n        return this._state.delayed;\n    }\n    /** Advance the current animation by a number of milliseconds */ advance(dt) {\n        let idle = true;\n        let changed = false;\n        const anim = this.animation;\n        let { toValues } = anim;\n        const { config: config2 } = anim;\n        const payload = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(anim.to);\n        if (!payload && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(anim.to)) {\n            toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        }\n        anim.values.forEach((node2, i)=>{\n            if (node2.done) return;\n            const to2 = // Animated strings always go from 0 to 1.\n            node2.constructor == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n            let finished = anim.immediate;\n            let position = to2;\n            if (!finished) {\n                position = node2.lastPosition;\n                if (config2.tension <= 0) {\n                    node2.done = true;\n                    return;\n                }\n                let elapsed = node2.elapsedTime += dt;\n                const from = anim.fromValues[i];\n                const v0 = node2.v0 != null ? node2.v0 : node2.v0 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n                let velocity;\n                const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n                if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(config2.duration)) {\n                    let p = 1;\n                    if (config2.duration > 0) {\n                        if (this._memoizedDuration !== config2.duration) {\n                            this._memoizedDuration = config2.duration;\n                            if (node2.durationProgress > 0) {\n                                node2.elapsedTime = config2.duration * node2.durationProgress;\n                                elapsed = node2.elapsedTime += dt;\n                            }\n                        }\n                        p = (config2.progress || 0) + elapsed / this._memoizedDuration;\n                        p = p > 1 ? 1 : p < 0 ? 0 : p;\n                        node2.durationProgress = p;\n                    }\n                    position = from + config2.easing(p) * (to2 - from);\n                    velocity = (position - node2.lastPosition) / dt;\n                    finished = p == 1;\n                } else if (config2.decay) {\n                    const decay = config2.decay === true ? 0.998 : config2.decay;\n                    const e = Math.exp(-(1 - decay) * elapsed);\n                    position = from + v0 / (1 - decay) * (1 - e);\n                    finished = Math.abs(node2.lastPosition - position) <= precision;\n                    velocity = v0 * e;\n                } else {\n                    velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n                    const restVelocity = config2.restVelocity || precision / 10;\n                    const bounceFactor = config2.clamp ? 0 : config2.bounce;\n                    const canBounce = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(bounceFactor);\n                    const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n                    let isMoving;\n                    let isBouncing = false;\n                    const step = 1;\n                    const numSteps = Math.ceil(dt / step);\n                    for(let n = 0; n < numSteps; ++n){\n                        isMoving = Math.abs(velocity) > restVelocity;\n                        if (!isMoving) {\n                            finished = Math.abs(to2 - position) <= precision;\n                            if (finished) {\n                                break;\n                            }\n                        }\n                        if (canBounce) {\n                            isBouncing = position == to2 || position > to2 == isGrowing;\n                            if (isBouncing) {\n                                velocity = -velocity * bounceFactor;\n                                position = to2;\n                            }\n                        }\n                        const springForce = -config2.tension * 1e-6 * (position - to2);\n                        const dampingForce = -config2.friction * 1e-3 * velocity;\n                        const acceleration = (springForce + dampingForce) / config2.mass;\n                        velocity = velocity + acceleration * step;\n                        position = position + velocity * step;\n                    }\n                }\n                node2.lastVelocity = velocity;\n                if (Number.isNaN(position)) {\n                    console.warn(\"Got NaN while animating:\", this);\n                    finished = true;\n                }\n            }\n            if (payload && !payload[i].done) {\n                finished = false;\n            }\n            if (finished) {\n                node2.done = true;\n            } else {\n                idle = false;\n            }\n            if (node2.setValue(position, config2.round)) {\n                changed = true;\n            }\n        });\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        const currVal = node.getValue();\n        if (idle) {\n            const finalVal = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to);\n            if ((currVal !== finalVal || changed) && !config2.decay) {\n                node.setValue(finalVal);\n                this._onChange(finalVal);\n            } else if (changed && config2.decay) {\n                this._onChange(currVal);\n            }\n            this._stop();\n        } else if (changed) {\n            this._onChange(currVal);\n        }\n    }\n    /** Set the current value, while stopping the current animation */ set(value) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n            this._stop();\n            this._focus(value);\n            this._set(value);\n        });\n        return this;\n    }\n    /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */ pause() {\n        this._update({\n            pause: true\n        });\n    }\n    /** Resume the animation if paused. */ resume() {\n        this._update({\n            pause: false\n        });\n    }\n    /** Skip to the end of the current animation. */ finish() {\n        if (isAnimating(this)) {\n            const { to: to2, config: config2 } = this.animation;\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                this._onStart();\n                if (!config2.decay) {\n                    this._set(to2, false);\n                }\n                this._stop();\n            });\n        }\n        return this;\n    }\n    /** Push props into the pending queue. */ update(props) {\n        const queue = this.queue || (this.queue = []);\n        queue.push(props);\n        return this;\n    }\n    start(to2, arg2) {\n        let queue;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            queue = [\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2 : {\n                    ...arg2,\n                    to: to2\n                }\n            ];\n        } else {\n            queue = this.queue || [];\n            this.queue = [];\n        }\n        return Promise.all(queue.map((props)=>{\n            const up = this._update(props);\n            return up;\n        })).then((results)=>getCombinedResult(this, results));\n    }\n    /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */ stop(cancel) {\n        const { to: to2 } = this.animation;\n        this._focus(this.get());\n        stopAsync(this._state, cancel && this._lastCallId);\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this._stop(to2, cancel));\n        return this;\n    }\n    /** Restart the animation. */ reset() {\n        this._update({\n            reset: true\n        });\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._start();\n        } else if (event.type == \"priority\") {\n            this.priority = event.priority + 1;\n        }\n    }\n    /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */ _prepareNode(props) {\n        const key = this.key || \"\";\n        let { to: to2, from } = props;\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2[key] : to2;\n        if (to2 == null || isAsyncTo(to2)) {\n            to2 = void 0;\n        }\n        from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from) ? from[key] : from;\n        if (from == null) {\n            from = void 0;\n        }\n        const range = {\n            to: to2,\n            from\n        };\n        if (!hasAnimated(this)) {\n            if (props.reverse) [to2, from] = [\n                from,\n                to2\n            ];\n            from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from)) {\n                this._set(from);\n            } else if (!(0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this)) {\n                this._set(to2);\n            }\n        }\n        return range;\n    }\n    /** Every update is processed by this method before merging. */ _update(param, isLoop) {\n        let { ...props } = param;\n        const { key, defaultProps } = this;\n        if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop)=>/^on/.test(prop) ? resolveProp(value, key) : value));\n        mergeActiveFn(this, props, \"onProps\");\n        sendEvent(this, \"onProps\", props, this);\n        const range = this._prepareNode(props);\n        if (Object.isFrozen(this)) {\n            throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n        }\n        const state = this._state;\n        return scheduleProps(++this._lastCallId, {\n            key,\n            props,\n            defaultProps,\n            state,\n            actions: {\n                pause: ()=>{\n                    if (!isPaused(this)) {\n                        setPausedBit(this, true);\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.pauseQueue);\n                        sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                resume: ()=>{\n                    if (isPaused(this)) {\n                        setPausedBit(this, false);\n                        if (isAnimating(this)) {\n                            this._resume();\n                        }\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.resumeQueue);\n                        sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                start: this._merge.bind(this, range)\n            }\n        }).then((result)=>{\n            if (props.loop && result.finished && !(isLoop && result.noop)) {\n                const nextProps = createLoopUpdate(props);\n                if (nextProps) {\n                    return this._update(nextProps, true);\n                }\n            }\n            return result;\n        });\n    }\n    /** Merge props into the current animation */ _merge(range, props, resolve) {\n        if (props.cancel) {\n            this.stop(true);\n            return resolve(getCancelledResult(this));\n        }\n        const hasToProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.to);\n        const hasFromProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.from);\n        if (hasToProp || hasFromProp) {\n            if (props.callId > this._lastToId) {\n                this._lastToId = props.callId;\n            } else {\n                return resolve(getCancelledResult(this));\n            }\n        }\n        const { key, defaultProps, animation: anim } = this;\n        const { to: prevTo, from: prevFrom } = anim;\n        let { to: to2 = prevTo, from = prevFrom } = range;\n        if (hasFromProp && !hasToProp && (!props.default || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2))) {\n            to2 = from;\n        }\n        if (props.reverse) [to2, from] = [\n            from,\n            to2\n        ];\n        const hasFromChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(from, prevFrom);\n        if (hasFromChanged) {\n            anim.from = from;\n        }\n        from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n        const hasToChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(to2, prevTo);\n        if (hasToChanged) {\n            this._focus(to2);\n        }\n        const hasAsyncTo = isAsyncTo(props.to);\n        const { config: config2 } = anim;\n        const { decay, velocity } = config2;\n        if (hasToProp || hasFromProp) {\n            config2.velocity = 0;\n        }\n        if (props.config && !hasAsyncTo) {\n            mergeConfig(config2, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n            props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n        }\n        let node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        if (!node || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            return resolve(getFinishedResult(this, true));\n        }\n        const reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n        // except for declarative updates. When `reset` is defined, there\n        // must exist a value to animate from.\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.reset) ? hasFromProp && !props.default : !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from) && matchProp(props.reset, key);\n        const value = reset ? from : this.get();\n        const goal = computeGoal(to2);\n        const isAnimatable = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(goal) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(goal) || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(goal);\n        const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n        if (hasToChanged) {\n            const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(to2);\n            if (nodeType !== node.constructor) {\n                if (immediate) {\n                    node = this._set(goal);\n                } else throw Error(\"Cannot animate between \".concat(node.constructor.name, \" and \").concat(nodeType.name, ', as the \"to\" prop suggests'));\n            }\n        }\n        const goalType = node.constructor;\n        let started = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2);\n        let finished = false;\n        if (!started) {\n            const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n            if (hasToChanged || hasValueChanged) {\n                finished = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(computeGoal(value), goal);\n                started = !finished;\n            }\n            if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(anim.immediate, immediate) && !immediate || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.decay, decay) || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.velocity, velocity)) {\n                started = true;\n            }\n        }\n        if (finished && isAnimating(this)) {\n            if (anim.changed && !reset) {\n                started = true;\n            } else if (!started) {\n                this._stop(prevTo);\n            }\n        }\n        if (!hasAsyncTo) {\n            if (started || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(prevTo)) {\n                anim.values = node.getPayload();\n                anim.toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2) ? null : goalType == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? [\n                    1\n                ] : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(goal);\n            }\n            if (anim.immediate != immediate) {\n                anim.immediate = immediate;\n                if (!immediate && !reset) {\n                    this._set(prevTo);\n                }\n            }\n            if (started) {\n                const { onRest } = anim;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ACTIVE_EVENTS, (type)=>mergeActiveFn(this, props, type));\n                const result = getFinishedResult(this, checkFinished(this, prevTo));\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n                this._pendingCalls.add(resolve);\n                if (anim.changed) _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                    anim.changed = !reset;\n                    onRest === null || onRest === void 0 ? void 0 : onRest(result, this);\n                    if (reset) {\n                        callProp(defaultProps.onRest, result);\n                    } else {\n                        var _anim_onStart;\n                        (_anim_onStart = anim.onStart) === null || _anim_onStart === void 0 ? void 0 : _anim_onStart.call(anim, result, this);\n                    }\n                });\n            }\n        }\n        if (reset) {\n            this._set(value);\n        }\n        if (hasAsyncTo) {\n            resolve(runAsync(props.to, props, this._state, this));\n        } else if (started) {\n            this._start();\n        } else if (isAnimating(this) && !hasToChanged) {\n            this._pendingCalls.add(resolve);\n        } else {\n            resolve(getNoopResult(value));\n        }\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */ _focus(value) {\n        const anim = this.animation;\n        if (value !== anim.to) {\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._detach();\n            }\n            anim.to = value;\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._attach();\n            }\n        }\n    }\n    _attach() {\n        let priority = 0;\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(to2, this);\n            if (isFrameValue(to2)) {\n                priority = to2.priority + 1;\n            }\n        }\n        this.priority = priority;\n    }\n    _detach() {\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(to2, this);\n        }\n    }\n    /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */ _set(arg) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        const value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(arg);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            const oldNode = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n            if (!oldNode || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldNode.getValue())) {\n                const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n                if (!oldNode || oldNode.constructor != nodeType) {\n                    (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n                } else {\n                    oldNode.setValue(value);\n                }\n                if (oldNode) {\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                        this._onChange(value, idle);\n                    });\n                }\n            }\n        }\n        return (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n    }\n    _onStart() {\n        const anim = this.animation;\n        if (!anim.changed) {\n            anim.changed = true;\n            sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n        }\n    }\n    _onChange(value, idle) {\n        if (!idle) {\n            this._onStart();\n            callProp(this.animation.onChange, value, this);\n        }\n        callProp(this.defaultProps.onChange, value, this);\n        super._onChange(value, idle);\n    }\n    // This method resets the animation state (even if already animating) to\n    // ensure the latest from/to range is used, and it also ensures this spring\n    // is added to the frameloop.\n    _start() {\n        const anim = this.animation;\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).reset((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        if (!anim.immediate) {\n            anim.fromValues = anim.values.map((node)=>node.lastPosition);\n        }\n        if (!isAnimating(this)) {\n            setActiveBit(this, true);\n            if (!isPaused(this)) {\n                this._resume();\n            }\n        }\n    }\n    _resume() {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            this.finish();\n        } else {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n        }\n    }\n    /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */ _stop(goal, cancel) {\n        if (isAnimating(this)) {\n            setActiveBit(this, false);\n            const anim = this.animation;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(anim.values, (node)=>{\n                node.done = true;\n            });\n            if (anim.toValues) {\n                anim.onChange = anim.onPause = anim.onResume = void 0;\n            }\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n                type: \"idle\",\n                parent: this\n            });\n            const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal !== null && goal !== void 0 ? goal : anim.to));\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n            if (anim.changed) {\n                anim.changed = false;\n                sendEvent(this, \"onRest\", result, this);\n            }\n        }\n    }\n    constructor(arg1, arg2){\n        super();\n        /** The animation state */ this.animation = new Animation();\n        /** Some props have customizable default values */ this.defaultProps = {};\n        /** The state for `runAsync` calls */ this._state = {\n            paused: false,\n            delayed: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The promise resolvers of pending `start` calls */ this._pendingCalls = /* @__PURE__ */ new Set();\n        /** The counter for tracking `scheduleProps` calls */ this._lastCallId = 0;\n        /** The last `scheduleProps` call that changed the `to` prop */ this._lastToId = 0;\n        this._memoizedDuration = 0;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg1) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg2)) {\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                ...arg1\n            } : {\n                ...arg2,\n                from: arg1\n            };\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.default)) {\n                props.default = true;\n            }\n            this.start(props);\n        }\n    }\n};\nfunction checkFinished(target, to2) {\n    const goal = computeGoal(to2);\n    const value = computeGoal(target.get());\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, goal);\n}\nfunction createLoopUpdate(props) {\n    let loop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : props.loop, to2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : props.to;\n    const loopRet = callProp(loop);\n    if (loopRet) {\n        const overrides = loopRet !== true && inferTo(loopRet);\n        const reverse = (overrides || props).reverse;\n        const reset = !overrides || overrides.reset;\n        return createUpdate({\n            ...props,\n            loop,\n            // Avoid updating default props when looping.\n            default: false,\n            // Never loop the `pause` prop.\n            pause: void 0,\n            // For the \"reverse\" prop to loop as expected, the \"to\" prop\n            // must be undefined. The \"reverse\" prop is ignored when the\n            // \"to\" prop is an array or function.\n            to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n            // Ignore the \"from\" prop except on reset.\n            from: reset ? props.from : void 0,\n            reset,\n            // The \"loop\" prop can return a \"useSpring\" props object to\n            // override any of the original props.\n            ...overrides\n        });\n    }\n}\nfunction createUpdate(props) {\n    const { to: to2, from } = props = inferTo(props);\n    const keys = /* @__PURE__ */ new Set();\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2)) findDefined(to2, keys);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from)) findDefined(from, keys);\n    props.keys = keys.size ? Array.from(keys) : null;\n    return props;\n}\nfunction declareUpdate(props) {\n    const update2 = createUpdate(props);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(update2.default)) {\n        update2.default = getDefaultProps(update2);\n    }\n    return update2;\n}\nfunction findDefined(values, keys) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(values, (value, key)=>value != null && keys.add(key));\n}\nvar ACTIVE_EVENTS = [\n    \"onStart\",\n    \"onRest\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var _target_animation_type, _target_animation, _target_defaultProps_type, _target_defaultProps;\n    (_target_animation_type = (_target_animation = target.animation)[type]) === null || _target_animation_type === void 0 ? void 0 : _target_animation_type.call(_target_animation, ...args);\n    (_target_defaultProps_type = (_target_defaultProps = target.defaultProps)[type]) === null || _target_defaultProps_type === void 0 ? void 0 : _target_defaultProps_type.call(_target_defaultProps, ...args);\n}\n// src/Controller.ts\n\nvar BATCHED_EVENTS = [\n    \"onStart\",\n    \"onChange\",\n    \"onRest\"\n];\nvar nextId2 = 1;\nvar Controller = class {\n    /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */ get idle() {\n        return !this._state.asyncTo && Object.values(this.springs).every((spring)=>{\n            return spring.idle && !spring.isDelayed && !spring.isPaused;\n        });\n    }\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        this._item = item;\n    }\n    /** Get the current values of our springs */ get() {\n        const values = {};\n        this.each((spring, key)=>values[key] = spring.get());\n        return values;\n    }\n    /** Set the current values without animating. */ set(values) {\n        for(const key in values){\n            const value = values[key];\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n                this.springs[key].set(value);\n            }\n        }\n    }\n    /** Push an update onto the queue of each value. */ update(props) {\n        if (props) {\n            this.queue.push(createUpdate(props));\n        }\n        return this;\n    }\n    /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */ start(props) {\n        let { queue } = this;\n        if (props) {\n            queue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props).map(createUpdate);\n        } else {\n            this.queue = [];\n        }\n        if (this._flush) {\n            return this._flush(this, queue);\n        }\n        prepareKeys(this, queue);\n        return flushUpdateQueue(this, queue);\n    }\n    /** @internal */ stop(arg, keys) {\n        if (arg !== !!arg) {\n            keys = arg;\n        }\n        if (keys) {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].stop(!!arg));\n        } else {\n            stopAsync(this._state, this._lastAsyncId);\n            this.each((spring)=>spring.stop(!!arg));\n        }\n        return this;\n    }\n    /** Freeze the active animation in time */ pause(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: true\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].pause());\n        }\n        return this;\n    }\n    /** Resume the animation if paused. */ resume(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: false\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].resume());\n        }\n        return this;\n    }\n    /** Call a function once per spring value */ each(iterator) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.springs, iterator);\n    }\n    /** @internal Called at the end of every animation frame */ _onFrame() {\n        const { onStart, onChange, onRest } = this._events;\n        const active = this._active.size > 0;\n        const changed = this._changed.size > 0;\n        if (active && !this._started || changed && !this._started) {\n            this._started = true;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onStart, (param)=>{\n                let [onStart2, result] = param;\n                result.value = this.get();\n                onStart2(result, this, this._item);\n            });\n        }\n        const idle = !active && this._started;\n        const values = changed || idle && onRest.size ? this.get() : null;\n        if (changed && onChange.size) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onChange, (param)=>{\n                let [onChange2, result] = param;\n                result.value = values;\n                onChange2(result, this, this._item);\n            });\n        }\n        if (idle) {\n            this._started = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onRest, (param)=>{\n                let [onRest2, result] = param;\n                result.value = values;\n                onRest2(result, this, this._item);\n            });\n        }\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._changed.add(event.parent);\n            if (!event.idle) {\n                this._active.add(event.parent);\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else return;\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(this._onFrame);\n    }\n    constructor(props, flush3){\n        this.id = nextId2++;\n        /** The animated values */ this.springs = {};\n        /** The queue of props passed to the `update` method. */ this.queue = [];\n        /** The counter for tracking `scheduleProps` calls */ this._lastAsyncId = 0;\n        /** The values currently being animated */ this._active = /* @__PURE__ */ new Set();\n        /** The values that changed recently */ this._changed = /* @__PURE__ */ new Set();\n        /** Equals false when `onStart` listeners can be called */ this._started = false;\n        /** State used by the `runAsync` function */ this._state = {\n            paused: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The event queues that are flushed once per frame maximum */ this._events = {\n            onStart: /* @__PURE__ */ new Map(),\n            onChange: /* @__PURE__ */ new Map(),\n            onRest: /* @__PURE__ */ new Map()\n        };\n        this._onFrame = this._onFrame.bind(this);\n        if (flush3) {\n            this._flush = flush3;\n        }\n        if (props) {\n            this.start({\n                default: true,\n                ...props\n            });\n        }\n    }\n};\nfunction flushUpdateQueue(ctrl, queue) {\n    return Promise.all(queue.map((props)=>flushUpdate(ctrl, props))).then((results)=>getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n    const { keys, to: to2, from, loop, onRest, onResolve } = props;\n    const defaults2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props.default) && props.default;\n    if (loop) {\n        props.loop = false;\n    }\n    if (to2 === false) props.to = null;\n    if (from === false) props.from = null;\n    const asyncTo = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) ? to2 : void 0;\n    if (asyncTo) {\n        props.to = void 0;\n        props.onRest = void 0;\n        if (defaults2) {\n            defaults2.onRest = void 0;\n        }\n    } else {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(BATCHED_EVENTS, (key)=>{\n            const handler = props[key];\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(handler)) {\n                const queue = ctrl[\"_events\"][key];\n                props[key] = (param)=>{\n                    let { finished, cancelled } = param;\n                    const result2 = queue.get(handler);\n                    if (result2) {\n                        if (!finished) result2.finished = false;\n                        if (cancelled) result2.cancelled = true;\n                    } else {\n                        queue.set(handler, {\n                            value: null,\n                            finished: finished || false,\n                            cancelled: cancelled || false\n                        });\n                    }\n                };\n                if (defaults2) {\n                    defaults2[key] = props[key];\n                }\n            }\n        });\n    }\n    const state = ctrl[\"_state\"];\n    if (props.pause === !state.paused) {\n        state.paused = props.pause;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(props.pause ? state.pauseQueue : state.resumeQueue);\n    } else if (state.paused) {\n        props.pause = true;\n    }\n    const promises = (keys || Object.keys(ctrl.springs)).map((key)=>ctrl.springs[key].start(props));\n    const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n    if (asyncTo || cancel && state.asyncId) {\n        promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n            props,\n            state,\n            actions: {\n                pause: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                resume: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                start (props2, resolve) {\n                    if (cancel) {\n                        stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                        resolve(getCancelledResult(ctrl));\n                    } else {\n                        props2.onRest = onRest;\n                        resolve(runAsync(asyncTo, props2, state, ctrl));\n                    }\n                }\n            }\n        }));\n    }\n    if (state.paused) {\n        await new Promise((resume)=>{\n            state.resumeQueue.add(resume);\n        });\n    }\n    const result = getCombinedResult(ctrl, await Promise.all(promises));\n    if (loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props, loop, to2);\n        if (nextProps) {\n            prepareKeys(ctrl, [\n                nextProps\n            ]);\n            return flushUpdate(ctrl, nextProps, true);\n        }\n    }\n    if (onResolve) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>onResolve(result, ctrl, ctrl.item));\n    }\n    return result;\n}\nfunction getSprings(ctrl, props) {\n    const springs = {\n        ...ctrl.springs\n    };\n    if (props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props), (props2)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2.keys)) {\n                props2 = createUpdate(props2);\n            }\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props2.to)) {\n                props2 = {\n                    ...props2,\n                    to: void 0\n                };\n            }\n            prepareSprings(springs, props2, (key)=>{\n                return createSpring(key);\n            });\n        });\n    }\n    setSprings(ctrl, springs);\n    return springs;\n}\nfunction setSprings(ctrl, springs) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(springs, (spring, key)=>{\n        if (!ctrl.springs[key]) {\n            ctrl.springs[key] = spring;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, ctrl);\n        }\n    });\n}\nfunction createSpring(key, observer) {\n    const spring = new SpringValue();\n    spring.key = key;\n    if (observer) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, observer);\n    }\n    return spring;\n}\nfunction prepareSprings(springs, props, create) {\n    if (props.keys) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(props.keys, (key)=>{\n            const spring = springs[key] || (springs[key] = create(key));\n            spring[\"_prepareNode\"](props);\n        });\n    }\n}\nfunction prepareKeys(ctrl, queue) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (props)=>{\n        prepareSprings(ctrl.springs, props, (key)=>{\n            return createSpring(key, ctrl);\n        });\n    });\n}\n// src/SpringContext.tsx\n\n\n\nvar SpringContext = (param)=>{\n    let { children, ...props } = param;\n    _s1();\n    const inherited = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ctx);\n    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n    props = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne)(()=>({\n            pause,\n            immediate\n        }), [\n        pause,\n        immediate\n    ]);\n    const { Provider } = ctx;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Provider, {\n        value: props\n    }, children);\n};\n_s1(SpringContext, \"iAoqMYsYmgTC4tx7ORbDhJzNWJE=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne\n    ];\n});\n_c = SpringContext;\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n    Object.assign(target, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(init));\n    target.Provider._context = target;\n    target.Consumer._context = target;\n    return target;\n}\n// src/SpringRef.ts\n\nvar SpringRef = ()=>{\n    const current = [];\n    const SpringRef2 = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateDirectCall)();\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = _getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.current = current;\n    SpringRef2.add = function(ctrl) {\n        if (!current.includes(ctrl)) {\n            current.push(ctrl);\n        }\n    };\n    SpringRef2.delete = function(ctrl) {\n        const i = current.indexOf(ctrl);\n        if (~i) current.splice(i, 1);\n    };\n    SpringRef2.pause = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.pause(...arguments));\n        return this;\n    };\n    SpringRef2.resume = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.resume(...arguments));\n        return this;\n    };\n    SpringRef2.set = function(values) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            const update2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(values) ? values(i, ctrl) : values;\n            if (update2) {\n                ctrl.set(update2);\n            }\n        });\n    };\n    SpringRef2.start = function(props) {\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = this._getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.stop = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.stop(...arguments));\n        return this;\n    };\n    SpringRef2.update = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>ctrl.update(this._getProps(props, ctrl, i)));\n        return this;\n    };\n    const _getProps = function(arg, ctrl, index) {\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) ? arg(index, ctrl) : arg;\n    };\n    SpringRef2._getProps = _getProps;\n    return SpringRef2;\n};\n_c1 = SpringRef;\n// src/hooks/useSprings.ts\nfunction useSprings(length, props, deps) {\n    _s2();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    if (propsFn && !deps) deps = [];\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const layoutId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            ctrls: [],\n            queue: [],\n            flush (ctrl, updates2) {\n                const springs2 = getSprings(ctrl, updates2);\n                const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key)=>!ctrl.springs[key]);\n                return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve)=>{\n                    setSprings(ctrl, springs2);\n                    state.queue.push(()=>{\n                        resolve(flushUpdateQueue(ctrl, updates2));\n                    });\n                    forceUpdate();\n                });\n            }\n        }), []);\n    const ctrls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([\n        ...state.ctrls\n    ]);\n    const updates = [];\n    const prevLength = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(length) || 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current.slice(length, prevLength), (ctrl)=>{\n            detachRefs(ctrl, ref);\n            ctrl.stop(true);\n        });\n        ctrls.current.length = length;\n        declareUpdates(prevLength, length);\n    }, [\n        length\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        declareUpdates(0, Math.min(prevLength, length));\n    }, deps);\n    function declareUpdates(startIndex, endIndex) {\n        for(let i = startIndex; i < endIndex; i++){\n            const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n            const update2 = propsFn ? propsFn(i, ctrl) : props[i];\n            if (update2) {\n                updates[i] = declareUpdate(update2);\n            }\n        }\n    }\n    const springs = ctrls.current.map((ctrl, i)=>getSprings(ctrl, updates[i]));\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        layoutId.current++;\n        state.ctrls = ctrls.current;\n        const { queue } = state;\n        if (queue.length) {\n            state.queue = [];\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (cb)=>cb());\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current, (ctrl, i)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            const update2 = updates[i];\n            if (update2) {\n                replaceRef(ctrl, update2.ref);\n                if (ctrl.ref) {\n                    ctrl.queue.push(update2);\n                } else {\n                    ctrl.start(update2);\n                }\n            }\n        });\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(state.ctrls, (ctrl)=>ctrl.stop(true));\n        });\n    const values = springs.map((x)=>({\n            ...x\n        }));\n    return ref ? [\n        values,\n        ref\n    ] : values;\n}\n_s2(useSprings, \"hYYBNj8i3sOeF76E+RzhO8u7udI=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useSpring.ts\nfunction useSpring(props, deps) {\n    _s3();\n    const isFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props);\n    const [[values], ref] = useSprings(1, isFn ? props : [\n        props\n    ], isFn ? deps || [] : deps);\n    return isFn || arguments.length == 2 ? [\n        values,\n        ref\n    ] : values;\n}\n_s3(useSpring, \"SDMMI4TeIG06gbUyDm+G9xb8npc=\", false, function() {\n    return [\n        useSprings\n    ];\n});\n// src/hooks/useSpringRef.ts\n\nvar initSpringRef = ()=>SpringRef();\nvar useSpringRef = ()=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initSpringRef)[0];\n};\n_s4(useSpringRef, \"WMYQrW8aTW5m34e+VWfswQ7OC0U=\");\n// src/hooks/useSpringValue.ts\n\nvar useSpringValue = (initial, props)=>{\n    _s5();\n    const springValue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant)(()=>new SpringValue(initial, props));\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            springValue.stop();\n        });\n    return springValue;\n};\n_s5(useSpringValue, \"hGrzQbJ6TUSsox7ygS/NDs7Qfw4=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useTrail.ts\n\nfunction useTrail(length, propsArg, deps) {\n    _s6();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg) && propsArg;\n    if (propsFn && !deps) deps = [];\n    let reverse = true;\n    let passedRef = void 0;\n    const result = useSprings(length, (i, ctrl)=>{\n        const props = propsFn ? propsFn(i, ctrl) : propsArg;\n        passedRef = props.ref;\n        reverse = reverse && props.reverse;\n        return props;\n    }, // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [\n        {}\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(result[1].current, (ctrl, i)=>{\n            const parent = result[1].current[i + (reverse ? 1 : -1)];\n            replaceRef(ctrl, passedRef);\n            if (ctrl.ref) {\n                if (parent) {\n                    ctrl.update({\n                        to: parent.springs\n                    });\n                }\n                return;\n            }\n            if (parent) {\n                ctrl.start({\n                    to: parent.springs\n                });\n            } else {\n                ctrl.start();\n            }\n        });\n    }, deps);\n    if (propsFn || arguments.length == 3) {\n        const ref = passedRef !== null && passedRef !== void 0 ? passedRef : result[1];\n        ref[\"_getProps\"] = (propsArg2, ctrl, i)=>{\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n            if (props) {\n                const parent = ref.current[i + (props.reverse ? 1 : -1)];\n                if (parent) props.to = parent.springs;\n                return props;\n            }\n        };\n        return result;\n    }\n    return result[0];\n}\n_s6(useTrail, \"rP/7uOiOJQcSEwKyLsIPapcM2tA=\", false, function() {\n    return [\n        useSprings,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useTransition.tsx\n\n\n\nfunction useTransition(data, props, deps) {\n    _s7();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const { reset, sort, trail = 0, expires = true, exitBeforeEnter = false, onDestroyed, ref: propsRef, config: propsConfig } = propsFn ? propsFn() : props;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const items = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(data);\n    const transitions = [];\n    const usedTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const prevTransitions = reset ? null : usedTransitions.current;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        usedTransitions.current = transitions;\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(t.ctrl);\n            t.ctrl.ref = ref;\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(usedTransitions.current, (t)=>{\n                if (t.expired) {\n                    clearTimeout(t.expirationId);\n                }\n                detachRefs(t.ctrl, ref);\n                t.ctrl.stop(true);\n            });\n        };\n    });\n    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n    const expired = reset && usedTransitions.current || [];\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(expired, (param)=>{\n            let { ctrl, item, key } = param;\n            detachRefs(ctrl, ref);\n            callProp(onDestroyed, item, key);\n        }));\n    const reused = [];\n    if (prevTransitions) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(prevTransitions, (t, i)=>{\n        if (t.expired) {\n            clearTimeout(t.expirationId);\n            expired.push(t);\n        } else {\n            i = reused[i] = keys.indexOf(t.key);\n            if (~i) transitions[i] = t;\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(items, (item, i)=>{\n        if (!transitions[i]) {\n            transitions[i] = {\n                key: keys[i],\n                item,\n                phase: \"mount\" /* MOUNT */ ,\n                ctrl: new Controller()\n            };\n            transitions[i].ctrl.item = item;\n        }\n    });\n    if (reused.length) {\n        let i = -1;\n        const { leave } = propsFn ? propsFn() : props;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(reused, (keyIndex, prevIndex)=>{\n            const t = prevTransitions[prevIndex];\n            if (~keyIndex) {\n                i = transitions.indexOf(t);\n                transitions[i] = {\n                    ...t,\n                    item: items[keyIndex]\n                };\n            } else if (leave) {\n                transitions.splice(++i, 0, t);\n            }\n        });\n    }\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(sort)) {\n        transitions.sort((a, b)=>sort(a.item, b.item));\n    }\n    let delay = -trail;\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const defaultProps = getDefaultProps(props);\n    const changes = /* @__PURE__ */ new Map();\n    const exitingTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(/* @__PURE__ */ new Map());\n    const forceChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t, i)=>{\n        const key = t.key;\n        const prevPhase = t.phase;\n        const p = propsFn ? propsFn() : props;\n        let to2;\n        let phase;\n        const propsDelay = callProp(p.delay || 0, key);\n        if (prevPhase == \"mount\" /* MOUNT */ ) {\n            to2 = p.enter;\n            phase = \"enter\" /* ENTER */ ;\n        } else {\n            const isLeave = keys.indexOf(key) < 0;\n            if (prevPhase != \"leave\" /* LEAVE */ ) {\n                if (isLeave) {\n                    to2 = p.leave;\n                    phase = \"leave\" /* LEAVE */ ;\n                } else if (to2 = p.update) {\n                    phase = \"update\" /* UPDATE */ ;\n                } else return;\n            } else if (!isLeave) {\n                to2 = p.enter;\n                phase = \"enter\" /* ENTER */ ;\n            } else return;\n        }\n        to2 = callProp(to2, t.item, i);\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? inferTo(to2) : {\n            to: to2\n        };\n        if (!to2.config) {\n            const config2 = propsConfig || defaultProps.config;\n            to2.config = callProp(config2, t.item, i, phase);\n        }\n        delay += trail;\n        const payload = {\n            ...defaultProps,\n            // we need to add our props.delay value you here.\n            delay: propsDelay + delay,\n            ref: propsRef,\n            immediate: p.immediate,\n            // This prevents implied resets.\n            reset: false,\n            // Merge any phase-specific props.\n            ...to2\n        };\n        if (phase == \"enter\" /* ENTER */  && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(payload.from)) {\n            const p2 = propsFn ? propsFn() : props;\n            const from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n            payload.from = callProp(from, t.item, i);\n        }\n        const { onResolve } = payload;\n        payload.onResolve = (result)=>{\n            callProp(onResolve, result);\n            const transitions2 = usedTransitions.current;\n            const t2 = transitions2.find((t3)=>t3.key === key);\n            if (!t2) return;\n            if (result.cancelled && t2.phase != \"update\" /* UPDATE */ ) {\n                return;\n            }\n            if (t2.ctrl.idle) {\n                const idle = transitions2.every((t3)=>t3.ctrl.idle);\n                if (t2.phase == \"leave\" /* LEAVE */ ) {\n                    const expiry = callProp(expires, t2.item);\n                    if (expiry !== false) {\n                        const expiryMs = expiry === true ? 0 : expiry;\n                        t2.expired = true;\n                        if (!idle && expiryMs > 0) {\n                            if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n                            return;\n                        }\n                    }\n                }\n                if (idle && transitions2.some((t3)=>t3.expired)) {\n                    exitingTransitions.current.delete(t2);\n                    if (exitBeforeEnter) {\n                        forceChange.current = true;\n                    }\n                    forceUpdate();\n                }\n            }\n        };\n        const springs = getSprings(t.ctrl, payload);\n        if (phase === \"leave\" /* LEAVE */  && exitBeforeEnter) {\n            exitingTransitions.current.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        } else {\n            changes.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        }\n    });\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (hasContext) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n                t.ctrl.start({\n                    default: context\n                });\n            });\n        }\n    }, [\n        context\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(changes, (_, t)=>{\n        if (exitingTransitions.current.size) {\n            const ind = transitions.findIndex((state)=>state.key === t.key);\n            transitions.splice(ind, 1);\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(exitingTransitions.current.size ? exitingTransitions.current : changes, (param, t)=>{\n            let { phase, payload } = param;\n            const { ctrl } = t;\n            t.phase = phase;\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext && phase == \"enter\" /* ENTER */ ) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            if (payload) {\n                replaceRef(ctrl, payload.ref);\n                if ((ctrl.ref || ref) && !forceChange.current) {\n                    ctrl.update(payload);\n                } else {\n                    ctrl.start(payload);\n                    if (forceChange.current) {\n                        forceChange.current = false;\n                    }\n                }\n            }\n        });\n    }, reset ? void 0 : deps);\n    const renderTransitions = (render)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, transitions.map((t, i)=>{\n            const { springs } = changes.get(t) || t.ctrl;\n            const elem = render({\n                ...springs\n            }, t.item, t, i);\n            return elem && elem.type ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(elem.type, {\n                ...elem.props,\n                key: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(t.key) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(t.key) ? t.key : t.ctrl.id,\n                ref: elem.ref\n            }) : elem;\n        }));\n    return ref ? [\n        renderTransitions,\n        ref\n    ] : renderTransitions;\n}\n_s7(useTransition, \"42pB3Ij5X1DSdJfTRN9xEyhj2Bo=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\nvar nextKey = 1;\nfunction getKeys(items, param, prevTransitions) {\n    let { key, keys = key } = param;\n    if (keys === null) {\n        const reused = /* @__PURE__ */ new Set();\n        return items.map((item)=>{\n            const t = prevTransitions && prevTransitions.find((t2)=>t2.item === item && t2.phase !== \"leave\" /* LEAVE */  && !reused.has(t2));\n            if (t) {\n                reused.add(t);\n                return t.key;\n            }\n            return nextKey++;\n        });\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys) ? items : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(keys) ? items.map(keys) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys);\n}\n// src/hooks/useScroll.ts\n\nvar useScroll = function() {\n    let { container, ...springOptions } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s8();\n    const [scrollValues, api] = useSpring(()=>({\n            scrollX: 0,\n            scrollY: 0,\n            scrollXProgress: 0,\n            scrollYProgress: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onScroll)((param)=>{\n            let { x, y } = param;\n            api.start({\n                scrollX: x.current,\n                scrollXProgress: x.progress,\n                scrollY: y.current,\n                scrollYProgress: y.progress\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(scrollValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return scrollValues;\n};\n_s8(useScroll, \"Jti96r2Rws6Ekr5fIwfu+1CFXcw=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useResize.ts\n\nvar useResize = (param)=>{\n    let { container, ...springOptions } = param;\n    _s9();\n    const [sizeValues, api] = useSpring(()=>({\n            width: 0,\n            height: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onResize)((param)=>{\n            let { width, height } = param;\n            api.start({\n                width,\n                height,\n                immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(sizeValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return sizeValues;\n};\n_s9(useResize, \"IQ4lWHNynSxWdhY6Jf1n8BSsJMs=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useInView.ts\n\n\nvar defaultThresholdOptions = {\n    any: 0,\n    all: 1\n};\nfunction useInView(props, args) {\n    _s10();\n    const [isInView, setIsInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const springsProps = propsFn ? propsFn() : {};\n    const { to: to2 = {}, from = {}, ...restSpringProps } = springsProps;\n    const intersectionArguments = propsFn ? args : props;\n    const [springs, api] = useSpring(()=>({\n            from,\n            ...restSpringProps\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const element = ref.current;\n        const { root, once, amount = \"any\", ...restArgs } = intersectionArguments !== null && intersectionArguments !== void 0 ? intersectionArguments : {};\n        if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n        const activeIntersections = /* @__PURE__ */ new WeakMap();\n        const onEnter = ()=>{\n            if (to2) {\n                api.start(to2);\n            }\n            setIsInView(true);\n            const cleanup = ()=>{\n                if (from) {\n                    api.start(from);\n                }\n                setIsInView(false);\n            };\n            return once ? void 0 : cleanup;\n        };\n        const handleIntersection = (entries)=>{\n            entries.forEach((entry)=>{\n                const onLeave = activeIntersections.get(entry.target);\n                if (entry.isIntersecting === Boolean(onLeave)) {\n                    return;\n                }\n                if (entry.isIntersecting) {\n                    const newOnLeave = onEnter();\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(newOnLeave)) {\n                        activeIntersections.set(entry.target, newOnLeave);\n                    } else {\n                        observer.unobserve(entry.target);\n                    }\n                } else if (onLeave) {\n                    onLeave();\n                    activeIntersections.delete(entry.target);\n                }\n            });\n        };\n        const observer = new IntersectionObserver(handleIntersection, {\n            root: root && root.current || void 0,\n            threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],\n            ...restArgs\n        });\n        observer.observe(element);\n        return ()=>observer.unobserve(element);\n    }, [\n        intersectionArguments\n    ]);\n    if (propsFn) {\n        return [\n            ref,\n            springs\n        ];\n    }\n    return [\n        ref,\n        isInView\n    ];\n}\n_s10(useInView, \"7PuQs9I897GO6tzsabnAsgHidAU=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/components/Spring.tsx\nfunction Spring(param) {\n    let { children, ...props } = param;\n    _s11();\n    return children(useSpring(props));\n}\n_s11(Spring, \"osm+04XShAFeF/DrWOpJZHjaaNg=\", false, function() {\n    return [\n        useSpring\n    ];\n});\n_c2 = Spring;\n// src/components/Trail.tsx\n\nfunction Trail(param) {\n    let { items, children, ...props } = param;\n    _s12();\n    const trails = useTrail(items.length, props);\n    return items.map((item, index)=>{\n        const result = children(item, index);\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(result) ? result(trails[index]) : result;\n    });\n}\n_s12(Trail, \"IZ78DWwcRLiU/XMADn7w03VEdK0=\", false, function() {\n    return [\n        useTrail\n    ];\n});\n_c3 = Trail;\n// src/components/Transition.tsx\nfunction Transition(param) {\n    let { items, children, ...props } = param;\n    _s13();\n    return useTransition(items, props)(children);\n}\n_s13(Transition, \"28mb38mkSsMdKhDodgMEJ1axbVA=\", false, function() {\n    return [\n        useTransition\n    ];\n});\n_c4 = Transition;\n// src/interpolate.ts\n\n// src/Interpolation.ts\n\n\nvar Interpolation = class extends FrameValue {\n    advance(_dt) {\n        const value = this._get();\n        const oldValue = this.get();\n        if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldValue)) {\n            (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).setValue(value);\n            this._onChange(value, this.idle);\n        }\n        if (!this.idle && checkIdle(this._active)) {\n            becomeIdle(this);\n        }\n    }\n    _get() {\n        const inputs = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(this.source) ? this.source.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.source));\n        return this.calc(...inputs);\n    }\n    _start() {\n        if (this.idle && !checkIdle(this._active)) {\n            this.idle = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(this), (node)=>{\n                node.done = false;\n            });\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this.advance());\n                becomeIdle(this);\n            } else {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n            }\n        }\n    }\n    // Observe our sources only when we're observed.\n    _attach() {\n        let priority = 1;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(source, this);\n            }\n            if (isFrameValue(source)) {\n                if (!source.idle) {\n                    this._active.add(source);\n                }\n                priority = Math.max(priority, source.priority + 1);\n            }\n        });\n        this.priority = priority;\n        this._start();\n    }\n    // Stop observing our sources once we have no observers.\n    _detach() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(source, this);\n            }\n        });\n        this._active.clear();\n        becomeIdle(this);\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            if (event.idle) {\n                this.advance();\n            } else {\n                this._active.add(event.parent);\n                this._start();\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else if (event.type == \"priority\") {\n            this.priority = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source).reduce((highest, parent)=>Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n        }\n    }\n    constructor(source, args){\n        super();\n        this.source = source;\n        /** Equals false when in the frameloop */ this.idle = true;\n        /** The inputs which are currently animating */ this._active = /* @__PURE__ */ new Set();\n        this.calc = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)(...args);\n        const value = this._get();\n        const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n    }\n};\nfunction isIdle(source) {\n    return source.idle !== false;\n}\nfunction checkIdle(active) {\n    return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n    if (!self.idle) {\n        self.idle = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(self), (node)=>{\n            node.done = true;\n        });\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(self, {\n            type: \"idle\",\n            parent: self\n        });\n    }\n}\n// src/interpolate.ts\nvar to = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return new Interpolation(source, args);\n};\nvar interpolate = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)(), new Interpolation(source, args);\n};\n// src/globals.ts\n\n_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createStringInterpolator,\n    to: (source, args)=>new Interpolation(source, args)\n});\nvar update = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.advance;\n// src/index.ts\n\n\n //# sourceMappingURL=react-spring_core.modern.mjs.map\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SpringContext\");\n$RefreshReg$(_c1, \"SpringRef\");\n$RefreshReg$(_c2, \"Spring\");\n$RefreshReg$(_c3, \"Trail\");\n$RefreshReg$(_c4, \"Transition\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL2NvcmUvZGlzdC9yZWFjdC1zcHJpbmdfY29yZS5tb2Rlcm4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0JBQXdCOztBQUMrQztBQUV2RSxpQkFBaUI7QUFRYTtBQUM5QixTQUFTUyxTQUFTQyxLQUFLO0lBQUU7UUFBR0MsS0FBSCwyQkFBTzs7SUFDOUIsT0FBT1Qsb0RBQUVBLENBQUNVLEdBQUcsQ0FBQ0YsU0FBU0EsU0FBU0MsUUFBUUQ7QUFDMUM7QUFDQSxJQUFJRyxZQUFZLENBQUNILE9BQU9JLE1BQVFKLFVBQVUsUUFBUSxDQUFDLENBQUVJLENBQUFBLE9BQU9KLFNBQVVSLENBQUFBLG9EQUFFQSxDQUFDVSxHQUFHLENBQUNGLFNBQVNBLE1BQU1JLE9BQU9YLDZEQUFPQSxDQUFDTyxPQUFPSyxRQUFRLENBQUNELElBQUcsQ0FBQztBQUMvSCxJQUFJRSxjQUFjLENBQUNDLE1BQU1ILE1BQVFaLG9EQUFFQSxDQUFDZ0IsR0FBRyxDQUFDRCxRQUFRSCxPQUFPRyxJQUFJLENBQUNILElBQUksR0FBR0c7QUFDbkUsSUFBSUUsaUJBQWlCLENBQUNDLE9BQU9OLE1BQVFNLE1BQU1DLE9BQU8sS0FBSyxPQUFPRCxLQUFLLENBQUNOLElBQUksR0FBR00sTUFBTUMsT0FBTyxHQUFHRCxNQUFNQyxPQUFPLENBQUNQLElBQUksR0FBRyxLQUFLO0FBQ3JILElBQUlRLGdCQUFnQixDQUFDWixRQUFVQTtBQUMvQixJQUFJYSxrQkFBa0IsU0FBQ0g7UUFBT0ksNkVBQVlGO0lBQ3hDLElBQUlHLE9BQU9DO0lBQ1gsSUFBSU4sTUFBTUMsT0FBTyxJQUFJRCxNQUFNQyxPQUFPLEtBQUssTUFBTTtRQUMzQ0QsUUFBUUEsTUFBTUMsT0FBTztRQUNyQkksT0FBT0UsT0FBT0YsSUFBSSxDQUFDTDtJQUNyQjtJQUNBLE1BQU1RLFlBQVks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LElBQUksSUFBSUMsTUFBTXhWLElBQUksQ0FBQ3VQLFFBQVFwRSxLQUFLLENBQUNrWjtBQUNsRDtBQUNBLFNBQVNQLFdBQVdRLElBQUk7SUFDdEIsSUFBSSxDQUFDQSxLQUFLOVYsSUFBSSxFQUFFO1FBQ2Q4VixLQUFLOVYsSUFBSSxHQUFHO1FBQ1prVSwwREFBTUEsQ0FBQ2Msa0VBQVdBLENBQUNjLE9BQU8sQ0FBQ3ZXO1lBQ3pCQSxLQUFLc0MsSUFBSSxHQUFHO1FBQ2Q7UUFDQTRTLHdFQUFtQkEsQ0FBQ3FCLE1BQU07WUFDeEI3VixNQUFNO1lBQ05DLFFBQVE0VjtRQUNWO0lBQ0Y7QUFDRjtBQUVBLHFCQUFxQjtBQUNyQixJQUFJcmtCLEtBQUssU0FBQytqQjtxQ0FBV3JsQjtRQUFBQTs7V0FBUyxJQUFJOGtCLGNBQWNPLFFBQVFybEI7O0FBQ3hELElBQUlzUCxjQUFjLFNBQUMrVjtxQ0FBV3JsQjtRQUFBQTs7V0FBVTRqQiwwRUFBcUJBLElBQUksSUFBSWtCLGNBQWNPLFFBQVFybEI7O0FBRTNGLGlCQUFpQjtBQUthO0FBQzlCSix5REFBT0EsQ0FBQ3dKLE1BQU0sQ0FBQztJQUNieEYsd0JBQXdCQSw0RUFBQUE7SUFDeEJ0QyxJQUFJLENBQUMrakIsUUFBUXJsQixPQUFTLElBQUk4a0IsY0FBY08sUUFBUXJsQjtBQUNsRDtBQUNBLElBQUk0QyxTQUFTZ2pCLDJEQUFVQSxDQUFDdlUsT0FBTztBQUUvQixlQUFlO0FBTWU7QUFDTTtBQWdDbEMsQ0FDRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC1zcHJpbmcvY29yZS9kaXN0L3JlYWN0LXNwcmluZ19jb3JlLm1vZGVybi5tanM/NWY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaG9va3MvdXNlQ2hhaW4udHNcbmltcG9ydCB7IGVhY2gsIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2hlbHBlcnMudHNcbmltcG9ydCB7XG4gIGlzLFxuICB0b0FycmF5LFxuICBlYWNoUHJvcCxcbiAgZ2V0Rmx1aWRWYWx1ZSxcbiAgaXNBbmltYXRlZFN0cmluZyxcbiAgR2xvYmFscyBhcyBHXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gY2FsbFByb3AodmFsdWUsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGlzLmZ1bih2YWx1ZSkgPyB2YWx1ZSguLi5hcmdzKSA6IHZhbHVlO1xufVxudmFyIG1hdGNoUHJvcCA9ICh2YWx1ZSwga2V5KSA9PiB2YWx1ZSA9PT0gdHJ1ZSB8fCAhIShrZXkgJiYgdmFsdWUgJiYgKGlzLmZ1bih2YWx1ZSkgPyB2YWx1ZShrZXkpIDogdG9BcnJheSh2YWx1ZSkuaW5jbHVkZXMoa2V5KSkpO1xudmFyIHJlc29sdmVQcm9wID0gKHByb3AsIGtleSkgPT4gaXMub2JqKHByb3ApID8ga2V5ICYmIHByb3Bba2V5XSA6IHByb3A7XG52YXIgZ2V0RGVmYXVsdFByb3AgPSAocHJvcHMsIGtleSkgPT4gcHJvcHMuZGVmYXVsdCA9PT0gdHJ1ZSA/IHByb3BzW2tleV0gOiBwcm9wcy5kZWZhdWx0ID8gcHJvcHMuZGVmYXVsdFtrZXldIDogdm9pZCAwO1xudmFyIG5vb3BUcmFuc2Zvcm0gPSAodmFsdWUpID0+IHZhbHVlO1xudmFyIGdldERlZmF1bHRQcm9wcyA9IChwcm9wcywgdHJhbnNmb3JtID0gbm9vcFRyYW5zZm9ybSkgPT4ge1xuICBsZXQga2V5cyA9IERFRkFVTFRfUFJPUFM7XG4gIGlmIChwcm9wcy5kZWZhdWx0ICYmIHByb3BzLmRlZmF1bHQgIT09IHRydWUpIHtcbiAgICBwcm9wcyA9IHByb3BzLmRlZmF1bHQ7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgfVxuICBjb25zdCBkZWZhdWx0czIgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtKHByb3BzW2tleV0sIGtleSk7XG4gICAgaWYgKCFpcy51bmQodmFsdWUpKSB7XG4gICAgICBkZWZhdWx0czJba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHMyO1xufTtcbnZhciBERUZBVUxUX1BST1BTID0gW1xuICBcImNvbmZpZ1wiLFxuICBcIm9uUHJvcHNcIixcbiAgXCJvblN0YXJ0XCIsXG4gIFwib25DaGFuZ2VcIixcbiAgXCJvblBhdXNlXCIsXG4gIFwib25SZXN1bWVcIixcbiAgXCJvblJlc3RcIlxuXTtcbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgY29uZmlnOiAxLFxuICBmcm9tOiAxLFxuICB0bzogMSxcbiAgcmVmOiAxLFxuICBsb29wOiAxLFxuICByZXNldDogMSxcbiAgcGF1c2U6IDEsXG4gIGNhbmNlbDogMSxcbiAgcmV2ZXJzZTogMSxcbiAgaW1tZWRpYXRlOiAxLFxuICBkZWZhdWx0OiAxLFxuICBkZWxheTogMSxcbiAgb25Qcm9wczogMSxcbiAgb25TdGFydDogMSxcbiAgb25DaGFuZ2U6IDEsXG4gIG9uUGF1c2U6IDEsXG4gIG9uUmVzdW1lOiAxLFxuICBvblJlc3Q6IDEsXG4gIG9uUmVzb2x2ZTogMSxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wc1xuICBpdGVtczogMSxcbiAgdHJhaWw6IDEsXG4gIHNvcnQ6IDEsXG4gIGV4cGlyZXM6IDEsXG4gIGluaXRpYWw6IDEsXG4gIGVudGVyOiAxLFxuICB1cGRhdGU6IDEsXG4gIGxlYXZlOiAxLFxuICBjaGlsZHJlbjogMSxcbiAgb25EZXN0cm95ZWQ6IDEsXG4gIC8vIEludGVybmFsIHByb3BzXG4gIGtleXM6IDEsXG4gIGNhbGxJZDogMSxcbiAgcGFyZW50SWQ6IDFcbn07XG5mdW5jdGlvbiBnZXRGb3J3YXJkUHJvcHMocHJvcHMpIHtcbiAgY29uc3QgZm9yd2FyZCA9IHt9O1xuICBsZXQgY291bnQgPSAwO1xuICBlYWNoUHJvcChwcm9wcywgKHZhbHVlLCBwcm9wKSA9PiB7XG4gICAgaWYgKCFSRVNFUlZFRF9QUk9QU1twcm9wXSkge1xuICAgICAgZm9yd2FyZFtwcm9wXSA9IHZhbHVlO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH0pO1xuICBpZiAoY291bnQpIHtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxufVxuZnVuY3Rpb24gaW5mZXJUbyhwcm9wcykge1xuICBjb25zdCB0bzIgPSBnZXRGb3J3YXJkUHJvcHMocHJvcHMpO1xuICBpZiAodG8yKSB7XG4gICAgY29uc3Qgb3V0ID0geyB0bzogdG8yIH07XG4gICAgZWFjaFByb3AocHJvcHMsICh2YWwsIGtleSkgPT4ga2V5IGluIHRvMiB8fCAob3V0W2tleV0gPSB2YWwpKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHJldHVybiB7IC4uLnByb3BzIH07XG59XG5mdW5jdGlvbiBjb21wdXRlR29hbCh2YWx1ZSkge1xuICB2YWx1ZSA9IGdldEZsdWlkVmFsdWUodmFsdWUpO1xuICByZXR1cm4gaXMuYXJyKHZhbHVlKSA/IHZhbHVlLm1hcChjb21wdXRlR29hbCkgOiBpc0FuaW1hdGVkU3RyaW5nKHZhbHVlKSA/IEcuY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yKHtcbiAgICByYW5nZTogWzAsIDFdLFxuICAgIG91dHB1dDogW3ZhbHVlLCB2YWx1ZV1cbiAgfSkoMSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGhhc1Byb3BzKHByb3BzKSB7XG4gIGZvciAoY29uc3QgXyBpbiBwcm9wcylcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNBc3luY1RvKHRvMikge1xuICByZXR1cm4gaXMuZnVuKHRvMikgfHwgaXMuYXJyKHRvMikgJiYgaXMub2JqKHRvMlswXSk7XG59XG5mdW5jdGlvbiBkZXRhY2hSZWZzKGN0cmwsIHJlZikge1xuICBjdHJsLnJlZj8uZGVsZXRlKGN0cmwpO1xuICByZWY/LmRlbGV0ZShjdHJsKTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VSZWYoY3RybCwgcmVmKSB7XG4gIGlmIChyZWYgJiYgY3RybC5yZWYgIT09IHJlZikge1xuICAgIGN0cmwucmVmPy5kZWxldGUoY3RybCk7XG4gICAgcmVmLmFkZChjdHJsKTtcbiAgICBjdHJsLnJlZiA9IHJlZjtcbiAgfVxufVxuXG4vLyBzcmMvaG9va3MvdXNlQ2hhaW4udHNcbmZ1bmN0aW9uIHVzZUNoYWluKHJlZnMsIHRpbWVTdGVwcywgdGltZUZyYW1lID0gMWUzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0aW1lU3RlcHMpIHtcbiAgICAgIGxldCBwcmV2RGVsYXkgPSAwO1xuICAgICAgZWFjaChyZWZzLCAocmVmLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXJzID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChjb250cm9sbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBsZXQgZGVsYXkgPSB0aW1lRnJhbWUgKiB0aW1lU3RlcHNbaV07XG4gICAgICAgICAgaWYgKGlzTmFOKGRlbGF5KSlcbiAgICAgICAgICAgIGRlbGF5ID0gcHJldkRlbGF5O1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHByZXZEZWxheSA9IGRlbGF5O1xuICAgICAgICAgIGVhY2goY29udHJvbGxlcnMsIChjdHJsKSA9PiB7XG4gICAgICAgICAgICBlYWNoKGN0cmwucXVldWUsIChwcm9wcykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZW1vaXplZERlbGF5UHJvcCA9IHByb3BzLmRlbGF5O1xuICAgICAgICAgICAgICBwcm9wcy5kZWxheSA9IChrZXkpID0+IGRlbGF5ICsgY2FsbFByb3AobWVtb2l6ZWREZWxheVByb3AgfHwgMCwga2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlZi5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIGVhY2gocmVmcywgKHJlZikgPT4ge1xuICAgICAgICBjb25zdCBjb250cm9sbGVycyA9IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoY29udHJvbGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgcXVldWVzID0gY29udHJvbGxlcnMubWFwKChjdHJsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxID0gY3RybC5xdWV1ZTtcbiAgICAgICAgICAgIGN0cmwucXVldWUgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBxO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHAgPSBwLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZWFjaChcbiAgICAgICAgICAgICAgY29udHJvbGxlcnMsXG4gICAgICAgICAgICAgIChjdHJsLCBpKSA9PiBlYWNoKHF1ZXVlc1tpXSB8fCBbXSwgKHVwZGF0ZTIpID0+IGN0cmwucXVldWUucHVzaCh1cGRhdGUyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVmLnN0YXJ0KCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU3ByaW5nLnRzXG5pbXBvcnQgeyBpcyBhcyBpczkgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2hvb2tzL3VzZVNwcmluZ3MudHNcbmltcG9ydCB7IHVzZUNvbnRleHQgYXMgdXNlQ29udGV4dDIsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgaXMgYXMgaXM4LFxuICBlYWNoIGFzIGVhY2g1LFxuICB1c2VQcmV2LFxuICB1c2VPbmNlLFxuICB1c2VGb3JjZVVwZGF0ZSxcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MlxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL1NwcmluZ1ZhbHVlLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczUsXG4gIHJhZiBhcyByYWYzLFxuICBlYWNoIGFzIGVhY2gyLFxuICBpc0VxdWFsLFxuICB0b0FycmF5IGFzIHRvQXJyYXkyLFxuICBlYWNoUHJvcCBhcyBlYWNoUHJvcDMsXG4gIGZyYW1lTG9vcCBhcyBmcmFtZUxvb3AyLFxuICBmbHVzaENhbGxzLFxuICBnZXRGbHVpZFZhbHVlIGFzIGdldEZsdWlkVmFsdWUyLFxuICBpc0FuaW1hdGVkU3RyaW5nIGFzIGlzQW5pbWF0ZWRTdHJpbmcyLFxuICBHbG9iYWxzIGFzIEc1LFxuICBjYWxsRmx1aWRPYnNlcnZlcnMgYXMgY2FsbEZsdWlkT2JzZXJ2ZXJzMixcbiAgaGFzRmx1aWRWYWx1ZSxcbiAgYWRkRmx1aWRPYnNlcnZlcixcbiAgcmVtb3ZlRmx1aWRPYnNlcnZlcixcbiAgZ2V0Rmx1aWRPYnNlcnZlcnNcbn0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5pbXBvcnQge1xuICBBbmltYXRlZFZhbHVlLFxuICBBbmltYXRlZFN0cmluZyxcbiAgZ2V0UGF5bG9hZCxcbiAgZ2V0QW5pbWF0ZWQgYXMgZ2V0QW5pbWF0ZWQyLFxuICBzZXRBbmltYXRlZCxcbiAgZ2V0QW5pbWF0ZWRUeXBlXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL2FuaW1hdGVkXCI7XG5cbi8vIHNyYy9BbmltYXRpb25Db25maWcudHNcbmltcG9ydCB7IGlzIGFzIGlzMiwgZWFzaW5ncyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgY29uZmlnID0ge1xuICBkZWZhdWx0OiB7IHRlbnNpb246IDE3MCwgZnJpY3Rpb246IDI2IH0sXG4gIGdlbnRsZTogeyB0ZW5zaW9uOiAxMjAsIGZyaWN0aW9uOiAxNCB9LFxuICB3b2JibHk6IHsgdGVuc2lvbjogMTgwLCBmcmljdGlvbjogMTIgfSxcbiAgc3RpZmY6IHsgdGVuc2lvbjogMjEwLCBmcmljdGlvbjogMjAgfSxcbiAgc2xvdzogeyB0ZW5zaW9uOiAyODAsIGZyaWN0aW9uOiA2MCB9LFxuICBtb2xhc3NlczogeyB0ZW5zaW9uOiAyODAsIGZyaWN0aW9uOiAxMjAgfVxufTtcblxuLy8gc3JjL0FuaW1hdGlvbkNvbmZpZy50c1xudmFyIGRlZmF1bHRzID0ge1xuICAuLi5jb25maWcuZGVmYXVsdCxcbiAgbWFzczogMSxcbiAgZGFtcGluZzogMSxcbiAgZWFzaW5nOiBlYXNpbmdzLmxpbmVhcixcbiAgY2xhbXA6IGZhbHNlXG59O1xudmFyIEFuaW1hdGlvbkNvbmZpZyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgdmVsb2NpdHkgb2Ygb25lIG9yIG1vcmUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGVmYXVsdHMpO1xuICB9XG59O1xuZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMiwgbmV3Q29uZmlnLCBkZWZhdWx0Q29uZmlnKSB7XG4gIGlmIChkZWZhdWx0Q29uZmlnKSB7XG4gICAgZGVmYXVsdENvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZyB9O1xuICAgIHNhbml0aXplQ29uZmlnKGRlZmF1bHRDb25maWcsIG5ld0NvbmZpZyk7XG4gICAgbmV3Q29uZmlnID0geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5uZXdDb25maWcgfTtcbiAgfVxuICBzYW5pdGl6ZUNvbmZpZyhjb25maWcyLCBuZXdDb25maWcpO1xuICBPYmplY3QuYXNzaWduKGNvbmZpZzIsIG5ld0NvbmZpZyk7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKGNvbmZpZzJba2V5XSA9PSBudWxsKSB7XG4gICAgICBjb25maWcyW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgIH1cbiAgfVxuICBsZXQgeyBmcmVxdWVuY3ksIGRhbXBpbmcgfSA9IGNvbmZpZzI7XG4gIGNvbnN0IHsgbWFzcyB9ID0gY29uZmlnMjtcbiAgaWYgKCFpczIudW5kKGZyZXF1ZW5jeSkpIHtcbiAgICBpZiAoZnJlcXVlbmN5IDwgMC4wMSlcbiAgICAgIGZyZXF1ZW5jeSA9IDAuMDE7XG4gICAgaWYgKGRhbXBpbmcgPCAwKVxuICAgICAgZGFtcGluZyA9IDA7XG4gICAgY29uZmlnMi50ZW5zaW9uID0gTWF0aC5wb3coMiAqIE1hdGguUEkgLyBmcmVxdWVuY3ksIDIpICogbWFzcztcbiAgICBjb25maWcyLmZyaWN0aW9uID0gNCAqIE1hdGguUEkgKiBkYW1waW5nICogbWFzcyAvIGZyZXF1ZW5jeTtcbiAgfVxuICByZXR1cm4gY29uZmlnMjtcbn1cbmZ1bmN0aW9uIHNhbml0aXplQ29uZmlnKGNvbmZpZzIsIHByb3BzKSB7XG4gIGlmICghaXMyLnVuZChwcm9wcy5kZWNheSkpIHtcbiAgICBjb25maWcyLmR1cmF0aW9uID0gdm9pZCAwO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGlzVGVuc2lvbkNvbmZpZyA9ICFpczIudW5kKHByb3BzLnRlbnNpb24pIHx8ICFpczIudW5kKHByb3BzLmZyaWN0aW9uKTtcbiAgICBpZiAoaXNUZW5zaW9uQ29uZmlnIHx8ICFpczIudW5kKHByb3BzLmZyZXF1ZW5jeSkgfHwgIWlzMi51bmQocHJvcHMuZGFtcGluZykgfHwgIWlzMi51bmQocHJvcHMubWFzcykpIHtcbiAgICAgIGNvbmZpZzIuZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICBjb25maWcyLmRlY2F5ID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoaXNUZW5zaW9uQ29uZmlnKSB7XG4gICAgICBjb25maWcyLmZyZXF1ZW5jeSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL0FuaW1hdGlvbi50c1xudmFyIGVtcHR5QXJyYXkgPSBbXTtcbnZhciBBbmltYXRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWVzID0gZW1wdHlBcnJheTtcbiAgICB0aGlzLnRvVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLmZyb21WYWx1ZXMgPSBlbXB0eUFycmF5O1xuICAgIHRoaXMuY29uZmlnID0gbmV3IEFuaW1hdGlvbkNvbmZpZygpO1xuICAgIHRoaXMuaW1tZWRpYXRlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHNyYy9zY2hlZHVsZVByb3BzLnRzXG5pbXBvcnQgeyBpcyBhcyBpczMsIHJhZiwgR2xvYmFscyBhcyBHMiB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gc2NoZWR1bGVQcm9wcyhjYWxsSWQsIHsga2V5LCBwcm9wcywgZGVmYXVsdFByb3BzLCBzdGF0ZSwgYWN0aW9ucyB9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IGRlbGF5O1xuICAgIGxldCB0aW1lb3V0O1xuICAgIGxldCBjYW5jZWwgPSBtYXRjaFByb3AocHJvcHMuY2FuY2VsID8/IGRlZmF1bHRQcm9wcz8uY2FuY2VsLCBrZXkpO1xuICAgIGlmIChjYW5jZWwpIHtcbiAgICAgIG9uU3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpczMudW5kKHByb3BzLnBhdXNlKSkge1xuICAgICAgICBzdGF0ZS5wYXVzZWQgPSBtYXRjaFByb3AocHJvcHMucGF1c2UsIGtleSk7XG4gICAgICB9XG4gICAgICBsZXQgcGF1c2UgPSBkZWZhdWx0UHJvcHM/LnBhdXNlO1xuICAgICAgaWYgKHBhdXNlICE9PSB0cnVlKSB7XG4gICAgICAgIHBhdXNlID0gc3RhdGUucGF1c2VkIHx8IG1hdGNoUHJvcChwYXVzZSwga2V5KTtcbiAgICAgIH1cbiAgICAgIGRlbGF5ID0gY2FsbFByb3AocHJvcHMuZGVsYXkgfHwgMCwga2V5KTtcbiAgICAgIGlmIChwYXVzZSkge1xuICAgICAgICBzdGF0ZS5yZXN1bWVRdWV1ZS5hZGQob25SZXN1bWUpO1xuICAgICAgICBhY3Rpb25zLnBhdXNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25zLnJlc3VtZSgpO1xuICAgICAgICBvblJlc3VtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgICAgc3RhdGUucmVzdW1lUXVldWUuYWRkKG9uUmVzdW1lKTtcbiAgICAgIHN0YXRlLnRpbWVvdXRzLmRlbGV0ZSh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICBkZWxheSA9IHRpbWVvdXQudGltZSAtIHJhZi5ub3coKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25SZXN1bWUoKSB7XG4gICAgICBpZiAoZGVsYXkgPiAwICYmICFHMi5za2lwQW5pbWF0aW9uKSB7XG4gICAgICAgIHN0YXRlLmRlbGF5ZWQgPSB0cnVlO1xuICAgICAgICB0aW1lb3V0ID0gcmFmLnNldFRpbWVvdXQob25TdGFydCwgZGVsYXkpO1xuICAgICAgICBzdGF0ZS5wYXVzZVF1ZXVlLmFkZChvblBhdXNlKTtcbiAgICAgICAgc3RhdGUudGltZW91dHMuYWRkKHRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgaWYgKHN0YXRlLmRlbGF5ZWQpIHtcbiAgICAgICAgc3RhdGUuZGVsYXllZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhdGUucGF1c2VRdWV1ZS5kZWxldGUob25QYXVzZSk7XG4gICAgICBzdGF0ZS50aW1lb3V0cy5kZWxldGUodGltZW91dCk7XG4gICAgICBpZiAoY2FsbElkIDw9IChzdGF0ZS5jYW5jZWxJZCB8fCAwKSkge1xuICAgICAgICBjYW5jZWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0aW9ucy5zdGFydCh7IC4uLnByb3BzLCBjYWxsSWQsIGNhbmNlbCB9LCByZXNvbHZlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvcnVuQXN5bmMudHNcbmltcG9ydCB7XG4gIGlzIGFzIGlzNCxcbiAgcmFmIGFzIHJhZjIsXG4gIGZsdXNoLFxuICBlYWNoUHJvcCBhcyBlYWNoUHJvcDIsXG4gIEdsb2JhbHMgYXMgRzNcbn0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5cbi8vIHNyYy9BbmltYXRpb25SZXN1bHQudHNcbnZhciBnZXRDb21iaW5lZFJlc3VsdCA9ICh0YXJnZXQsIHJlc3VsdHMpID0+IHJlc3VsdHMubGVuZ3RoID09IDEgPyByZXN1bHRzWzBdIDogcmVzdWx0cy5zb21lKChyZXN1bHQpID0+IHJlc3VsdC5jYW5jZWxsZWQpID8gZ2V0Q2FuY2VsbGVkUmVzdWx0KHRhcmdldC5nZXQoKSkgOiByZXN1bHRzLmV2ZXJ5KChyZXN1bHQpID0+IHJlc3VsdC5ub29wKSA/IGdldE5vb3BSZXN1bHQodGFyZ2V0LmdldCgpKSA6IGdldEZpbmlzaGVkUmVzdWx0KFxuICB0YXJnZXQuZ2V0KCksXG4gIHJlc3VsdHMuZXZlcnkoKHJlc3VsdCkgPT4gcmVzdWx0LmZpbmlzaGVkKVxuKTtcbnZhciBnZXROb29wUmVzdWx0ID0gKHZhbHVlKSA9PiAoe1xuICB2YWx1ZSxcbiAgbm9vcDogdHJ1ZSxcbiAgZmluaXNoZWQ6IHRydWUsXG4gIGNhbmNlbGxlZDogZmFsc2Vcbn0pO1xudmFyIGdldEZpbmlzaGVkUmVzdWx0ID0gKHZhbHVlLCBmaW5pc2hlZCwgY2FuY2VsbGVkID0gZmFsc2UpID0+ICh7XG4gIHZhbHVlLFxuICBmaW5pc2hlZCxcbiAgY2FuY2VsbGVkXG59KTtcbnZhciBnZXRDYW5jZWxsZWRSZXN1bHQgPSAodmFsdWUpID0+ICh7XG4gIHZhbHVlLFxuICBjYW5jZWxsZWQ6IHRydWUsXG4gIGZpbmlzaGVkOiBmYWxzZVxufSk7XG5cbi8vIHNyYy9ydW5Bc3luYy50c1xuZnVuY3Rpb24gcnVuQXN5bmModG8yLCBwcm9wcywgc3RhdGUsIHRhcmdldCkge1xuICBjb25zdCB7IGNhbGxJZCwgcGFyZW50SWQsIG9uUmVzdCB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgYXN5bmNUbzogcHJldlRvLCBwcm9taXNlOiBwcmV2UHJvbWlzZSB9ID0gc3RhdGU7XG4gIGlmICghcGFyZW50SWQgJiYgdG8yID09PSBwcmV2VG8gJiYgIXByb3BzLnJlc2V0KSB7XG4gICAgcmV0dXJuIHByZXZQcm9taXNlO1xuICB9XG4gIHJldHVybiBzdGF0ZS5wcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICBzdGF0ZS5hc3luY0lkID0gY2FsbElkO1xuICAgIHN0YXRlLmFzeW5jVG8gPSB0bzI7XG4gICAgY29uc3QgZGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzKFxuICAgICAgcHJvcHMsXG4gICAgICAodmFsdWUsIGtleSkgPT4gKFxuICAgICAgICAvLyBUaGUgYG9uUmVzdGAgcHJvcCBpcyBvbmx5IGNhbGxlZCB3aGVuIHRoZSBgcnVuQXN5bmNgIHByb21pc2UgaXMgcmVzb2x2ZWQuXG4gICAgICAgIGtleSA9PT0gXCJvblJlc3RcIiA/IHZvaWQgMCA6IHZhbHVlXG4gICAgICApXG4gICAgKTtcbiAgICBsZXQgcHJldmVudEJhaWw7XG4gICAgbGV0IGJhaWw7XG4gICAgY29uc3QgYmFpbFByb21pc2UgPSBuZXcgUHJvbWlzZShcbiAgICAgIChyZXNvbHZlLCByZWplY3QpID0+IChwcmV2ZW50QmFpbCA9IHJlc29sdmUsIGJhaWwgPSByZWplY3QpXG4gICAgKTtcbiAgICBjb25zdCBiYWlsSWZFbmRlZCA9IChiYWlsU2lnbmFsKSA9PiB7XG4gICAgICBjb25zdCBiYWlsUmVzdWx0ID0gKFxuICAgICAgICAvLyBUaGUgYGNhbmNlbGAgcHJvcCBvciBgc3RvcGAgbWV0aG9kIHdhcyB1c2VkLlxuICAgICAgICBjYWxsSWQgPD0gKHN0YXRlLmNhbmNlbElkIHx8IDApICYmIGdldENhbmNlbGxlZFJlc3VsdCh0YXJnZXQpIHx8IC8vIFRoZSBhc3luYyBgdG9gIHByb3Agd2FzIHJlcGxhY2VkLlxuICAgICAgICBjYWxsSWQgIT09IHN0YXRlLmFzeW5jSWQgJiYgZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSlcbiAgICAgICk7XG4gICAgICBpZiAoYmFpbFJlc3VsdCkge1xuICAgICAgICBiYWlsU2lnbmFsLnJlc3VsdCA9IGJhaWxSZXN1bHQ7XG4gICAgICAgIGJhaWwoYmFpbFNpZ25hbCk7XG4gICAgICAgIHRocm93IGJhaWxTaWduYWw7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhbmltYXRlID0gKGFyZzEsIGFyZzIpID0+IHtcbiAgICAgIGNvbnN0IGJhaWxTaWduYWwgPSBuZXcgQmFpbFNpZ25hbCgpO1xuICAgICAgY29uc3Qgc2tpcEFuaW1hdGlvblNpZ25hbCA9IG5ldyBTa2lwQW5pbWF0aW9uU2lnbmFsKCk7XG4gICAgICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKEczLnNraXBBbmltYXRpb24pIHtcbiAgICAgICAgICBzdG9wQXN5bmMoc3RhdGUpO1xuICAgICAgICAgIHNraXBBbmltYXRpb25TaWduYWwucmVzdWx0ID0gZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSk7XG4gICAgICAgICAgYmFpbChza2lwQW5pbWF0aW9uU2lnbmFsKTtcbiAgICAgICAgICB0aHJvdyBza2lwQW5pbWF0aW9uU2lnbmFsO1xuICAgICAgICB9XG4gICAgICAgIGJhaWxJZkVuZGVkKGJhaWxTaWduYWwpO1xuICAgICAgICBjb25zdCBwcm9wczIgPSBpczQub2JqKGFyZzEpID8geyAuLi5hcmcxIH0gOiB7IC4uLmFyZzIsIHRvOiBhcmcxIH07XG4gICAgICAgIHByb3BzMi5wYXJlbnRJZCA9IGNhbGxJZDtcbiAgICAgICAgZWFjaFByb3AyKGRlZmF1bHRQcm9wcywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBpZiAoaXM0LnVuZChwcm9wczJba2V5XSkpIHtcbiAgICAgICAgICAgIHByb3BzMltrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0MiA9IGF3YWl0IHRhcmdldC5zdGFydChwcm9wczIpO1xuICAgICAgICBiYWlsSWZFbmRlZChiYWlsU2lnbmFsKTtcbiAgICAgICAgaWYgKHN0YXRlLnBhdXNlZCkge1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXN1bWUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnJlc3VtZVF1ZXVlLmFkZChyZXN1bWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgfSkoKTtcbiAgICB9O1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKEczLnNraXBBbmltYXRpb24pIHtcbiAgICAgIHN0b3BBc3luYyhzdGF0ZSk7XG4gICAgICByZXR1cm4gZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgYW5pbWF0aW5nO1xuICAgICAgaWYgKGlzNC5hcnIodG8yKSkge1xuICAgICAgICBhbmltYXRpbmcgPSAoYXN5bmMgKHF1ZXVlKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBwcm9wczIgb2YgcXVldWUpIHtcbiAgICAgICAgICAgIGF3YWl0IGFuaW1hdGUocHJvcHMyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKHRvMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpbmcgPSBQcm9taXNlLnJlc29sdmUodG8yKGFuaW1hdGUsIHRhcmdldC5zdG9wLmJpbmQodGFyZ2V0KSkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW2FuaW1hdGluZy50aGVuKHByZXZlbnRCYWlsKSwgYmFpbFByb21pc2VdKTtcbiAgICAgIHJlc3VsdCA9IGdldEZpbmlzaGVkUmVzdWx0KHRhcmdldC5nZXQoKSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEJhaWxTaWduYWwpIHtcbiAgICAgICAgcmVzdWx0ID0gZXJyLnJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAoZXJyIGluc3RhbmNlb2YgU2tpcEFuaW1hdGlvblNpZ25hbCkge1xuICAgICAgICByZXN1bHQgPSBlcnIucmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoY2FsbElkID09IHN0YXRlLmFzeW5jSWQpIHtcbiAgICAgICAgc3RhdGUuYXN5bmNJZCA9IHBhcmVudElkO1xuICAgICAgICBzdGF0ZS5hc3luY1RvID0gcGFyZW50SWQgPyBwcmV2VG8gOiB2b2lkIDA7XG4gICAgICAgIHN0YXRlLnByb21pc2UgPSBwYXJlbnRJZCA/IHByZXZQcm9taXNlIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXM0LmZ1bihvblJlc3QpKSB7XG4gICAgICByYWYyLmJhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgb25SZXN0KHJlc3VsdCwgdGFyZ2V0LCB0YXJnZXQuaXRlbSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIHN0b3BBc3luYyhzdGF0ZSwgY2FuY2VsSWQpIHtcbiAgZmx1c2goc3RhdGUudGltZW91dHMsICh0KSA9PiB0LmNhbmNlbCgpKTtcbiAgc3RhdGUucGF1c2VRdWV1ZS5jbGVhcigpO1xuICBzdGF0ZS5yZXN1bWVRdWV1ZS5jbGVhcigpO1xuICBzdGF0ZS5hc3luY0lkID0gc3RhdGUuYXN5bmNUbyA9IHN0YXRlLnByb21pc2UgPSB2b2lkIDA7XG4gIGlmIChjYW5jZWxJZClcbiAgICBzdGF0ZS5jYW5jZWxJZCA9IGNhbmNlbElkO1xufVxudmFyIEJhaWxTaWduYWwgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXG4gICAgICBcIkFuIGFzeW5jIGFuaW1hdGlvbiBoYXMgYmVlbiBpbnRlcnJ1cHRlZC4gWW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IGZvcmdvdCB0byB1c2UgYGF3YWl0YCBvciBgLmNhdGNoKC4uLilgIG9uIGl0cyByZXR1cm5lZCBwcm9taXNlLlwiXG4gICAgKTtcbiAgfVxufTtcbnZhciBTa2lwQW5pbWF0aW9uU2lnbmFsID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiU2tpcEFuaW1hdGlvblNpZ25hbFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL0ZyYW1lVmFsdWUudHNcbmltcG9ydCB7XG4gIGRlcHJlY2F0ZUludGVycG9sYXRlLFxuICBmcmFtZUxvb3AsXG4gIEZsdWlkVmFsdWUgYXMgRmx1aWRWYWx1ZTIsXG4gIEdsb2JhbHMgYXMgRzQsXG4gIGNhbGxGbHVpZE9ic2VydmVyc1xufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbmltcG9ydCB7IGdldEFuaW1hdGVkIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvYW5pbWF0ZWRcIjtcbnZhciBpc0ZyYW1lVmFsdWUgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgRnJhbWVWYWx1ZTtcbnZhciBuZXh0SWQgPSAxO1xudmFyIEZyYW1lVmFsdWUgPSBjbGFzcyBleHRlbmRzIEZsdWlkVmFsdWUyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmlkID0gbmV4dElkKys7XG4gICAgdGhpcy5fcHJpb3JpdHkgPSAwO1xuICB9XG4gIGdldCBwcmlvcml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHk7XG4gIH1cbiAgc2V0IHByaW9yaXR5KHByaW9yaXR5KSB7XG4gICAgaWYgKHRoaXMuX3ByaW9yaXR5ICE9IHByaW9yaXR5KSB7XG4gICAgICB0aGlzLl9wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgdGhpcy5fb25Qcmlvcml0eUNoYW5nZShwcmlvcml0eSk7XG4gICAgfVxuICB9XG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgKi9cbiAgZ2V0KCkge1xuICAgIGNvbnN0IG5vZGUgPSBnZXRBbmltYXRlZCh0aGlzKTtcbiAgICByZXR1cm4gbm9kZSAmJiBub2RlLmdldFZhbHVlKCk7XG4gIH1cbiAgLyoqIENyZWF0ZSBhIHNwcmluZyB0aGF0IG1hcHMgb3VyIHZhbHVlIHRvIGFub3RoZXIgdmFsdWUgKi9cbiAgdG8oLi4uYXJncykge1xuICAgIHJldHVybiBHNC50byh0aGlzLCBhcmdzKTtcbiAgfVxuICAvKiogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgdG9gIG1ldGhvZCBpbnN0ZWFkLiAqL1xuICBpbnRlcnBvbGF0ZSguLi5hcmdzKSB7XG4gICAgZGVwcmVjYXRlSW50ZXJwb2xhdGUoKTtcbiAgICByZXR1cm4gRzQudG8odGhpcywgYXJncyk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgpO1xuICB9XG4gIG9ic2VydmVyQWRkZWQoY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gMSlcbiAgICAgIHRoaXMuX2F0dGFjaCgpO1xuICB9XG4gIG9ic2VydmVyUmVtb3ZlZChjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSAwKVxuICAgICAgdGhpcy5fZGV0YWNoKCk7XG4gIH1cbiAgLyoqIENhbGxlZCB3aGVuIHRoZSBmaXJzdCBjaGlsZCBpcyBhZGRlZC4gKi9cbiAgX2F0dGFjaCgpIHtcbiAgfVxuICAvKiogQ2FsbGVkIHdoZW4gdGhlIGxhc3QgY2hpbGQgaXMgcmVtb3ZlZC4gKi9cbiAgX2RldGFjaCgpIHtcbiAgfVxuICAvKiogVGVsbCBvdXIgY2hpbGRyZW4gYWJvdXQgb3VyIG5ldyB2YWx1ZSAqL1xuICBfb25DaGFuZ2UodmFsdWUsIGlkbGUgPSBmYWxzZSkge1xuICAgIGNhbGxGbHVpZE9ic2VydmVycyh0aGlzLCB7XG4gICAgICB0eXBlOiBcImNoYW5nZVwiLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgdmFsdWUsXG4gICAgICBpZGxlXG4gICAgfSk7XG4gIH1cbiAgLyoqIFRlbGwgb3VyIGNoaWxkcmVuIGFib3V0IG91ciBuZXcgcHJpb3JpdHkgKi9cbiAgX29uUHJpb3JpdHlDaGFuZ2UocHJpb3JpdHkpIHtcbiAgICBpZiAoIXRoaXMuaWRsZSkge1xuICAgICAgZnJhbWVMb29wLnNvcnQodGhpcyk7XG4gICAgfVxuICAgIGNhbGxGbHVpZE9ic2VydmVycyh0aGlzLCB7XG4gICAgICB0eXBlOiBcInByaW9yaXR5XCIsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBwcmlvcml0eVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvU3ByaW5nUGhhc2UudHNcbnZhciAkUCA9IFN5bWJvbC5mb3IoXCJTcHJpbmdQaGFzZVwiKTtcbnZhciBIQVNfQU5JTUFURUQgPSAxO1xudmFyIElTX0FOSU1BVElORyA9IDI7XG52YXIgSVNfUEFVU0VEID0gNDtcbnZhciBoYXNBbmltYXRlZCA9ICh0YXJnZXQpID0+ICh0YXJnZXRbJFBdICYgSEFTX0FOSU1BVEVEKSA+IDA7XG52YXIgaXNBbmltYXRpbmcgPSAodGFyZ2V0KSA9PiAodGFyZ2V0WyRQXSAmIElTX0FOSU1BVElORykgPiAwO1xudmFyIGlzUGF1c2VkID0gKHRhcmdldCkgPT4gKHRhcmdldFskUF0gJiBJU19QQVVTRUQpID4gMDtcbnZhciBzZXRBY3RpdmVCaXQgPSAodGFyZ2V0LCBhY3RpdmUpID0+IGFjdGl2ZSA/IHRhcmdldFskUF0gfD0gSVNfQU5JTUFUSU5HIHwgSEFTX0FOSU1BVEVEIDogdGFyZ2V0WyRQXSAmPSB+SVNfQU5JTUFUSU5HO1xudmFyIHNldFBhdXNlZEJpdCA9ICh0YXJnZXQsIHBhdXNlZCkgPT4gcGF1c2VkID8gdGFyZ2V0WyRQXSB8PSBJU19QQVVTRUQgOiB0YXJnZXRbJFBdICY9IH5JU19QQVVTRUQ7XG5cbi8vIHNyYy9TcHJpbmdWYWx1ZS50c1xudmFyIFNwcmluZ1ZhbHVlID0gY2xhc3MgZXh0ZW5kcyBGcmFtZVZhbHVlIHtcbiAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIFRoZSBhbmltYXRpb24gc3RhdGUgKi9cbiAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oKTtcbiAgICAvKiogU29tZSBwcm9wcyBoYXZlIGN1c3RvbWl6YWJsZSBkZWZhdWx0IHZhbHVlcyAqL1xuICAgIHRoaXMuZGVmYXVsdFByb3BzID0ge307XG4gICAgLyoqIFRoZSBzdGF0ZSBmb3IgYHJ1bkFzeW5jYCBjYWxscyAqL1xuICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgIGRlbGF5ZWQ6IGZhbHNlLFxuICAgICAgcGF1c2VRdWV1ZTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIHJlc3VtZVF1ZXVlOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgICAgdGltZW91dHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KClcbiAgICB9O1xuICAgIC8qKiBUaGUgcHJvbWlzZSByZXNvbHZlcnMgb2YgcGVuZGluZyBgc3RhcnRgIGNhbGxzICovXG4gICAgdGhpcy5fcGVuZGluZ0NhbGxzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAvKiogVGhlIGNvdW50ZXIgZm9yIHRyYWNraW5nIGBzY2hlZHVsZVByb3BzYCBjYWxscyAqL1xuICAgIHRoaXMuX2xhc3RDYWxsSWQgPSAwO1xuICAgIC8qKiBUaGUgbGFzdCBgc2NoZWR1bGVQcm9wc2AgY2FsbCB0aGF0IGNoYW5nZWQgdGhlIGB0b2AgcHJvcCAqL1xuICAgIHRoaXMuX2xhc3RUb0lkID0gMDtcbiAgICB0aGlzLl9tZW1vaXplZER1cmF0aW9uID0gMDtcbiAgICBpZiAoIWlzNS51bmQoYXJnMSkgfHwgIWlzNS51bmQoYXJnMikpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gaXM1Lm9iaihhcmcxKSA/IHsgLi4uYXJnMSB9IDogeyAuLi5hcmcyLCBmcm9tOiBhcmcxIH07XG4gICAgICBpZiAoaXM1LnVuZChwcm9wcy5kZWZhdWx0KSkge1xuICAgICAgICBwcm9wcy5kZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcnQocHJvcHMpO1xuICAgIH1cbiAgfVxuICAvKiogRXF1YWxzIHRydWUgd2hlbiBub3QgYWR2YW5jaW5nIG9uIGVhY2ggZnJhbWUuICovXG4gIGdldCBpZGxlKCkge1xuICAgIHJldHVybiAhKGlzQW5pbWF0aW5nKHRoaXMpIHx8IHRoaXMuX3N0YXRlLmFzeW5jVG8pIHx8IGlzUGF1c2VkKHRoaXMpO1xuICB9XG4gIGdldCBnb2FsKCkge1xuICAgIHJldHVybiBnZXRGbHVpZFZhbHVlMih0aGlzLmFuaW1hdGlvbi50byk7XG4gIH1cbiAgZ2V0IHZlbG9jaXR5KCkge1xuICAgIGNvbnN0IG5vZGUgPSBnZXRBbmltYXRlZDIodGhpcyk7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBBbmltYXRlZFZhbHVlID8gbm9kZS5sYXN0VmVsb2NpdHkgfHwgMCA6IG5vZGUuZ2V0UGF5bG9hZCgpLm1hcCgobm9kZTIpID0+IG5vZGUyLmxhc3RWZWxvY2l0eSB8fCAwKTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGlzIHZhbHVlIGhhcyBiZWVuIGFuaW1hdGVkIGF0IGxlYXN0IG9uY2UuXG4gICAqL1xuICBnZXQgaGFzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIGhhc0FuaW1hdGVkKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoaXMgdmFsdWUgaGFzIGFuIHVuZmluaXNoZWQgYW5pbWF0aW9uLFxuICAgKiB3aGljaCBpcyBlaXRoZXIgYWN0aXZlIG9yIHBhdXNlZC5cbiAgICovXG4gIGdldCBpc0FuaW1hdGluZygpIHtcbiAgICByZXR1cm4gaXNBbmltYXRpbmcodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgYWxsIGN1cnJlbnQgYW5kIGZ1dHVyZSBhbmltYXRpb25zIGFyZSBwYXVzZWQuXG4gICAqL1xuICBnZXQgaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIGlzUGF1c2VkKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKlxuICAgKi9cbiAgZ2V0IGlzRGVsYXllZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZGVsYXllZDtcbiAgfVxuICAvKiogQWR2YW5jZSB0aGUgY3VycmVudCBhbmltYXRpb24gYnkgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzICovXG4gIGFkdmFuY2UoZHQpIHtcbiAgICBsZXQgaWRsZSA9IHRydWU7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhbmltID0gdGhpcy5hbmltYXRpb247XG4gICAgbGV0IHsgdG9WYWx1ZXMgfSA9IGFuaW07XG4gICAgY29uc3QgeyBjb25maWc6IGNvbmZpZzIgfSA9IGFuaW07XG4gICAgY29uc3QgcGF5bG9hZCA9IGdldFBheWxvYWQoYW5pbS50byk7XG4gICAgaWYgKCFwYXlsb2FkICYmIGhhc0ZsdWlkVmFsdWUoYW5pbS50bykpIHtcbiAgICAgIHRvVmFsdWVzID0gdG9BcnJheTIoZ2V0Rmx1aWRWYWx1ZTIoYW5pbS50bykpO1xuICAgIH1cbiAgICBhbmltLnZhbHVlcy5mb3JFYWNoKChub2RlMiwgaSkgPT4ge1xuICAgICAgaWYgKG5vZGUyLmRvbmUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHRvMiA9IChcbiAgICAgICAgLy8gQW5pbWF0ZWQgc3RyaW5ncyBhbHdheXMgZ28gZnJvbSAwIHRvIDEuXG4gICAgICAgIG5vZGUyLmNvbnN0cnVjdG9yID09IEFuaW1hdGVkU3RyaW5nID8gMSA6IHBheWxvYWQgPyBwYXlsb2FkW2ldLmxhc3RQb3NpdGlvbiA6IHRvVmFsdWVzW2ldXG4gICAgICApO1xuICAgICAgbGV0IGZpbmlzaGVkID0gYW5pbS5pbW1lZGlhdGU7XG4gICAgICBsZXQgcG9zaXRpb24gPSB0bzI7XG4gICAgICBpZiAoIWZpbmlzaGVkKSB7XG4gICAgICAgIHBvc2l0aW9uID0gbm9kZTIubGFzdFBvc2l0aW9uO1xuICAgICAgICBpZiAoY29uZmlnMi50ZW5zaW9uIDw9IDApIHtcbiAgICAgICAgICBub2RlMi5kb25lID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVsYXBzZWQgPSBub2RlMi5lbGFwc2VkVGltZSArPSBkdDtcbiAgICAgICAgY29uc3QgZnJvbSA9IGFuaW0uZnJvbVZhbHVlc1tpXTtcbiAgICAgICAgY29uc3QgdjAgPSBub2RlMi52MCAhPSBudWxsID8gbm9kZTIudjAgOiBub2RlMi52MCA9IGlzNS5hcnIoY29uZmlnMi52ZWxvY2l0eSkgPyBjb25maWcyLnZlbG9jaXR5W2ldIDogY29uZmlnMi52ZWxvY2l0eTtcbiAgICAgICAgbGV0IHZlbG9jaXR5O1xuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSBjb25maWcyLnByZWNpc2lvbiB8fCAoZnJvbSA9PSB0bzIgPyA1ZS0zIDogTWF0aC5taW4oMSwgTWF0aC5hYnModG8yIC0gZnJvbSkgKiAxZS0zKSk7XG4gICAgICAgIGlmICghaXM1LnVuZChjb25maWcyLmR1cmF0aW9uKSkge1xuICAgICAgICAgIGxldCBwID0gMTtcbiAgICAgICAgICBpZiAoY29uZmlnMi5kdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZW1vaXplZER1cmF0aW9uICE9PSBjb25maWcyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21lbW9pemVkRHVyYXRpb24gPSBjb25maWcyLmR1cmF0aW9uO1xuICAgICAgICAgICAgICBpZiAobm9kZTIuZHVyYXRpb25Qcm9ncmVzcyA+IDApIHtcbiAgICAgICAgICAgICAgICBub2RlMi5lbGFwc2VkVGltZSA9IGNvbmZpZzIuZHVyYXRpb24gKiBub2RlMi5kdXJhdGlvblByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGVsYXBzZWQgPSBub2RlMi5lbGFwc2VkVGltZSArPSBkdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IChjb25maWcyLnByb2dyZXNzIHx8IDApICsgZWxhcHNlZCAvIHRoaXMuX21lbW9pemVkRHVyYXRpb247XG4gICAgICAgICAgICBwID0gcCA+IDEgPyAxIDogcCA8IDAgPyAwIDogcDtcbiAgICAgICAgICAgIG5vZGUyLmR1cmF0aW9uUHJvZ3Jlc3MgPSBwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3NpdGlvbiA9IGZyb20gKyBjb25maWcyLmVhc2luZyhwKSAqICh0bzIgLSBmcm9tKTtcbiAgICAgICAgICB2ZWxvY2l0eSA9IChwb3NpdGlvbiAtIG5vZGUyLmxhc3RQb3NpdGlvbikgLyBkdDtcbiAgICAgICAgICBmaW5pc2hlZCA9IHAgPT0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcyLmRlY2F5KSB7XG4gICAgICAgICAgY29uc3QgZGVjYXkgPSBjb25maWcyLmRlY2F5ID09PSB0cnVlID8gMC45OTggOiBjb25maWcyLmRlY2F5O1xuICAgICAgICAgIGNvbnN0IGUgPSBNYXRoLmV4cCgtKDEgLSBkZWNheSkgKiBlbGFwc2VkKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGZyb20gKyB2MCAvICgxIC0gZGVjYXkpICogKDEgLSBlKTtcbiAgICAgICAgICBmaW5pc2hlZCA9IE1hdGguYWJzKG5vZGUyLmxhc3RQb3NpdGlvbiAtIHBvc2l0aW9uKSA8PSBwcmVjaXNpb247XG4gICAgICAgICAgdmVsb2NpdHkgPSB2MCAqIGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmVsb2NpdHkgPSBub2RlMi5sYXN0VmVsb2NpdHkgPT0gbnVsbCA/IHYwIDogbm9kZTIubGFzdFZlbG9jaXR5O1xuICAgICAgICAgIGNvbnN0IHJlc3RWZWxvY2l0eSA9IGNvbmZpZzIucmVzdFZlbG9jaXR5IHx8IHByZWNpc2lvbiAvIDEwO1xuICAgICAgICAgIGNvbnN0IGJvdW5jZUZhY3RvciA9IGNvbmZpZzIuY2xhbXAgPyAwIDogY29uZmlnMi5ib3VuY2U7XG4gICAgICAgICAgY29uc3QgY2FuQm91bmNlID0gIWlzNS51bmQoYm91bmNlRmFjdG9yKTtcbiAgICAgICAgICBjb25zdCBpc0dyb3dpbmcgPSBmcm9tID09IHRvMiA/IG5vZGUyLnYwID4gMCA6IGZyb20gPCB0bzI7XG4gICAgICAgICAgbGV0IGlzTW92aW5nO1xuICAgICAgICAgIGxldCBpc0JvdW5jaW5nID0gZmFsc2U7XG4gICAgICAgICAgY29uc3Qgc3RlcCA9IDE7XG4gICAgICAgICAgY29uc3QgbnVtU3RlcHMgPSBNYXRoLmNlaWwoZHQgLyBzdGVwKTtcbiAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IG51bVN0ZXBzOyArK24pIHtcbiAgICAgICAgICAgIGlzTW92aW5nID0gTWF0aC5hYnModmVsb2NpdHkpID4gcmVzdFZlbG9jaXR5O1xuICAgICAgICAgICAgaWYgKCFpc01vdmluZykge1xuICAgICAgICAgICAgICBmaW5pc2hlZCA9IE1hdGguYWJzKHRvMiAtIHBvc2l0aW9uKSA8PSBwcmVjaXNpb247XG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuQm91bmNlKSB7XG4gICAgICAgICAgICAgIGlzQm91bmNpbmcgPSBwb3NpdGlvbiA9PSB0bzIgfHwgcG9zaXRpb24gPiB0bzIgPT0gaXNHcm93aW5nO1xuICAgICAgICAgICAgICBpZiAoaXNCb3VuY2luZykge1xuICAgICAgICAgICAgICAgIHZlbG9jaXR5ID0gLXZlbG9jaXR5ICogYm91bmNlRmFjdG9yO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG8yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcHJpbmdGb3JjZSA9IC1jb25maWcyLnRlbnNpb24gKiAxZS02ICogKHBvc2l0aW9uIC0gdG8yKTtcbiAgICAgICAgICAgIGNvbnN0IGRhbXBpbmdGb3JjZSA9IC1jb25maWcyLmZyaWN0aW9uICogMWUtMyAqIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgYWNjZWxlcmF0aW9uID0gKHNwcmluZ0ZvcmNlICsgZGFtcGluZ0ZvcmNlKSAvIGNvbmZpZzIubWFzcztcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gdmVsb2NpdHkgKyBhY2NlbGVyYXRpb24gKiBzdGVwO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiArIHZlbG9jaXR5ICogc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZTIubGFzdFZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4ocG9zaXRpb24pKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBHb3QgTmFOIHdoaWxlIGFuaW1hdGluZzpgLCB0aGlzKTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXlsb2FkICYmICFwYXlsb2FkW2ldLmRvbmUpIHtcbiAgICAgICAgZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICBub2RlMi5kb25lID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlkbGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlMi5zZXRWYWx1ZShwb3NpdGlvbiwgY29uZmlnMi5yb3VuZCkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgbm9kZSA9IGdldEFuaW1hdGVkMih0aGlzKTtcbiAgICBjb25zdCBjdXJyVmFsID0gbm9kZS5nZXRWYWx1ZSgpO1xuICAgIGlmIChpZGxlKSB7XG4gICAgICBjb25zdCBmaW5hbFZhbCA9IGdldEZsdWlkVmFsdWUyKGFuaW0udG8pO1xuICAgICAgaWYgKChjdXJyVmFsICE9PSBmaW5hbFZhbCB8fCBjaGFuZ2VkKSAmJiAhY29uZmlnMi5kZWNheSkge1xuICAgICAgICBub2RlLnNldFZhbHVlKGZpbmFsVmFsKTtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UoZmluYWxWYWwpO1xuICAgICAgfSBlbHNlIGlmIChjaGFuZ2VkICYmIGNvbmZpZzIuZGVjYXkpIHtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UoY3VyclZhbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZShjdXJyVmFsKTtcbiAgICB9XG4gIH1cbiAgLyoqIFNldCB0aGUgY3VycmVudCB2YWx1ZSwgd2hpbGUgc3RvcHBpbmcgdGhlIGN1cnJlbnQgYW5pbWF0aW9uICovXG4gIHNldCh2YWx1ZSkge1xuICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4ge1xuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgdGhpcy5fZm9jdXModmFsdWUpO1xuICAgICAgdGhpcy5fc2V0KHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogRnJlZXplIHRoZSBhY3RpdmUgYW5pbWF0aW9uIGluIHRpbWUsIGFzIHdlbGwgYXMgYW55IHVwZGF0ZXMgbWVyZ2VkXG4gICAqIGJlZm9yZSBgcmVzdW1lYCBpcyBjYWxsZWQuXG4gICAqL1xuICBwYXVzZSgpIHtcbiAgICB0aGlzLl91cGRhdGUoeyBwYXVzZTogdHJ1ZSB9KTtcbiAgfVxuICAvKiogUmVzdW1lIHRoZSBhbmltYXRpb24gaWYgcGF1c2VkLiAqL1xuICByZXN1bWUoKSB7XG4gICAgdGhpcy5fdXBkYXRlKHsgcGF1c2U6IGZhbHNlIH0pO1xuICB9XG4gIC8qKiBTa2lwIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYW5pbWF0aW9uLiAqL1xuICBmaW5pc2goKSB7XG4gICAgaWYgKGlzQW5pbWF0aW5nKHRoaXMpKSB7XG4gICAgICBjb25zdCB7IHRvOiB0bzIsIGNvbmZpZzogY29uZmlnMiB9ID0gdGhpcy5hbmltYXRpb247XG4gICAgICByYWYzLmJhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgdGhpcy5fb25TdGFydCgpO1xuICAgICAgICBpZiAoIWNvbmZpZzIuZGVjYXkpIHtcbiAgICAgICAgICB0aGlzLl9zZXQodG8yLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKiBQdXNoIHByb3BzIGludG8gdGhlIHBlbmRpbmcgcXVldWUuICovXG4gIHVwZGF0ZShwcm9wcykge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5xdWV1ZSB8fCAodGhpcy5xdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHByb3BzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdGFydCh0bzIsIGFyZzIpIHtcbiAgICBsZXQgcXVldWU7XG4gICAgaWYgKCFpczUudW5kKHRvMikpIHtcbiAgICAgIHF1ZXVlID0gW2lzNS5vYmoodG8yKSA/IHRvMiA6IHsgLi4uYXJnMiwgdG86IHRvMiB9XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWUgPSB0aGlzLnF1ZXVlIHx8IFtdO1xuICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICBxdWV1ZS5tYXAoKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwID0gdGhpcy5fdXBkYXRlKHByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwO1xuICAgICAgfSlcbiAgICApLnRoZW4oKHJlc3VsdHMpID0+IGdldENvbWJpbmVkUmVzdWx0KHRoaXMsIHJlc3VsdHMpKTtcbiAgfVxuICAvKipcbiAgICogU3RvcCB0aGUgY3VycmVudCBhbmltYXRpb24sIGFuZCBjYW5jZWwgYW55IGRlbGF5ZWQgdXBkYXRlcy5cbiAgICpcbiAgICogUGFzcyBgdHJ1ZWAgdG8gY2FsbCBgb25SZXN0YCB3aXRoIGBjYW5jZWxsZWQ6IHRydWVgLlxuICAgKi9cbiAgc3RvcChjYW5jZWwpIHtcbiAgICBjb25zdCB7IHRvOiB0bzIgfSA9IHRoaXMuYW5pbWF0aW9uO1xuICAgIHRoaXMuX2ZvY3VzKHRoaXMuZ2V0KCkpO1xuICAgIHN0b3BBc3luYyh0aGlzLl9zdGF0ZSwgY2FuY2VsICYmIHRoaXMuX2xhc3RDYWxsSWQpO1xuICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gdGhpcy5fc3RvcCh0bzIsIGNhbmNlbCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKiBSZXN0YXJ0IHRoZSBhbmltYXRpb24uICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3VwZGF0ZSh7IHJlc2V0OiB0cnVlIH0pO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZXZlbnRPYnNlcnZlZChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09IFwiY2hhbmdlXCIpIHtcbiAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwicHJpb3JpdHlcIikge1xuICAgICAgdGhpcy5wcmlvcml0eSA9IGV2ZW50LnByaW9yaXR5ICsgMTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBgdG9gIGFuZCBgZnJvbWAgcmFuZ2UgZnJvbSB0aGUgZ2l2ZW4gYHByb3BzYCBvYmplY3QuXG4gICAqXG4gICAqIFRoaXMgYWxzbyBlbnN1cmVzIHRoZSBpbml0aWFsIHZhbHVlIGlzIGF2YWlsYWJsZSB0byBhbmltYXRlZCBjb21wb25lbnRzXG4gICAqIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLlxuICAgKi9cbiAgX3ByZXBhcmVOb2RlKHByb3BzKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5rZXkgfHwgXCJcIjtcbiAgICBsZXQgeyB0bzogdG8yLCBmcm9tIH0gPSBwcm9wcztcbiAgICB0bzIgPSBpczUub2JqKHRvMikgPyB0bzJba2V5XSA6IHRvMjtcbiAgICBpZiAodG8yID09IG51bGwgfHwgaXNBc3luY1RvKHRvMikpIHtcbiAgICAgIHRvMiA9IHZvaWQgMDtcbiAgICB9XG4gICAgZnJvbSA9IGlzNS5vYmooZnJvbSkgPyBmcm9tW2tleV0gOiBmcm9tO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIGZyb20gPSB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IHJhbmdlID0geyB0bzogdG8yLCBmcm9tIH07XG4gICAgaWYgKCFoYXNBbmltYXRlZCh0aGlzKSkge1xuICAgICAgaWYgKHByb3BzLnJldmVyc2UpXG4gICAgICAgIFt0bzIsIGZyb21dID0gW2Zyb20sIHRvMl07XG4gICAgICBmcm9tID0gZ2V0Rmx1aWRWYWx1ZTIoZnJvbSk7XG4gICAgICBpZiAoIWlzNS51bmQoZnJvbSkpIHtcbiAgICAgICAgdGhpcy5fc2V0KGZyb20pO1xuICAgICAgfSBlbHNlIGlmICghZ2V0QW5pbWF0ZWQyKHRoaXMpKSB7XG4gICAgICAgIHRoaXMuX3NldCh0bzIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgLyoqIEV2ZXJ5IHVwZGF0ZSBpcyBwcm9jZXNzZWQgYnkgdGhpcyBtZXRob2QgYmVmb3JlIG1lcmdpbmcuICovXG4gIF91cGRhdGUoeyAuLi5wcm9wcyB9LCBpc0xvb3ApIHtcbiAgICBjb25zdCB7IGtleSwgZGVmYXVsdFByb3BzIH0gPSB0aGlzO1xuICAgIGlmIChwcm9wcy5kZWZhdWx0KVxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZGVmYXVsdFByb3BzLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHMoXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgKHZhbHVlLCBwcm9wKSA9PiAvXm9uLy50ZXN0KHByb3ApID8gcmVzb2x2ZVByb3AodmFsdWUsIGtleSkgOiB2YWx1ZVxuICAgICAgICApXG4gICAgICApO1xuICAgIG1lcmdlQWN0aXZlRm4odGhpcywgcHJvcHMsIFwib25Qcm9wc1wiKTtcbiAgICBzZW5kRXZlbnQodGhpcywgXCJvblByb3BzXCIsIHByb3BzLCB0aGlzKTtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuX3ByZXBhcmVOb2RlKHByb3BzKTtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHRoaXMpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJDYW5ub3QgYW5pbWF0ZSBhIGBTcHJpbmdWYWx1ZWAgb2JqZWN0IHRoYXQgaXMgZnJvemVuLiBEaWQgeW91IGZvcmdldCB0byBwYXNzIHlvdXIgY29tcG9uZW50IHRvIGBhbmltYXRlZCguLi4pYCBiZWZvcmUgYW5pbWF0aW5nIGl0cyBwcm9wcz9cIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICByZXR1cm4gc2NoZWR1bGVQcm9wcygrK3RoaXMuX2xhc3RDYWxsSWQsIHtcbiAgICAgIGtleSxcbiAgICAgIHByb3BzLFxuICAgICAgZGVmYXVsdFByb3BzLFxuICAgICAgc3RhdGUsXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIHBhdXNlOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1BhdXNlZCh0aGlzKSkge1xuICAgICAgICAgICAgc2V0UGF1c2VkQml0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgZmx1c2hDYWxscyhzdGF0ZS5wYXVzZVF1ZXVlKTtcbiAgICAgICAgICAgIHNlbmRFdmVudChcbiAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgXCJvblBhdXNlXCIsXG4gICAgICAgICAgICAgIGdldEZpbmlzaGVkUmVzdWx0KHRoaXMsIGNoZWNrRmluaXNoZWQodGhpcywgdGhpcy5hbmltYXRpb24udG8pKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VtZTogKCkgPT4ge1xuICAgICAgICAgIGlmIChpc1BhdXNlZCh0aGlzKSkge1xuICAgICAgICAgICAgc2V0UGF1c2VkQml0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpc0FuaW1hdGluZyh0aGlzKSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsdXNoQ2FsbHMoc3RhdGUucmVzdW1lUXVldWUpO1xuICAgICAgICAgICAgc2VuZEV2ZW50KFxuICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICBcIm9uUmVzdW1lXCIsXG4gICAgICAgICAgICAgIGdldEZpbmlzaGVkUmVzdWx0KHRoaXMsIGNoZWNrRmluaXNoZWQodGhpcywgdGhpcy5hbmltYXRpb24udG8pKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiB0aGlzLl9tZXJnZS5iaW5kKHRoaXMsIHJhbmdlKVxuICAgICAgfVxuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmxvb3AgJiYgcmVzdWx0LmZpbmlzaGVkICYmICEoaXNMb29wICYmIHJlc3VsdC5ub29wKSkge1xuICAgICAgICBjb25zdCBuZXh0UHJvcHMgPSBjcmVhdGVMb29wVXBkYXRlKHByb3BzKTtcbiAgICAgICAgaWYgKG5leHRQcm9wcykge1xuICAgICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUobmV4dFByb3BzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuICAvKiogTWVyZ2UgcHJvcHMgaW50byB0aGUgY3VycmVudCBhbmltYXRpb24gKi9cbiAgX21lcmdlKHJhbmdlLCBwcm9wcywgcmVzb2x2ZSkge1xuICAgIGlmIChwcm9wcy5jYW5jZWwpIHtcbiAgICAgIHRoaXMuc3RvcCh0cnVlKTtcbiAgICAgIHJldHVybiByZXNvbHZlKGdldENhbmNlbGxlZFJlc3VsdCh0aGlzKSk7XG4gICAgfVxuICAgIGNvbnN0IGhhc1RvUHJvcCA9ICFpczUudW5kKHJhbmdlLnRvKTtcbiAgICBjb25zdCBoYXNGcm9tUHJvcCA9ICFpczUudW5kKHJhbmdlLmZyb20pO1xuICAgIGlmIChoYXNUb1Byb3AgfHwgaGFzRnJvbVByb3ApIHtcbiAgICAgIGlmIChwcm9wcy5jYWxsSWQgPiB0aGlzLl9sYXN0VG9JZCkge1xuICAgICAgICB0aGlzLl9sYXN0VG9JZCA9IHByb3BzLmNhbGxJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGdldENhbmNlbGxlZFJlc3VsdCh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsga2V5LCBkZWZhdWx0UHJvcHMsIGFuaW1hdGlvbjogYW5pbSB9ID0gdGhpcztcbiAgICBjb25zdCB7IHRvOiBwcmV2VG8sIGZyb206IHByZXZGcm9tIH0gPSBhbmltO1xuICAgIGxldCB7IHRvOiB0bzIgPSBwcmV2VG8sIGZyb20gPSBwcmV2RnJvbSB9ID0gcmFuZ2U7XG4gICAgaWYgKGhhc0Zyb21Qcm9wICYmICFoYXNUb1Byb3AgJiYgKCFwcm9wcy5kZWZhdWx0IHx8IGlzNS51bmQodG8yKSkpIHtcbiAgICAgIHRvMiA9IGZyb207XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXZlcnNlKVxuICAgICAgW3RvMiwgZnJvbV0gPSBbZnJvbSwgdG8yXTtcbiAgICBjb25zdCBoYXNGcm9tQ2hhbmdlZCA9ICFpc0VxdWFsKGZyb20sIHByZXZGcm9tKTtcbiAgICBpZiAoaGFzRnJvbUNoYW5nZWQpIHtcbiAgICAgIGFuaW0uZnJvbSA9IGZyb207XG4gICAgfVxuICAgIGZyb20gPSBnZXRGbHVpZFZhbHVlMihmcm9tKTtcbiAgICBjb25zdCBoYXNUb0NoYW5nZWQgPSAhaXNFcXVhbCh0bzIsIHByZXZUbyk7XG4gICAgaWYgKGhhc1RvQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fZm9jdXModG8yKTtcbiAgICB9XG4gICAgY29uc3QgaGFzQXN5bmNUbyA9IGlzQXN5bmNUbyhwcm9wcy50byk7XG4gICAgY29uc3QgeyBjb25maWc6IGNvbmZpZzIgfSA9IGFuaW07XG4gICAgY29uc3QgeyBkZWNheSwgdmVsb2NpdHkgfSA9IGNvbmZpZzI7XG4gICAgaWYgKGhhc1RvUHJvcCB8fCBoYXNGcm9tUHJvcCkge1xuICAgICAgY29uZmlnMi52ZWxvY2l0eSA9IDA7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb25maWcgJiYgIWhhc0FzeW5jVG8pIHtcbiAgICAgIG1lcmdlQ29uZmlnKFxuICAgICAgICBjb25maWcyLFxuICAgICAgICBjYWxsUHJvcChwcm9wcy5jb25maWcsIGtleSksXG4gICAgICAgIC8vIEF2b2lkIGNhbGxpbmcgdGhlIHNhbWUgXCJjb25maWdcIiBwcm9wIHR3aWNlLlxuICAgICAgICBwcm9wcy5jb25maWcgIT09IGRlZmF1bHRQcm9wcy5jb25maWcgPyBjYWxsUHJvcChkZWZhdWx0UHJvcHMuY29uZmlnLCBrZXkpIDogdm9pZCAwXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgbm9kZSA9IGdldEFuaW1hdGVkMih0aGlzKTtcbiAgICBpZiAoIW5vZGUgfHwgaXM1LnVuZCh0bzIpKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShnZXRGaW5pc2hlZFJlc3VsdCh0aGlzLCB0cnVlKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc2V0ID0gKFxuICAgICAgLy8gV2hlbiBgcmVzZXRgIGlzIHVuZGVmaW5lZCwgdGhlIGBmcm9tYCBwcm9wIGltcGxpZXMgYHJlc2V0OiB0cnVlYCxcbiAgICAgIC8vIGV4Y2VwdCBmb3IgZGVjbGFyYXRpdmUgdXBkYXRlcy4gV2hlbiBgcmVzZXRgIGlzIGRlZmluZWQsIHRoZXJlXG4gICAgICAvLyBtdXN0IGV4aXN0IGEgdmFsdWUgdG8gYW5pbWF0ZSBmcm9tLlxuICAgICAgaXM1LnVuZChwcm9wcy5yZXNldCkgPyBoYXNGcm9tUHJvcCAmJiAhcHJvcHMuZGVmYXVsdCA6ICFpczUudW5kKGZyb20pICYmIG1hdGNoUHJvcChwcm9wcy5yZXNldCwga2V5KVxuICAgICk7XG4gICAgY29uc3QgdmFsdWUgPSByZXNldCA/IGZyb20gOiB0aGlzLmdldCgpO1xuICAgIGNvbnN0IGdvYWwgPSBjb21wdXRlR29hbCh0bzIpO1xuICAgIGNvbnN0IGlzQW5pbWF0YWJsZSA9IGlzNS5udW0oZ29hbCkgfHwgaXM1LmFycihnb2FsKSB8fCBpc0FuaW1hdGVkU3RyaW5nMihnb2FsKTtcbiAgICBjb25zdCBpbW1lZGlhdGUgPSAhaGFzQXN5bmNUbyAmJiAoIWlzQW5pbWF0YWJsZSB8fCBtYXRjaFByb3AoZGVmYXVsdFByb3BzLmltbWVkaWF0ZSB8fCBwcm9wcy5pbW1lZGlhdGUsIGtleSkpO1xuICAgIGlmIChoYXNUb0NoYW5nZWQpIHtcbiAgICAgIGNvbnN0IG5vZGVUeXBlID0gZ2V0QW5pbWF0ZWRUeXBlKHRvMik7XG4gICAgICBpZiAobm9kZVR5cGUgIT09IG5vZGUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl9zZXQoZ29hbCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgYENhbm5vdCBhbmltYXRlIGJldHdlZW4gJHtub2RlLmNvbnN0cnVjdG9yLm5hbWV9IGFuZCAke25vZGVUeXBlLm5hbWV9LCBhcyB0aGUgXCJ0b1wiIHByb3Agc3VnZ2VzdHNgXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZ29hbFR5cGUgPSBub2RlLmNvbnN0cnVjdG9yO1xuICAgIGxldCBzdGFydGVkID0gaGFzRmx1aWRWYWx1ZSh0bzIpO1xuICAgIGxldCBmaW5pc2hlZCA9IGZhbHNlO1xuICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgY29uc3QgaGFzVmFsdWVDaGFuZ2VkID0gcmVzZXQgfHwgIWhhc0FuaW1hdGVkKHRoaXMpICYmIGhhc0Zyb21DaGFuZ2VkO1xuICAgICAgaWYgKGhhc1RvQ2hhbmdlZCB8fCBoYXNWYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgZmluaXNoZWQgPSBpc0VxdWFsKGNvbXB1dGVHb2FsKHZhbHVlKSwgZ29hbCk7XG4gICAgICAgIHN0YXJ0ZWQgPSAhZmluaXNoZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRXF1YWwoYW5pbS5pbW1lZGlhdGUsIGltbWVkaWF0ZSkgJiYgIWltbWVkaWF0ZSB8fCAhaXNFcXVhbChjb25maWcyLmRlY2F5LCBkZWNheSkgfHwgIWlzRXF1YWwoY29uZmlnMi52ZWxvY2l0eSwgdmVsb2NpdHkpKSB7XG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmluaXNoZWQgJiYgaXNBbmltYXRpbmcodGhpcykpIHtcbiAgICAgIGlmIChhbmltLmNoYW5nZWQgJiYgIXJlc2V0KSB7XG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghc3RhcnRlZCkge1xuICAgICAgICB0aGlzLl9zdG9wKHByZXZUbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaGFzQXN5bmNUbykge1xuICAgICAgaWYgKHN0YXJ0ZWQgfHwgaGFzRmx1aWRWYWx1ZShwcmV2VG8pKSB7XG4gICAgICAgIGFuaW0udmFsdWVzID0gbm9kZS5nZXRQYXlsb2FkKCk7XG4gICAgICAgIGFuaW0udG9WYWx1ZXMgPSBoYXNGbHVpZFZhbHVlKHRvMikgPyBudWxsIDogZ29hbFR5cGUgPT0gQW5pbWF0ZWRTdHJpbmcgPyBbMV0gOiB0b0FycmF5Mihnb2FsKTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltLmltbWVkaWF0ZSAhPSBpbW1lZGlhdGUpIHtcbiAgICAgICAgYW5pbS5pbW1lZGlhdGUgPSBpbW1lZGlhdGU7XG4gICAgICAgIGlmICghaW1tZWRpYXRlICYmICFyZXNldCkge1xuICAgICAgICAgIHRoaXMuX3NldChwcmV2VG8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICBjb25zdCB7IG9uUmVzdCB9ID0gYW5pbTtcbiAgICAgICAgZWFjaDIoQUNUSVZFX0VWRU5UUywgKHR5cGUpID0+IG1lcmdlQWN0aXZlRm4odGhpcywgcHJvcHMsIHR5cGUpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RmluaXNoZWRSZXN1bHQodGhpcywgY2hlY2tGaW5pc2hlZCh0aGlzLCBwcmV2VG8pKTtcbiAgICAgICAgZmx1c2hDYWxscyh0aGlzLl9wZW5kaW5nQ2FsbHMsIHJlc3VsdCk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDYWxscy5hZGQocmVzb2x2ZSk7XG4gICAgICAgIGlmIChhbmltLmNoYW5nZWQpXG4gICAgICAgICAgcmFmMy5iYXRjaGVkVXBkYXRlcygoKSA9PiB7XG4gICAgICAgICAgICBhbmltLmNoYW5nZWQgPSAhcmVzZXQ7XG4gICAgICAgICAgICBvblJlc3Q/LihyZXN1bHQsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgIGNhbGxQcm9wKGRlZmF1bHRQcm9wcy5vblJlc3QsIHJlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbmltLm9uU3RhcnQ/LihyZXN1bHQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIHRoaXMuX3NldCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChoYXNBc3luY1RvKSB7XG4gICAgICByZXNvbHZlKHJ1bkFzeW5jKHByb3BzLnRvLCBwcm9wcywgdGhpcy5fc3RhdGUsIHRoaXMpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgfSBlbHNlIGlmIChpc0FuaW1hdGluZyh0aGlzKSAmJiAhaGFzVG9DaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nQ2FsbHMuYWRkKHJlc29sdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGdldE5vb3BSZXN1bHQodmFsdWUpKTtcbiAgICB9XG4gIH1cbiAgLyoqIFVwZGF0ZSB0aGUgYGFuaW1hdGlvbi50b2AgdmFsdWUsIHdoaWNoIG1pZ2h0IGJlIGEgYEZsdWlkVmFsdWVgICovXG4gIF9mb2N1cyh2YWx1ZSkge1xuICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBpZiAodmFsdWUgIT09IGFuaW0udG8pIHtcbiAgICAgIGlmIChnZXRGbHVpZE9ic2VydmVycyh0aGlzKSkge1xuICAgICAgICB0aGlzLl9kZXRhY2goKTtcbiAgICAgIH1cbiAgICAgIGFuaW0udG8gPSB2YWx1ZTtcbiAgICAgIGlmIChnZXRGbHVpZE9ic2VydmVycyh0aGlzKSkge1xuICAgICAgICB0aGlzLl9hdHRhY2goKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2F0dGFjaCgpIHtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuICAgIGNvbnN0IHsgdG86IHRvMiB9ID0gdGhpcy5hbmltYXRpb247XG4gICAgaWYgKGhhc0ZsdWlkVmFsdWUodG8yKSkge1xuICAgICAgYWRkRmx1aWRPYnNlcnZlcih0bzIsIHRoaXMpO1xuICAgICAgaWYgKGlzRnJhbWVWYWx1ZSh0bzIpKSB7XG4gICAgICAgIHByaW9yaXR5ID0gdG8yLnByaW9yaXR5ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB9XG4gIF9kZXRhY2goKSB7XG4gICAgY29uc3QgeyB0bzogdG8yIH0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBpZiAoaGFzRmx1aWRWYWx1ZSh0bzIpKSB7XG4gICAgICByZW1vdmVGbHVpZE9ic2VydmVyKHRvMiwgdGhpcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGN1cnJlbnQgdmFsdWUgZnJvbSBvdXRzaWRlIHRoZSBmcmFtZWxvb3AsXG4gICAqIGFuZCByZXR1cm4gdGhlIGBBbmltYXRlZGAgbm9kZS5cbiAgICovXG4gIF9zZXQoYXJnLCBpZGxlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0Rmx1aWRWYWx1ZTIoYXJnKTtcbiAgICBpZiAoIWlzNS51bmQodmFsdWUpKSB7XG4gICAgICBjb25zdCBvbGROb2RlID0gZ2V0QW5pbWF0ZWQyKHRoaXMpO1xuICAgICAgaWYgKCFvbGROb2RlIHx8ICFpc0VxdWFsKHZhbHVlLCBvbGROb2RlLmdldFZhbHVlKCkpKSB7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlID0gZ2V0QW5pbWF0ZWRUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFvbGROb2RlIHx8IG9sZE5vZGUuY29uc3RydWN0b3IgIT0gbm9kZVR5cGUpIHtcbiAgICAgICAgICBzZXRBbmltYXRlZCh0aGlzLCBub2RlVHlwZS5jcmVhdGUodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGROb2RlLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkTm9kZSkge1xuICAgICAgICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UodmFsdWUsIGlkbGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBnZXRBbmltYXRlZDIodGhpcyk7XG4gIH1cbiAgX29uU3RhcnQoKSB7XG4gICAgY29uc3QgYW5pbSA9IHRoaXMuYW5pbWF0aW9uO1xuICAgIGlmICghYW5pbS5jaGFuZ2VkKSB7XG4gICAgICBhbmltLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgc2VuZEV2ZW50KFxuICAgICAgICB0aGlzLFxuICAgICAgICBcIm9uU3RhcnRcIixcbiAgICAgICAgZ2V0RmluaXNoZWRSZXN1bHQodGhpcywgY2hlY2tGaW5pc2hlZCh0aGlzLCBhbmltLnRvKSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIF9vbkNoYW5nZSh2YWx1ZSwgaWRsZSkge1xuICAgIGlmICghaWRsZSkge1xuICAgICAgdGhpcy5fb25TdGFydCgpO1xuICAgICAgY2FsbFByb3AodGhpcy5hbmltYXRpb24ub25DaGFuZ2UsIHZhbHVlLCB0aGlzKTtcbiAgICB9XG4gICAgY2FsbFByb3AodGhpcy5kZWZhdWx0UHJvcHMub25DaGFuZ2UsIHZhbHVlLCB0aGlzKTtcbiAgICBzdXBlci5fb25DaGFuZ2UodmFsdWUsIGlkbGUpO1xuICB9XG4gIC8vIFRoaXMgbWV0aG9kIHJlc2V0cyB0aGUgYW5pbWF0aW9uIHN0YXRlIChldmVuIGlmIGFscmVhZHkgYW5pbWF0aW5nKSB0b1xuICAvLyBlbnN1cmUgdGhlIGxhdGVzdCBmcm9tL3RvIHJhbmdlIGlzIHVzZWQsIGFuZCBpdCBhbHNvIGVuc3VyZXMgdGhpcyBzcHJpbmdcbiAgLy8gaXMgYWRkZWQgdG8gdGhlIGZyYW1lbG9vcC5cbiAgX3N0YXJ0KCkge1xuICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBnZXRBbmltYXRlZDIodGhpcykucmVzZXQoZ2V0Rmx1aWRWYWx1ZTIoYW5pbS50bykpO1xuICAgIGlmICghYW5pbS5pbW1lZGlhdGUpIHtcbiAgICAgIGFuaW0uZnJvbVZhbHVlcyA9IGFuaW0udmFsdWVzLm1hcCgobm9kZSkgPT4gbm9kZS5sYXN0UG9zaXRpb24pO1xuICAgIH1cbiAgICBpZiAoIWlzQW5pbWF0aW5nKHRoaXMpKSB7XG4gICAgICBzZXRBY3RpdmVCaXQodGhpcywgdHJ1ZSk7XG4gICAgICBpZiAoIWlzUGF1c2VkKHRoaXMpKSB7XG4gICAgICAgIHRoaXMuX3Jlc3VtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfcmVzdW1lKCkge1xuICAgIGlmIChHNS5za2lwQW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLmZpbmlzaCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZUxvb3AyLnN0YXJ0KHRoaXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhpdCB0aGUgZnJhbWVsb29wIGFuZCBub3RpZnkgYG9uUmVzdGAgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBBbHdheXMgd3JhcCBgX3N0b3BgIGNhbGxzIHdpdGggYGJhdGNoZWRVcGRhdGVzYC5cbiAgICovXG4gIF9zdG9wKGdvYWwsIGNhbmNlbCkge1xuICAgIGlmIChpc0FuaW1hdGluZyh0aGlzKSkge1xuICAgICAgc2V0QWN0aXZlQml0KHRoaXMsIGZhbHNlKTtcbiAgICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICAgIGVhY2gyKGFuaW0udmFsdWVzLCAobm9kZSkgPT4ge1xuICAgICAgICBub2RlLmRvbmUgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBpZiAoYW5pbS50b1ZhbHVlcykge1xuICAgICAgICBhbmltLm9uQ2hhbmdlID0gYW5pbS5vblBhdXNlID0gYW5pbS5vblJlc3VtZSA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGNhbGxGbHVpZE9ic2VydmVyczIodGhpcywge1xuICAgICAgICB0eXBlOiBcImlkbGVcIixcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbmNlbCA/IGdldENhbmNlbGxlZFJlc3VsdCh0aGlzLmdldCgpKSA6IGdldEZpbmlzaGVkUmVzdWx0KHRoaXMuZ2V0KCksIGNoZWNrRmluaXNoZWQodGhpcywgZ29hbCA/PyBhbmltLnRvKSk7XG4gICAgICBmbHVzaENhbGxzKHRoaXMuX3BlbmRpbmdDYWxscywgcmVzdWx0KTtcbiAgICAgIGlmIChhbmltLmNoYW5nZWQpIHtcbiAgICAgICAgYW5pbS5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHNlbmRFdmVudCh0aGlzLCBcIm9uUmVzdFwiLCByZXN1bHQsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGNoZWNrRmluaXNoZWQodGFyZ2V0LCB0bzIpIHtcbiAgY29uc3QgZ29hbCA9IGNvbXB1dGVHb2FsKHRvMik7XG4gIGNvbnN0IHZhbHVlID0gY29tcHV0ZUdvYWwodGFyZ2V0LmdldCgpKTtcbiAgcmV0dXJuIGlzRXF1YWwodmFsdWUsIGdvYWwpO1xufVxuZnVuY3Rpb24gY3JlYXRlTG9vcFVwZGF0ZShwcm9wcywgbG9vcCA9IHByb3BzLmxvb3AsIHRvMiA9IHByb3BzLnRvKSB7XG4gIGNvbnN0IGxvb3BSZXQgPSBjYWxsUHJvcChsb29wKTtcbiAgaWYgKGxvb3BSZXQpIHtcbiAgICBjb25zdCBvdmVycmlkZXMgPSBsb29wUmV0ICE9PSB0cnVlICYmIGluZmVyVG8obG9vcFJldCk7XG4gICAgY29uc3QgcmV2ZXJzZSA9IChvdmVycmlkZXMgfHwgcHJvcHMpLnJldmVyc2U7XG4gICAgY29uc3QgcmVzZXQgPSAhb3ZlcnJpZGVzIHx8IG92ZXJyaWRlcy5yZXNldDtcbiAgICByZXR1cm4gY3JlYXRlVXBkYXRlKHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgbG9vcCxcbiAgICAgIC8vIEF2b2lkIHVwZGF0aW5nIGRlZmF1bHQgcHJvcHMgd2hlbiBsb29waW5nLlxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAvLyBOZXZlciBsb29wIHRoZSBgcGF1c2VgIHByb3AuXG4gICAgICBwYXVzZTogdm9pZCAwLFxuICAgICAgLy8gRm9yIHRoZSBcInJldmVyc2VcIiBwcm9wIHRvIGxvb3AgYXMgZXhwZWN0ZWQsIHRoZSBcInRvXCIgcHJvcFxuICAgICAgLy8gbXVzdCBiZSB1bmRlZmluZWQuIFRoZSBcInJldmVyc2VcIiBwcm9wIGlzIGlnbm9yZWQgd2hlbiB0aGVcbiAgICAgIC8vIFwidG9cIiBwcm9wIGlzIGFuIGFycmF5IG9yIGZ1bmN0aW9uLlxuICAgICAgdG86ICFyZXZlcnNlIHx8IGlzQXN5bmNUbyh0bzIpID8gdG8yIDogdm9pZCAwLFxuICAgICAgLy8gSWdub3JlIHRoZSBcImZyb21cIiBwcm9wIGV4Y2VwdCBvbiByZXNldC5cbiAgICAgIGZyb206IHJlc2V0ID8gcHJvcHMuZnJvbSA6IHZvaWQgMCxcbiAgICAgIHJlc2V0LFxuICAgICAgLy8gVGhlIFwibG9vcFwiIHByb3AgY2FuIHJldHVybiBhIFwidXNlU3ByaW5nXCIgcHJvcHMgb2JqZWN0IHRvXG4gICAgICAvLyBvdmVycmlkZSBhbnkgb2YgdGhlIG9yaWdpbmFsIHByb3BzLlxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShwcm9wcykge1xuICBjb25zdCB7IHRvOiB0bzIsIGZyb20gfSA9IHByb3BzID0gaW5mZXJUbyhwcm9wcyk7XG4gIGNvbnN0IGtleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBpZiAoaXM1Lm9iaih0bzIpKVxuICAgIGZpbmREZWZpbmVkKHRvMiwga2V5cyk7XG4gIGlmIChpczUub2JqKGZyb20pKVxuICAgIGZpbmREZWZpbmVkKGZyb20sIGtleXMpO1xuICBwcm9wcy5rZXlzID0ga2V5cy5zaXplID8gQXJyYXkuZnJvbShrZXlzKSA6IG51bGw7XG4gIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIGRlY2xhcmVVcGRhdGUocHJvcHMpIHtcbiAgY29uc3QgdXBkYXRlMiA9IGNyZWF0ZVVwZGF0ZShwcm9wcyk7XG4gIGlmIChpczUudW5kKHVwZGF0ZTIuZGVmYXVsdCkpIHtcbiAgICB1cGRhdGUyLmRlZmF1bHQgPSBnZXREZWZhdWx0UHJvcHModXBkYXRlMik7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZTI7XG59XG5mdW5jdGlvbiBmaW5kRGVmaW5lZCh2YWx1ZXMsIGtleXMpIHtcbiAgZWFjaFByb3AzKHZhbHVlcywgKHZhbHVlLCBrZXkpID0+IHZhbHVlICE9IG51bGwgJiYga2V5cy5hZGQoa2V5KSk7XG59XG52YXIgQUNUSVZFX0VWRU5UUyA9IFtcbiAgXCJvblN0YXJ0XCIsXG4gIFwib25SZXN0XCIsXG4gIFwib25DaGFuZ2VcIixcbiAgXCJvblBhdXNlXCIsXG4gIFwib25SZXN1bWVcIlxuXTtcbmZ1bmN0aW9uIG1lcmdlQWN0aXZlRm4odGFyZ2V0LCBwcm9wcywgdHlwZSkge1xuICB0YXJnZXQuYW5pbWF0aW9uW3R5cGVdID0gcHJvcHNbdHlwZV0gIT09IGdldERlZmF1bHRQcm9wKHByb3BzLCB0eXBlKSA/IHJlc29sdmVQcm9wKHByb3BzW3R5cGVdLCB0YXJnZXQua2V5KSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHNlbmRFdmVudCh0YXJnZXQsIHR5cGUsIC4uLmFyZ3MpIHtcbiAgdGFyZ2V0LmFuaW1hdGlvblt0eXBlXT8uKC4uLmFyZ3MpO1xuICB0YXJnZXQuZGVmYXVsdFByb3BzW3R5cGVdPy4oLi4uYXJncyk7XG59XG5cbi8vIHNyYy9Db250cm9sbGVyLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczYsXG4gIHJhZiBhcyByYWY0LFxuICBlYWNoIGFzIGVhY2gzLFxuICBub29wLFxuICBmbHVzaCBhcyBmbHVzaDIsXG4gIHRvQXJyYXkgYXMgdG9BcnJheTMsXG4gIGVhY2hQcm9wIGFzIGVhY2hQcm9wNCxcbiAgZmx1c2hDYWxscyBhcyBmbHVzaENhbGxzMixcbiAgYWRkRmx1aWRPYnNlcnZlciBhcyBhZGRGbHVpZE9ic2VydmVyMlxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciBCQVRDSEVEX0VWRU5UUyA9IFtcIm9uU3RhcnRcIiwgXCJvbkNoYW5nZVwiLCBcIm9uUmVzdFwiXTtcbnZhciBuZXh0SWQyID0gMTtcbnZhciBDb250cm9sbGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihwcm9wcywgZmx1c2gzKSB7XG4gICAgdGhpcy5pZCA9IG5leHRJZDIrKztcbiAgICAvKiogVGhlIGFuaW1hdGVkIHZhbHVlcyAqL1xuICAgIHRoaXMuc3ByaW5ncyA9IHt9O1xuICAgIC8qKiBUaGUgcXVldWUgb2YgcHJvcHMgcGFzc2VkIHRvIHRoZSBgdXBkYXRlYCBtZXRob2QuICovXG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIC8qKiBUaGUgY291bnRlciBmb3IgdHJhY2tpbmcgYHNjaGVkdWxlUHJvcHNgIGNhbGxzICovXG4gICAgdGhpcy5fbGFzdEFzeW5jSWQgPSAwO1xuICAgIC8qKiBUaGUgdmFsdWVzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZCAqL1xuICAgIHRoaXMuX2FjdGl2ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgLyoqIFRoZSB2YWx1ZXMgdGhhdCBjaGFuZ2VkIHJlY2VudGx5ICovXG4gICAgdGhpcy5fY2hhbmdlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgLyoqIEVxdWFscyBmYWxzZSB3aGVuIGBvblN0YXJ0YCBsaXN0ZW5lcnMgY2FuIGJlIGNhbGxlZCAqL1xuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAvKiogU3RhdGUgdXNlZCBieSB0aGUgYHJ1bkFzeW5jYCBmdW5jdGlvbiAqL1xuICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgIHBhdXNlUXVldWU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgICByZXN1bWVRdWV1ZTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIHRpbWVvdXRzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpXG4gICAgfTtcbiAgICAvKiogVGhlIGV2ZW50IHF1ZXVlcyB0aGF0IGFyZSBmbHVzaGVkIG9uY2UgcGVyIGZyYW1lIG1heGltdW0gKi9cbiAgICB0aGlzLl9ldmVudHMgPSB7XG4gICAgICBvblN0YXJ0OiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICAgICAgb25DaGFuZ2U6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgICBvblJlc3Q6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbiAgICB9O1xuICAgIHRoaXMuX29uRnJhbWUgPSB0aGlzLl9vbkZyYW1lLmJpbmQodGhpcyk7XG4gICAgaWYgKGZsdXNoMykge1xuICAgICAgdGhpcy5fZmx1c2ggPSBmbHVzaDM7XG4gICAgfVxuICAgIGlmIChwcm9wcykge1xuICAgICAgdGhpcy5zdGFydCh7IGRlZmF1bHQ6IHRydWUsIC4uLnByb3BzIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXF1YWxzIGB0cnVlYCB3aGVuIG5vIHNwcmluZyB2YWx1ZXMgYXJlIGluIHRoZSBmcmFtZWxvb3AsIGFuZFxuICAgKiBubyBhc3luYyBhbmltYXRpb24gaXMgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldCBpZGxlKCkge1xuICAgIHJldHVybiAhdGhpcy5fc3RhdGUuYXN5bmNUbyAmJiBPYmplY3QudmFsdWVzKHRoaXMuc3ByaW5ncykuZXZlcnkoKHNwcmluZykgPT4ge1xuICAgICAgcmV0dXJuIHNwcmluZy5pZGxlICYmICFzcHJpbmcuaXNEZWxheWVkICYmICFzcHJpbmcuaXNQYXVzZWQ7XG4gICAgfSk7XG4gIH1cbiAgZ2V0IGl0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW07XG4gIH1cbiAgc2V0IGl0ZW0oaXRlbSkge1xuICAgIHRoaXMuX2l0ZW0gPSBpdGVtO1xuICB9XG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIG91ciBzcHJpbmdzICovXG4gIGdldCgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICB0aGlzLmVhY2goKHNwcmluZywga2V5KSA9PiB2YWx1ZXNba2V5XSA9IHNwcmluZy5nZXQoKSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICAvKiogU2V0IHRoZSBjdXJyZW50IHZhbHVlcyB3aXRob3V0IGFuaW1hdGluZy4gKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNba2V5XTtcbiAgICAgIGlmICghaXM2LnVuZCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5zcHJpbmdzW2tleV0uc2V0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqIFB1c2ggYW4gdXBkYXRlIG9udG8gdGhlIHF1ZXVlIG9mIGVhY2ggdmFsdWUuICovXG4gIHVwZGF0ZShwcm9wcykge1xuICAgIGlmIChwcm9wcykge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGNyZWF0ZVVwZGF0ZShwcm9wcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU3RhcnQgdGhlIHF1ZXVlZCBhbmltYXRpb25zIGZvciBldmVyeSBzcHJpbmcsIGFuZCByZXNvbHZlIHRoZSByZXR1cm5lZFxuICAgKiBwcm9taXNlIG9uY2UgYWxsIHF1ZXVlZCBhbmltYXRpb25zIGhhdmUgZmluaXNoZWQgb3IgYmVlbiBjYW5jZWxsZWQuXG4gICAqXG4gICAqIFdoZW4geW91IHBhc3MgYSBxdWV1ZSAoaW5zdGVhZCBvZiBub3RoaW5nKSwgdGhhdCBxdWV1ZSBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICogdGhlIHF1ZXVlZCBhbmltYXRpb25zIGFkZGVkIHdpdGggdGhlIGB1cGRhdGVgIG1ldGhvZCwgd2hpY2ggYXJlIGxlZnQgYWxvbmUuXG4gICAqL1xuICBzdGFydChwcm9wcykge1xuICAgIGxldCB7IHF1ZXVlIH0gPSB0aGlzO1xuICAgIGlmIChwcm9wcykge1xuICAgICAgcXVldWUgPSB0b0FycmF5Myhwcm9wcykubWFwKGNyZWF0ZVVwZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2ZsdXNoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmx1c2godGhpcywgcXVldWUpO1xuICAgIH1cbiAgICBwcmVwYXJlS2V5cyh0aGlzLCBxdWV1ZSk7XG4gICAgcmV0dXJuIGZsdXNoVXBkYXRlUXVldWUodGhpcywgcXVldWUpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RvcChhcmcsIGtleXMpIHtcbiAgICBpZiAoYXJnICE9PSAhIWFyZykge1xuICAgICAga2V5cyA9IGFyZztcbiAgICB9XG4gICAgaWYgKGtleXMpIHtcbiAgICAgIGNvbnN0IHNwcmluZ3MgPSB0aGlzLnNwcmluZ3M7XG4gICAgICBlYWNoMyh0b0FycmF5MyhrZXlzKSwgKGtleSkgPT4gc3ByaW5nc1trZXldLnN0b3AoISFhcmcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcEFzeW5jKHRoaXMuX3N0YXRlLCB0aGlzLl9sYXN0QXN5bmNJZCk7XG4gICAgICB0aGlzLmVhY2goKHNwcmluZykgPT4gc3ByaW5nLnN0b3AoISFhcmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIEZyZWV6ZSB0aGUgYWN0aXZlIGFuaW1hdGlvbiBpbiB0aW1lICovXG4gIHBhdXNlKGtleXMpIHtcbiAgICBpZiAoaXM2LnVuZChrZXlzKSkge1xuICAgICAgdGhpcy5zdGFydCh7IHBhdXNlOiB0cnVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzcHJpbmdzID0gdGhpcy5zcHJpbmdzO1xuICAgICAgZWFjaDModG9BcnJheTMoa2V5cyksIChrZXkpID0+IHNwcmluZ3Nba2V5XS5wYXVzZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIFJlc3VtZSB0aGUgYW5pbWF0aW9uIGlmIHBhdXNlZC4gKi9cbiAgcmVzdW1lKGtleXMpIHtcbiAgICBpZiAoaXM2LnVuZChrZXlzKSkge1xuICAgICAgdGhpcy5zdGFydCh7IHBhdXNlOiBmYWxzZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ByaW5ncyA9IHRoaXMuc3ByaW5ncztcbiAgICAgIGVhY2gzKHRvQXJyYXkzKGtleXMpLCAoa2V5KSA9PiBzcHJpbmdzW2tleV0ucmVzdW1lKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogQ2FsbCBhIGZ1bmN0aW9uIG9uY2UgcGVyIHNwcmluZyB2YWx1ZSAqL1xuICBlYWNoKGl0ZXJhdG9yKSB7XG4gICAgZWFjaFByb3A0KHRoaXMuc3ByaW5ncywgaXRlcmF0b3IpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgQ2FsbGVkIGF0IHRoZSBlbmQgb2YgZXZlcnkgYW5pbWF0aW9uIGZyYW1lICovXG4gIF9vbkZyYW1lKCkge1xuICAgIGNvbnN0IHsgb25TdGFydCwgb25DaGFuZ2UsIG9uUmVzdCB9ID0gdGhpcy5fZXZlbnRzO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZS5zaXplID4gMDtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5fY2hhbmdlZC5zaXplID4gMDtcbiAgICBpZiAoYWN0aXZlICYmICF0aGlzLl9zdGFydGVkIHx8IGNoYW5nZWQgJiYgIXRoaXMuX3N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgZmx1c2gyKG9uU3RhcnQsIChbb25TdGFydDIsIHJlc3VsdF0pID0+IHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgb25TdGFydDIocmVzdWx0LCB0aGlzLCB0aGlzLl9pdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBpZGxlID0gIWFjdGl2ZSAmJiB0aGlzLl9zdGFydGVkO1xuICAgIGNvbnN0IHZhbHVlcyA9IGNoYW5nZWQgfHwgaWRsZSAmJiBvblJlc3Quc2l6ZSA/IHRoaXMuZ2V0KCkgOiBudWxsO1xuICAgIGlmIChjaGFuZ2VkICYmIG9uQ2hhbmdlLnNpemUpIHtcbiAgICAgIGZsdXNoMihvbkNoYW5nZSwgKFtvbkNoYW5nZTIsIHJlc3VsdF0pID0+IHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gdmFsdWVzO1xuICAgICAgICBvbkNoYW5nZTIocmVzdWx0LCB0aGlzLCB0aGlzLl9pdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaWRsZSkge1xuICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgZmx1c2gyKG9uUmVzdCwgKFtvblJlc3QyLCByZXN1bHRdKSA9PiB7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgb25SZXN0MihyZXN1bHQsIHRoaXMsIHRoaXMuX2l0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZXZlbnRPYnNlcnZlZChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09IFwiY2hhbmdlXCIpIHtcbiAgICAgIHRoaXMuX2NoYW5nZWQuYWRkKGV2ZW50LnBhcmVudCk7XG4gICAgICBpZiAoIWV2ZW50LmlkbGUpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlLmFkZChldmVudC5wYXJlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PSBcImlkbGVcIikge1xuICAgICAgdGhpcy5fYWN0aXZlLmRlbGV0ZShldmVudC5wYXJlbnQpO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuO1xuICAgIHJhZjQub25GcmFtZSh0aGlzLl9vbkZyYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZsdXNoVXBkYXRlUXVldWUoY3RybCwgcXVldWUpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHF1ZXVlLm1hcCgocHJvcHMpID0+IGZsdXNoVXBkYXRlKGN0cmwsIHByb3BzKSkpLnRoZW4oXG4gICAgKHJlc3VsdHMpID0+IGdldENvbWJpbmVkUmVzdWx0KGN0cmwsIHJlc3VsdHMpXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiBmbHVzaFVwZGF0ZShjdHJsLCBwcm9wcywgaXNMb29wKSB7XG4gIGNvbnN0IHsga2V5cywgdG86IHRvMiwgZnJvbSwgbG9vcCwgb25SZXN0LCBvblJlc29sdmUgfSA9IHByb3BzO1xuICBjb25zdCBkZWZhdWx0czIgPSBpczYub2JqKHByb3BzLmRlZmF1bHQpICYmIHByb3BzLmRlZmF1bHQ7XG4gIGlmIChsb29wKSB7XG4gICAgcHJvcHMubG9vcCA9IGZhbHNlO1xuICB9XG4gIGlmICh0bzIgPT09IGZhbHNlKVxuICAgIHByb3BzLnRvID0gbnVsbDtcbiAgaWYgKGZyb20gPT09IGZhbHNlKVxuICAgIHByb3BzLmZyb20gPSBudWxsO1xuICBjb25zdCBhc3luY1RvID0gaXM2LmFycih0bzIpIHx8IGlzNi5mdW4odG8yKSA/IHRvMiA6IHZvaWQgMDtcbiAgaWYgKGFzeW5jVG8pIHtcbiAgICBwcm9wcy50byA9IHZvaWQgMDtcbiAgICBwcm9wcy5vblJlc3QgPSB2b2lkIDA7XG4gICAgaWYgKGRlZmF1bHRzMikge1xuICAgICAgZGVmYXVsdHMyLm9uUmVzdCA9IHZvaWQgMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZWFjaDMoQkFUQ0hFRF9FVkVOVFMsIChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBwcm9wc1trZXldO1xuICAgICAgaWYgKGlzNi5mdW4oaGFuZGxlcikpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSBjdHJsW1wiX2V2ZW50c1wiXVtrZXldO1xuICAgICAgICBwcm9wc1trZXldID0gKHsgZmluaXNoZWQsIGNhbmNlbGxlZCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0MiA9IHF1ZXVlLmdldChoYW5kbGVyKTtcbiAgICAgICAgICBpZiAocmVzdWx0Mikge1xuICAgICAgICAgICAgaWYgKCFmaW5pc2hlZClcbiAgICAgICAgICAgICAgcmVzdWx0Mi5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbmNlbGxlZClcbiAgICAgICAgICAgICAgcmVzdWx0Mi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWV1ZS5zZXQoaGFuZGxlciwge1xuICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgZmluaXNoZWQ6IGZpbmlzaGVkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICBjYW5jZWxsZWQ6IGNhbmNlbGxlZCB8fCBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZGVmYXVsdHMyKSB7XG4gICAgICAgICAgZGVmYXVsdHMyW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgc3RhdGUgPSBjdHJsW1wiX3N0YXRlXCJdO1xuICBpZiAocHJvcHMucGF1c2UgPT09ICFzdGF0ZS5wYXVzZWQpIHtcbiAgICBzdGF0ZS5wYXVzZWQgPSBwcm9wcy5wYXVzZTtcbiAgICBmbHVzaENhbGxzMihwcm9wcy5wYXVzZSA/IHN0YXRlLnBhdXNlUXVldWUgOiBzdGF0ZS5yZXN1bWVRdWV1ZSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUucGF1c2VkKSB7XG4gICAgcHJvcHMucGF1c2UgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHByb21pc2VzID0gKGtleXMgfHwgT2JqZWN0LmtleXMoY3RybC5zcHJpbmdzKSkubWFwKFxuICAgIChrZXkpID0+IGN0cmwuc3ByaW5nc1trZXldLnN0YXJ0KHByb3BzKVxuICApO1xuICBjb25zdCBjYW5jZWwgPSBwcm9wcy5jYW5jZWwgPT09IHRydWUgfHwgZ2V0RGVmYXVsdFByb3AocHJvcHMsIFwiY2FuY2VsXCIpID09PSB0cnVlO1xuICBpZiAoYXN5bmNUbyB8fCBjYW5jZWwgJiYgc3RhdGUuYXN5bmNJZCkge1xuICAgIHByb21pc2VzLnB1c2goXG4gICAgICBzY2hlZHVsZVByb3BzKCsrY3RybFtcIl9sYXN0QXN5bmNJZFwiXSwge1xuICAgICAgICBwcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICBwYXVzZTogbm9vcCxcbiAgICAgICAgICByZXN1bWU6IG5vb3AsXG4gICAgICAgICAgc3RhcnQocHJvcHMyLCByZXNvbHZlKSB7XG4gICAgICAgICAgICBpZiAoY2FuY2VsKSB7XG4gICAgICAgICAgICAgIHN0b3BBc3luYyhzdGF0ZSwgY3RybFtcIl9sYXN0QXN5bmNJZFwiXSk7XG4gICAgICAgICAgICAgIHJlc29sdmUoZ2V0Q2FuY2VsbGVkUmVzdWx0KGN0cmwpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb3BzMi5vblJlc3QgPSBvblJlc3Q7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgcnVuQXN5bmMoXG4gICAgICAgICAgICAgICAgICBhc3luY1RvLFxuICAgICAgICAgICAgICAgICAgcHJvcHMyLFxuICAgICAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgICAgICBjdHJsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGlmIChzdGF0ZS5wYXVzZWQpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzdW1lKSA9PiB7XG4gICAgICBzdGF0ZS5yZXN1bWVRdWV1ZS5hZGQocmVzdW1lKTtcbiAgICB9KTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBnZXRDb21iaW5lZFJlc3VsdChjdHJsLCBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcykpO1xuICBpZiAobG9vcCAmJiByZXN1bHQuZmluaXNoZWQgJiYgIShpc0xvb3AgJiYgcmVzdWx0Lm5vb3ApKSB7XG4gICAgY29uc3QgbmV4dFByb3BzID0gY3JlYXRlTG9vcFVwZGF0ZShwcm9wcywgbG9vcCwgdG8yKTtcbiAgICBpZiAobmV4dFByb3BzKSB7XG4gICAgICBwcmVwYXJlS2V5cyhjdHJsLCBbbmV4dFByb3BzXSk7XG4gICAgICByZXR1cm4gZmx1c2hVcGRhdGUoY3RybCwgbmV4dFByb3BzLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9uUmVzb2x2ZSkge1xuICAgIHJhZjQuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gb25SZXNvbHZlKHJlc3VsdCwgY3RybCwgY3RybC5pdGVtKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFNwcmluZ3MoY3RybCwgcHJvcHMpIHtcbiAgY29uc3Qgc3ByaW5ncyA9IHsgLi4uY3RybC5zcHJpbmdzIH07XG4gIGlmIChwcm9wcykge1xuICAgIGVhY2gzKHRvQXJyYXkzKHByb3BzKSwgKHByb3BzMikgPT4ge1xuICAgICAgaWYgKGlzNi51bmQocHJvcHMyLmtleXMpKSB7XG4gICAgICAgIHByb3BzMiA9IGNyZWF0ZVVwZGF0ZShwcm9wczIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpczYub2JqKHByb3BzMi50bykpIHtcbiAgICAgICAgcHJvcHMyID0geyAuLi5wcm9wczIsIHRvOiB2b2lkIDAgfTtcbiAgICAgIH1cbiAgICAgIHByZXBhcmVTcHJpbmdzKHNwcmluZ3MsIHByb3BzMiwgKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY3JlYXRlU3ByaW5nKGtleSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBzZXRTcHJpbmdzKGN0cmwsIHNwcmluZ3MpO1xuICByZXR1cm4gc3ByaW5ncztcbn1cbmZ1bmN0aW9uIHNldFNwcmluZ3MoY3RybCwgc3ByaW5ncykge1xuICBlYWNoUHJvcDQoc3ByaW5ncywgKHNwcmluZywga2V5KSA9PiB7XG4gICAgaWYgKCFjdHJsLnNwcmluZ3Nba2V5XSkge1xuICAgICAgY3RybC5zcHJpbmdzW2tleV0gPSBzcHJpbmc7XG4gICAgICBhZGRGbHVpZE9ic2VydmVyMihzcHJpbmcsIGN0cmwpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTcHJpbmcoa2V5LCBvYnNlcnZlcikge1xuICBjb25zdCBzcHJpbmcgPSBuZXcgU3ByaW5nVmFsdWUoKTtcbiAgc3ByaW5nLmtleSA9IGtleTtcbiAgaWYgKG9ic2VydmVyKSB7XG4gICAgYWRkRmx1aWRPYnNlcnZlcjIoc3ByaW5nLCBvYnNlcnZlcik7XG4gIH1cbiAgcmV0dXJuIHNwcmluZztcbn1cbmZ1bmN0aW9uIHByZXBhcmVTcHJpbmdzKHNwcmluZ3MsIHByb3BzLCBjcmVhdGUpIHtcbiAgaWYgKHByb3BzLmtleXMpIHtcbiAgICBlYWNoMyhwcm9wcy5rZXlzLCAoa2V5KSA9PiB7XG4gICAgICBjb25zdCBzcHJpbmcgPSBzcHJpbmdzW2tleV0gfHwgKHNwcmluZ3Nba2V5XSA9IGNyZWF0ZShrZXkpKTtcbiAgICAgIHNwcmluZ1tcIl9wcmVwYXJlTm9kZVwiXShwcm9wcyk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVLZXlzKGN0cmwsIHF1ZXVlKSB7XG4gIGVhY2gzKHF1ZXVlLCAocHJvcHMpID0+IHtcbiAgICBwcmVwYXJlU3ByaW5ncyhjdHJsLnNwcmluZ3MsIHByb3BzLCAoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gY3JlYXRlU3ByaW5nKGtleSwgY3RybCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBzcmMvU3ByaW5nQ29udGV4dC50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlTWVtb09uZSB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xudmFyIFNwcmluZ0NvbnRleHQgPSAoe1xuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgaW5oZXJpdGVkID0gdXNlQ29udGV4dChjdHgpO1xuICBjb25zdCBwYXVzZSA9IHByb3BzLnBhdXNlIHx8ICEhaW5oZXJpdGVkLnBhdXNlLCBpbW1lZGlhdGUgPSBwcm9wcy5pbW1lZGlhdGUgfHwgISFpbmhlcml0ZWQuaW1tZWRpYXRlO1xuICBwcm9wcyA9IHVzZU1lbW9PbmUoKCkgPT4gKHsgcGF1c2UsIGltbWVkaWF0ZSB9KSwgW3BhdXNlLCBpbW1lZGlhdGVdKTtcbiAgY29uc3QgeyBQcm92aWRlciB9ID0gY3R4O1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzIH0sIGNoaWxkcmVuKTtcbn07XG52YXIgY3R4ID0gbWFrZUNvbnRleHQoU3ByaW5nQ29udGV4dCwge30pO1xuU3ByaW5nQ29udGV4dC5Qcm92aWRlciA9IGN0eC5Qcm92aWRlcjtcblNwcmluZ0NvbnRleHQuQ29uc3VtZXIgPSBjdHguQ29uc3VtZXI7XG5mdW5jdGlvbiBtYWtlQ29udGV4dCh0YXJnZXQsIGluaXQpIHtcbiAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIFJlYWN0LmNyZWF0ZUNvbnRleHQoaW5pdCkpO1xuICB0YXJnZXQuUHJvdmlkZXIuX2NvbnRleHQgPSB0YXJnZXQ7XG4gIHRhcmdldC5Db25zdW1lci5fY29udGV4dCA9IHRhcmdldDtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLy8gc3JjL1NwcmluZ1JlZi50c1xuaW1wb3J0IHsgZWFjaCBhcyBlYWNoNCwgaXMgYXMgaXM3LCBkZXByZWNhdGVEaXJlY3RDYWxsIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgU3ByaW5nUmVmID0gKCkgPT4ge1xuICBjb25zdCBjdXJyZW50ID0gW107XG4gIGNvbnN0IFNwcmluZ1JlZjIgPSBmdW5jdGlvbihwcm9wcykge1xuICAgIGRlcHJlY2F0ZURpcmVjdENhbGwoKTtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIGlmIChpczcudW5kKHByb3BzKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goY3RybC5zdGFydCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZTIgPSBfZ2V0UHJvcHMocHJvcHMsIGN0cmwsIGkpO1xuICAgICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjdHJsLnN0YXJ0KHVwZGF0ZTIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuICBTcHJpbmdSZWYyLmN1cnJlbnQgPSBjdXJyZW50O1xuICBTcHJpbmdSZWYyLmFkZCA9IGZ1bmN0aW9uKGN0cmwpIHtcbiAgICBpZiAoIWN1cnJlbnQuaW5jbHVkZXMoY3RybCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaChjdHJsKTtcbiAgICB9XG4gIH07XG4gIFNwcmluZ1JlZjIuZGVsZXRlID0gZnVuY3Rpb24oY3RybCkge1xuICAgIGNvbnN0IGkgPSBjdXJyZW50LmluZGV4T2YoY3RybCk7XG4gICAgaWYgKH5pKVxuICAgICAgY3VycmVudC5zcGxpY2UoaSwgMSk7XG4gIH07XG4gIFNwcmluZ1JlZjIucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5wYXVzZSguLi5hcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgU3ByaW5nUmVmMi5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5yZXN1bWUoLi4uYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIFNwcmluZ1JlZjIuc2V0ID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZTIgPSBpczcuZnVuKHZhbHVlcykgPyB2YWx1ZXMoaSwgY3RybCkgOiB2YWx1ZXM7XG4gICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICBjdHJsLnNldCh1cGRhdGUyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgU3ByaW5nUmVmMi5zdGFydCA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGVhY2g0KGN1cnJlbnQsIChjdHJsLCBpKSA9PiB7XG4gICAgICBpZiAoaXM3LnVuZChwcm9wcykpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGN0cmwuc3RhcnQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1cGRhdGUyID0gdGhpcy5fZ2V0UHJvcHMocHJvcHMsIGN0cmwsIGkpO1xuICAgICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjdHJsLnN0YXJ0KHVwZGF0ZTIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuICBTcHJpbmdSZWYyLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5zdG9wKC4uLmFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBTcHJpbmdSZWYyLnVwZGF0ZSA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IGN0cmwudXBkYXRlKHRoaXMuX2dldFByb3BzKHByb3BzLCBjdHJsLCBpKSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBjb25zdCBfZ2V0UHJvcHMgPSBmdW5jdGlvbihhcmcsIGN0cmwsIGluZGV4KSB7XG4gICAgcmV0dXJuIGlzNy5mdW4oYXJnKSA/IGFyZyhpbmRleCwgY3RybCkgOiBhcmc7XG4gIH07XG4gIFNwcmluZ1JlZjIuX2dldFByb3BzID0gX2dldFByb3BzO1xuICByZXR1cm4gU3ByaW5nUmVmMjtcbn07XG5cbi8vIHNyYy9ob29rcy91c2VTcHJpbmdzLnRzXG5mdW5jdGlvbiB1c2VTcHJpbmdzKGxlbmd0aCwgcHJvcHMsIGRlcHMpIHtcbiAgY29uc3QgcHJvcHNGbiA9IGlzOC5mdW4ocHJvcHMpICYmIHByb3BzO1xuICBpZiAocHJvcHNGbiAmJiAhZGVwcylcbiAgICBkZXBzID0gW107XG4gIGNvbnN0IHJlZiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gcHJvcHNGbiB8fCBhcmd1bWVudHMubGVuZ3RoID09IDMgPyBTcHJpbmdSZWYoKSA6IHZvaWQgMCxcbiAgICBbXVxuICApO1xuICBjb25zdCBsYXlvdXRJZCA9IHVzZVJlZigwKTtcbiAgY29uc3QgZm9yY2VVcGRhdGUgPSB1c2VGb3JjZVVwZGF0ZSgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGN0cmxzOiBbXSxcbiAgICAgIHF1ZXVlOiBbXSxcbiAgICAgIGZsdXNoKGN0cmwsIHVwZGF0ZXMyKSB7XG4gICAgICAgIGNvbnN0IHNwcmluZ3MyID0gZ2V0U3ByaW5ncyhjdHJsLCB1cGRhdGVzMik7XG4gICAgICAgIGNvbnN0IGNhbkZsdXNoU3luYyA9IGxheW91dElkLmN1cnJlbnQgPiAwICYmICFzdGF0ZS5xdWV1ZS5sZW5ndGggJiYgIU9iamVjdC5rZXlzKHNwcmluZ3MyKS5zb21lKChrZXkpID0+ICFjdHJsLnNwcmluZ3Nba2V5XSk7XG4gICAgICAgIHJldHVybiBjYW5GbHVzaFN5bmMgPyBmbHVzaFVwZGF0ZVF1ZXVlKGN0cmwsIHVwZGF0ZXMyKSA6IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgc2V0U3ByaW5ncyhjdHJsLCBzcHJpbmdzMik7XG4gICAgICAgICAgc3RhdGUucXVldWUucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGZsdXNoVXBkYXRlUXVldWUoY3RybCwgdXBkYXRlczIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBbXVxuICApO1xuICBjb25zdCBjdHJscyA9IHVzZVJlZihbLi4uc3RhdGUuY3RybHNdKTtcbiAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICBjb25zdCBwcmV2TGVuZ3RoID0gdXNlUHJldihsZW5ndGgpIHx8IDA7XG4gIHVzZU1lbW8oKCkgPT4ge1xuICAgIGVhY2g1KGN0cmxzLmN1cnJlbnQuc2xpY2UobGVuZ3RoLCBwcmV2TGVuZ3RoKSwgKGN0cmwpID0+IHtcbiAgICAgIGRldGFjaFJlZnMoY3RybCwgcmVmKTtcbiAgICAgIGN0cmwuc3RvcCh0cnVlKTtcbiAgICB9KTtcbiAgICBjdHJscy5jdXJyZW50Lmxlbmd0aCA9IGxlbmd0aDtcbiAgICBkZWNsYXJlVXBkYXRlcyhwcmV2TGVuZ3RoLCBsZW5ndGgpO1xuICB9LCBbbGVuZ3RoXSk7XG4gIHVzZU1lbW8oKCkgPT4ge1xuICAgIGRlY2xhcmVVcGRhdGVzKDAsIE1hdGgubWluKHByZXZMZW5ndGgsIGxlbmd0aCkpO1xuICB9LCBkZXBzKTtcbiAgZnVuY3Rpb24gZGVjbGFyZVVwZGF0ZXMoc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGNvbnN0IGN0cmwgPSBjdHJscy5jdXJyZW50W2ldIHx8IChjdHJscy5jdXJyZW50W2ldID0gbmV3IENvbnRyb2xsZXIobnVsbCwgc3RhdGUuZmx1c2gpKTtcbiAgICAgIGNvbnN0IHVwZGF0ZTIgPSBwcm9wc0ZuID8gcHJvcHNGbihpLCBjdHJsKSA6IHByb3BzW2ldO1xuICAgICAgaWYgKHVwZGF0ZTIpIHtcbiAgICAgICAgdXBkYXRlc1tpXSA9IGRlY2xhcmVVcGRhdGUodXBkYXRlMik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHNwcmluZ3MgPSBjdHJscy5jdXJyZW50Lm1hcCgoY3RybCwgaSkgPT4gZ2V0U3ByaW5ncyhjdHJsLCB1cGRhdGVzW2ldKSk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0MihTcHJpbmdDb250ZXh0KTtcbiAgY29uc3QgcHJldkNvbnRleHQgPSB1c2VQcmV2KGNvbnRleHQpO1xuICBjb25zdCBoYXNDb250ZXh0ID0gY29udGV4dCAhPT0gcHJldkNvbnRleHQgJiYgaGFzUHJvcHMoY29udGV4dCk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QyKCgpID0+IHtcbiAgICBsYXlvdXRJZC5jdXJyZW50Kys7XG4gICAgc3RhdGUuY3RybHMgPSBjdHJscy5jdXJyZW50O1xuICAgIGNvbnN0IHsgcXVldWUgfSA9IHN0YXRlO1xuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLnF1ZXVlID0gW107XG4gICAgICBlYWNoNShxdWV1ZSwgKGNiKSA9PiBjYigpKTtcbiAgICB9XG4gICAgZWFjaDUoY3RybHMuY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIHJlZj8uYWRkKGN0cmwpO1xuICAgICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgICAgY3RybC5zdGFydCh7IGRlZmF1bHQ6IGNvbnRleHQgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCB1cGRhdGUyID0gdXBkYXRlc1tpXTtcbiAgICAgIGlmICh1cGRhdGUyKSB7XG4gICAgICAgIHJlcGxhY2VSZWYoY3RybCwgdXBkYXRlMi5yZWYpO1xuICAgICAgICBpZiAoY3RybC5yZWYpIHtcbiAgICAgICAgICBjdHJsLnF1ZXVlLnB1c2godXBkYXRlMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3RybC5zdGFydCh1cGRhdGUyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgdXNlT25jZSgoKSA9PiAoKSA9PiB7XG4gICAgZWFjaDUoc3RhdGUuY3RybHMsIChjdHJsKSA9PiBjdHJsLnN0b3AodHJ1ZSkpO1xuICB9KTtcbiAgY29uc3QgdmFsdWVzID0gc3ByaW5ncy5tYXAoKHgpID0+ICh7IC4uLnggfSkpO1xuICByZXR1cm4gcmVmID8gW3ZhbHVlcywgcmVmXSA6IHZhbHVlcztcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVNwcmluZy50c1xuZnVuY3Rpb24gdXNlU3ByaW5nKHByb3BzLCBkZXBzKSB7XG4gIGNvbnN0IGlzRm4gPSBpczkuZnVuKHByb3BzKTtcbiAgY29uc3QgW1t2YWx1ZXNdLCByZWZdID0gdXNlU3ByaW5ncyhcbiAgICAxLFxuICAgIGlzRm4gPyBwcm9wcyA6IFtwcm9wc10sXG4gICAgaXNGbiA/IGRlcHMgfHwgW10gOiBkZXBzXG4gICk7XG4gIHJldHVybiBpc0ZuIHx8IGFyZ3VtZW50cy5sZW5ndGggPT0gMiA/IFt2YWx1ZXMsIHJlZl0gOiB2YWx1ZXM7XG59XG5cbi8vIHNyYy9ob29rcy91c2VTcHJpbmdSZWYudHNcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG52YXIgaW5pdFNwcmluZ1JlZiA9ICgpID0+IFNwcmluZ1JlZigpO1xudmFyIHVzZVNwcmluZ1JlZiA9ICgpID0+IHVzZVN0YXRlKGluaXRTcHJpbmdSZWYpWzBdO1xuXG4vLyBzcmMvaG9va3MvdXNlU3ByaW5nVmFsdWUudHNcbmltcG9ydCB7IHVzZUNvbnN0YW50LCB1c2VPbmNlIGFzIHVzZU9uY2UyIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgdXNlU3ByaW5nVmFsdWUgPSAoaW5pdGlhbCwgcHJvcHMpID0+IHtcbiAgY29uc3Qgc3ByaW5nVmFsdWUgPSB1c2VDb25zdGFudCgoKSA9PiBuZXcgU3ByaW5nVmFsdWUoaW5pdGlhbCwgcHJvcHMpKTtcbiAgdXNlT25jZTIoKCkgPT4gKCkgPT4ge1xuICAgIHNwcmluZ1ZhbHVlLnN0b3AoKTtcbiAgfSk7XG4gIHJldHVybiBzcHJpbmdWYWx1ZTtcbn07XG5cbi8vIHNyYy9ob29rcy91c2VUcmFpbC50c1xuaW1wb3J0IHsgZWFjaCBhcyBlYWNoNiwgaXMgYXMgaXMxMCwgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gdXNlVHJhaWwobGVuZ3RoLCBwcm9wc0FyZywgZGVwcykge1xuICBjb25zdCBwcm9wc0ZuID0gaXMxMC5mdW4ocHJvcHNBcmcpICYmIHByb3BzQXJnO1xuICBpZiAocHJvcHNGbiAmJiAhZGVwcylcbiAgICBkZXBzID0gW107XG4gIGxldCByZXZlcnNlID0gdHJ1ZTtcbiAgbGV0IHBhc3NlZFJlZiA9IHZvaWQgMDtcbiAgY29uc3QgcmVzdWx0ID0gdXNlU3ByaW5ncyhcbiAgICBsZW5ndGgsXG4gICAgKGksIGN0cmwpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0gcHJvcHNGbiA/IHByb3BzRm4oaSwgY3RybCkgOiBwcm9wc0FyZztcbiAgICAgIHBhc3NlZFJlZiA9IHByb3BzLnJlZjtcbiAgICAgIHJldmVyc2UgPSByZXZlcnNlICYmIHByb3BzLnJldmVyc2U7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfSxcbiAgICAvLyBFbnN1cmUgdGhlIHByb3BzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIG5vIGRlcHMgZXhpc3QuXG4gICAgLy8gVGhpcyB3b3JrcyBhcm91bmQgdGhlIDMgYXJndW1lbnQgcnVsZS5cbiAgICBkZXBzIHx8IFt7fV1cbiAgKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDMoKCkgPT4ge1xuICAgIGVhY2g2KHJlc3VsdFsxXS5jdXJyZW50LCAoY3RybCwgaSkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gcmVzdWx0WzFdLmN1cnJlbnRbaSArIChyZXZlcnNlID8gMSA6IC0xKV07XG4gICAgICByZXBsYWNlUmVmKGN0cmwsIHBhc3NlZFJlZik7XG4gICAgICBpZiAoY3RybC5yZWYpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGN0cmwudXBkYXRlKHsgdG86IHBhcmVudC5zcHJpbmdzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgY3RybC5zdGFydCh7IHRvOiBwYXJlbnQuc3ByaW5ncyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0cmwuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgZGVwcyk7XG4gIGlmIChwcm9wc0ZuIHx8IGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xuICAgIGNvbnN0IHJlZiA9IHBhc3NlZFJlZiA/PyByZXN1bHRbMV07XG4gICAgcmVmW1wiX2dldFByb3BzXCJdID0gKHByb3BzQXJnMiwgY3RybCwgaSkgPT4ge1xuICAgICAgY29uc3QgcHJvcHMgPSBpczEwLmZ1bihwcm9wc0FyZzIpID8gcHJvcHNBcmcyKGksIGN0cmwpIDogcHJvcHNBcmcyO1xuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHJlZi5jdXJyZW50W2kgKyAocHJvcHMucmV2ZXJzZSA/IDEgOiAtMSldO1xuICAgICAgICBpZiAocGFyZW50KVxuICAgICAgICAgIHByb3BzLnRvID0gcGFyZW50LnNwcmluZ3M7XG4gICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFswXTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVRyYW5zaXRpb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDIgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb250ZXh0IGFzIHVzZUNvbnRleHQzLCB1c2VSZWYgYXMgdXNlUmVmMiwgdXNlTWVtbyBhcyB1c2VNZW1vMiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgaXMgYXMgaXMxMSxcbiAgdG9BcnJheSBhcyB0b0FycmF5NCxcbiAgdXNlRm9yY2VVcGRhdGUgYXMgdXNlRm9yY2VVcGRhdGUyLFxuICB1c2VPbmNlIGFzIHVzZU9uY2UzLFxuICB1c2VQcmV2IGFzIHVzZVByZXYyLFxuICBlYWNoIGFzIGVhY2g3LFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0XG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvbihkYXRhLCBwcm9wcywgZGVwcykge1xuICBjb25zdCBwcm9wc0ZuID0gaXMxMS5mdW4ocHJvcHMpICYmIHByb3BzO1xuICBjb25zdCB7XG4gICAgcmVzZXQsXG4gICAgc29ydCxcbiAgICB0cmFpbCA9IDAsXG4gICAgZXhwaXJlcyA9IHRydWUsXG4gICAgZXhpdEJlZm9yZUVudGVyID0gZmFsc2UsXG4gICAgb25EZXN0cm95ZWQsXG4gICAgcmVmOiBwcm9wc1JlZixcbiAgICBjb25maWc6IHByb3BzQ29uZmlnXG4gIH0gPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gIGNvbnN0IHJlZiA9IHVzZU1lbW8yKFxuICAgICgpID0+IHByb3BzRm4gfHwgYXJndW1lbnRzLmxlbmd0aCA9PSAzID8gU3ByaW5nUmVmKCkgOiB2b2lkIDAsXG4gICAgW11cbiAgKTtcbiAgY29uc3QgaXRlbXMgPSB0b0FycmF5NChkYXRhKTtcbiAgY29uc3QgdHJhbnNpdGlvbnMgPSBbXTtcbiAgY29uc3QgdXNlZFRyYW5zaXRpb25zID0gdXNlUmVmMihudWxsKTtcbiAgY29uc3QgcHJldlRyYW5zaXRpb25zID0gcmVzZXQgPyBudWxsIDogdXNlZFRyYW5zaXRpb25zLmN1cnJlbnQ7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0KCgpID0+IHtcbiAgICB1c2VkVHJhbnNpdGlvbnMuY3VycmVudCA9IHRyYW5zaXRpb25zO1xuICB9KTtcbiAgdXNlT25jZTMoKCkgPT4ge1xuICAgIGVhY2g3KHRyYW5zaXRpb25zLCAodCkgPT4ge1xuICAgICAgcmVmPy5hZGQodC5jdHJsKTtcbiAgICAgIHQuY3RybC5yZWYgPSByZWY7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGVhY2g3KHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50LCAodCkgPT4ge1xuICAgICAgICBpZiAodC5leHBpcmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHQuZXhwaXJhdGlvbklkKTtcbiAgICAgICAgfVxuICAgICAgICBkZXRhY2hSZWZzKHQuY3RybCwgcmVmKTtcbiAgICAgICAgdC5jdHJsLnN0b3AodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcbiAgY29uc3Qga2V5cyA9IGdldEtleXMoaXRlbXMsIHByb3BzRm4gPyBwcm9wc0ZuKCkgOiBwcm9wcywgcHJldlRyYW5zaXRpb25zKTtcbiAgY29uc3QgZXhwaXJlZCA9IHJlc2V0ICYmIHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50IHx8IFtdO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NChcbiAgICAoKSA9PiBlYWNoNyhleHBpcmVkLCAoeyBjdHJsLCBpdGVtLCBrZXkgfSkgPT4ge1xuICAgICAgZGV0YWNoUmVmcyhjdHJsLCByZWYpO1xuICAgICAgY2FsbFByb3Aob25EZXN0cm95ZWQsIGl0ZW0sIGtleSk7XG4gICAgfSlcbiAgKTtcbiAgY29uc3QgcmV1c2VkID0gW107XG4gIGlmIChwcmV2VHJhbnNpdGlvbnMpXG4gICAgZWFjaDcocHJldlRyYW5zaXRpb25zLCAodCwgaSkgPT4ge1xuICAgICAgaWYgKHQuZXhwaXJlZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodC5leHBpcmF0aW9uSWQpO1xuICAgICAgICBleHBpcmVkLnB1c2godCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gcmV1c2VkW2ldID0ga2V5cy5pbmRleE9mKHQua2V5KTtcbiAgICAgICAgaWYgKH5pKVxuICAgICAgICAgIHRyYW5zaXRpb25zW2ldID0gdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgZWFjaDcoaXRlbXMsIChpdGVtLCBpKSA9PiB7XG4gICAgaWYgKCF0cmFuc2l0aW9uc1tpXSkge1xuICAgICAgdHJhbnNpdGlvbnNbaV0gPSB7XG4gICAgICAgIGtleToga2V5c1tpXSxcbiAgICAgICAgaXRlbSxcbiAgICAgICAgcGhhc2U6IFwibW91bnRcIiAvKiBNT1VOVCAqLyxcbiAgICAgICAgY3RybDogbmV3IENvbnRyb2xsZXIoKVxuICAgICAgfTtcbiAgICAgIHRyYW5zaXRpb25zW2ldLmN0cmwuaXRlbSA9IGl0ZW07XG4gICAgfVxuICB9KTtcbiAgaWYgKHJldXNlZC5sZW5ndGgpIHtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGNvbnN0IHsgbGVhdmUgfSA9IHByb3BzRm4gPyBwcm9wc0ZuKCkgOiBwcm9wcztcbiAgICBlYWNoNyhyZXVzZWQsIChrZXlJbmRleCwgcHJldkluZGV4KSA9PiB7XG4gICAgICBjb25zdCB0ID0gcHJldlRyYW5zaXRpb25zW3ByZXZJbmRleF07XG4gICAgICBpZiAofmtleUluZGV4KSB7XG4gICAgICAgIGkgPSB0cmFuc2l0aW9ucy5pbmRleE9mKHQpO1xuICAgICAgICB0cmFuc2l0aW9uc1tpXSA9IHsgLi4udCwgaXRlbTogaXRlbXNba2V5SW5kZXhdIH07XG4gICAgICB9IGVsc2UgaWYgKGxlYXZlKSB7XG4gICAgICAgIHRyYW5zaXRpb25zLnNwbGljZSgrK2ksIDAsIHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmIChpczExLmZ1bihzb3J0KSkge1xuICAgIHRyYW5zaXRpb25zLnNvcnQoKGEsIGIpID0+IHNvcnQoYS5pdGVtLCBiLml0ZW0pKTtcbiAgfVxuICBsZXQgZGVsYXkgPSAtdHJhaWw7XG4gIGNvbnN0IGZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGUyKCk7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcyhwcm9wcyk7XG4gIGNvbnN0IGNoYW5nZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBleGl0aW5nVHJhbnNpdGlvbnMgPSB1c2VSZWYyKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICBjb25zdCBmb3JjZUNoYW5nZSA9IHVzZVJlZjIoZmFsc2UpO1xuICBlYWNoNyh0cmFuc2l0aW9ucywgKHQsIGkpID0+IHtcbiAgICBjb25zdCBrZXkgPSB0LmtleTtcbiAgICBjb25zdCBwcmV2UGhhc2UgPSB0LnBoYXNlO1xuICAgIGNvbnN0IHAgPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gICAgbGV0IHRvMjtcbiAgICBsZXQgcGhhc2U7XG4gICAgY29uc3QgcHJvcHNEZWxheSA9IGNhbGxQcm9wKHAuZGVsYXkgfHwgMCwga2V5KTtcbiAgICBpZiAocHJldlBoYXNlID09IFwibW91bnRcIiAvKiBNT1VOVCAqLykge1xuICAgICAgdG8yID0gcC5lbnRlcjtcbiAgICAgIHBoYXNlID0gXCJlbnRlclwiIC8qIEVOVEVSICovO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc0xlYXZlID0ga2V5cy5pbmRleE9mKGtleSkgPCAwO1xuICAgICAgaWYgKHByZXZQaGFzZSAhPSBcImxlYXZlXCIgLyogTEVBVkUgKi8pIHtcbiAgICAgICAgaWYgKGlzTGVhdmUpIHtcbiAgICAgICAgICB0bzIgPSBwLmxlYXZlO1xuICAgICAgICAgIHBoYXNlID0gXCJsZWF2ZVwiIC8qIExFQVZFICovO1xuICAgICAgICB9IGVsc2UgaWYgKHRvMiA9IHAudXBkYXRlKSB7XG4gICAgICAgICAgcGhhc2UgPSBcInVwZGF0ZVwiIC8qIFVQREFURSAqLztcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICghaXNMZWF2ZSkge1xuICAgICAgICB0bzIgPSBwLmVudGVyO1xuICAgICAgICBwaGFzZSA9IFwiZW50ZXJcIiAvKiBFTlRFUiAqLztcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvMiA9IGNhbGxQcm9wKHRvMiwgdC5pdGVtLCBpKTtcbiAgICB0bzIgPSBpczExLm9iaih0bzIpID8gaW5mZXJUbyh0bzIpIDogeyB0bzogdG8yIH07XG4gICAgaWYgKCF0bzIuY29uZmlnKSB7XG4gICAgICBjb25zdCBjb25maWcyID0gcHJvcHNDb25maWcgfHwgZGVmYXVsdFByb3BzLmNvbmZpZztcbiAgICAgIHRvMi5jb25maWcgPSBjYWxsUHJvcChjb25maWcyLCB0Lml0ZW0sIGksIHBoYXNlKTtcbiAgICB9XG4gICAgZGVsYXkgKz0gdHJhaWw7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICAgIC8vIHdlIG5lZWQgdG8gYWRkIG91ciBwcm9wcy5kZWxheSB2YWx1ZSB5b3UgaGVyZS5cbiAgICAgIGRlbGF5OiBwcm9wc0RlbGF5ICsgZGVsYXksXG4gICAgICByZWY6IHByb3BzUmVmLFxuICAgICAgaW1tZWRpYXRlOiBwLmltbWVkaWF0ZSxcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW1wbGllZCByZXNldHMuXG4gICAgICByZXNldDogZmFsc2UsXG4gICAgICAvLyBNZXJnZSBhbnkgcGhhc2Utc3BlY2lmaWMgcHJvcHMuXG4gICAgICAuLi50bzJcbiAgICB9O1xuICAgIGlmIChwaGFzZSA9PSBcImVudGVyXCIgLyogRU5URVIgKi8gJiYgaXMxMS51bmQocGF5bG9hZC5mcm9tKSkge1xuICAgICAgY29uc3QgcDIgPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gICAgICBjb25zdCBmcm9tID0gaXMxMS51bmQocDIuaW5pdGlhbCkgfHwgcHJldlRyYW5zaXRpb25zID8gcDIuZnJvbSA6IHAyLmluaXRpYWw7XG4gICAgICBwYXlsb2FkLmZyb20gPSBjYWxsUHJvcChmcm9tLCB0Lml0ZW0sIGkpO1xuICAgIH1cbiAgICBjb25zdCB7IG9uUmVzb2x2ZSB9ID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkLm9uUmVzb2x2ZSA9IChyZXN1bHQpID0+IHtcbiAgICAgIGNhbGxQcm9wKG9uUmVzb2x2ZSwgcmVzdWx0KTtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25zMiA9IHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50O1xuICAgICAgY29uc3QgdDIgPSB0cmFuc2l0aW9uczIuZmluZCgodDMpID0+IHQzLmtleSA9PT0ga2V5KTtcbiAgICAgIGlmICghdDIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChyZXN1bHQuY2FuY2VsbGVkICYmIHQyLnBoYXNlICE9IFwidXBkYXRlXCIgLyogVVBEQVRFICovKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0Mi5jdHJsLmlkbGUpIHtcbiAgICAgICAgY29uc3QgaWRsZSA9IHRyYW5zaXRpb25zMi5ldmVyeSgodDMpID0+IHQzLmN0cmwuaWRsZSk7XG4gICAgICAgIGlmICh0Mi5waGFzZSA9PSBcImxlYXZlXCIgLyogTEVBVkUgKi8pIHtcbiAgICAgICAgICBjb25zdCBleHBpcnkgPSBjYWxsUHJvcChleHBpcmVzLCB0Mi5pdGVtKTtcbiAgICAgICAgICBpZiAoZXhwaXJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgZXhwaXJ5TXMgPSBleHBpcnkgPT09IHRydWUgPyAwIDogZXhwaXJ5O1xuICAgICAgICAgICAgdDIuZXhwaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIWlkbGUgJiYgZXhwaXJ5TXMgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChleHBpcnlNcyA8PSAyMTQ3NDgzNjQ3KVxuICAgICAgICAgICAgICAgIHQyLmV4cGlyYXRpb25JZCA9IHNldFRpbWVvdXQoZm9yY2VVcGRhdGUsIGV4cGlyeU1zKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaWRsZSAmJiB0cmFuc2l0aW9uczIuc29tZSgodDMpID0+IHQzLmV4cGlyZWQpKSB7XG4gICAgICAgICAgZXhpdGluZ1RyYW5zaXRpb25zLmN1cnJlbnQuZGVsZXRlKHQyKTtcbiAgICAgICAgICBpZiAoZXhpdEJlZm9yZUVudGVyKSB7XG4gICAgICAgICAgICBmb3JjZUNoYW5nZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3ByaW5ncyA9IGdldFNwcmluZ3ModC5jdHJsLCBwYXlsb2FkKTtcbiAgICBpZiAocGhhc2UgPT09IFwibGVhdmVcIiAvKiBMRUFWRSAqLyAmJiBleGl0QmVmb3JlRW50ZXIpIHtcbiAgICAgIGV4aXRpbmdUcmFuc2l0aW9ucy5jdXJyZW50LnNldCh0LCB7IHBoYXNlLCBzcHJpbmdzLCBwYXlsb2FkIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFuZ2VzLnNldCh0LCB7IHBoYXNlLCBzcHJpbmdzLCBwYXlsb2FkIH0pO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0MyhTcHJpbmdDb250ZXh0KTtcbiAgY29uc3QgcHJldkNvbnRleHQgPSB1c2VQcmV2Mihjb250ZXh0KTtcbiAgY29uc3QgaGFzQ29udGV4dCA9IGNvbnRleHQgIT09IHByZXZDb250ZXh0ICYmIGhhc1Byb3BzKGNvbnRleHQpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NCgoKSA9PiB7XG4gICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgIGVhY2g3KHRyYW5zaXRpb25zLCAodCkgPT4ge1xuICAgICAgICB0LmN0cmwuc3RhcnQoeyBkZWZhdWx0OiBjb250ZXh0IH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY29udGV4dF0pO1xuICBlYWNoNyhjaGFuZ2VzLCAoXywgdCkgPT4ge1xuICAgIGlmIChleGl0aW5nVHJhbnNpdGlvbnMuY3VycmVudC5zaXplKSB7XG4gICAgICBjb25zdCBpbmQgPSB0cmFuc2l0aW9ucy5maW5kSW5kZXgoKHN0YXRlKSA9PiBzdGF0ZS5rZXkgPT09IHQua2V5KTtcbiAgICAgIHRyYW5zaXRpb25zLnNwbGljZShpbmQsIDEpO1xuICAgIH1cbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0KFxuICAgICgpID0+IHtcbiAgICAgIGVhY2g3KFxuICAgICAgICBleGl0aW5nVHJhbnNpdGlvbnMuY3VycmVudC5zaXplID8gZXhpdGluZ1RyYW5zaXRpb25zLmN1cnJlbnQgOiBjaGFuZ2VzLFxuICAgICAgICAoeyBwaGFzZSwgcGF5bG9hZCB9LCB0KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjdHJsIH0gPSB0O1xuICAgICAgICAgIHQucGhhc2UgPSBwaGFzZTtcbiAgICAgICAgICByZWY/LmFkZChjdHJsKTtcbiAgICAgICAgICBpZiAoaGFzQ29udGV4dCAmJiBwaGFzZSA9PSBcImVudGVyXCIgLyogRU5URVIgKi8pIHtcbiAgICAgICAgICAgIGN0cmwuc3RhcnQoeyBkZWZhdWx0OiBjb250ZXh0IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgcmVwbGFjZVJlZihjdHJsLCBwYXlsb2FkLnJlZik7XG4gICAgICAgICAgICBpZiAoKGN0cmwucmVmIHx8IHJlZikgJiYgIWZvcmNlQ2hhbmdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgY3RybC51cGRhdGUocGF5bG9hZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdHJsLnN0YXJ0KHBheWxvYWQpO1xuICAgICAgICAgICAgICBpZiAoZm9yY2VDaGFuZ2UuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGZvcmNlQ2hhbmdlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlc2V0ID8gdm9pZCAwIDogZGVwc1xuICApO1xuICBjb25zdCByZW5kZXJUcmFuc2l0aW9ucyA9IChyZW5kZXIpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChSZWFjdDIuRnJhZ21lbnQsIG51bGwsIHRyYW5zaXRpb25zLm1hcCgodCwgaSkgPT4ge1xuICAgIGNvbnN0IHsgc3ByaW5ncyB9ID0gY2hhbmdlcy5nZXQodCkgfHwgdC5jdHJsO1xuICAgIGNvbnN0IGVsZW0gPSByZW5kZXIoeyAuLi5zcHJpbmdzIH0sIHQuaXRlbSwgdCwgaSk7XG4gICAgcmV0dXJuIGVsZW0gJiYgZWxlbS50eXBlID8gLyogQF9fUFVSRV9fICovIFJlYWN0Mi5jcmVhdGVFbGVtZW50KFxuICAgICAgZWxlbS50eXBlLFxuICAgICAge1xuICAgICAgICAuLi5lbGVtLnByb3BzLFxuICAgICAgICBrZXk6IGlzMTEuc3RyKHQua2V5KSB8fCBpczExLm51bSh0LmtleSkgPyB0LmtleSA6IHQuY3RybC5pZCxcbiAgICAgICAgcmVmOiBlbGVtLnJlZlxuICAgICAgfVxuICAgICkgOiBlbGVtO1xuICB9KSk7XG4gIHJldHVybiByZWYgPyBbcmVuZGVyVHJhbnNpdGlvbnMsIHJlZl0gOiByZW5kZXJUcmFuc2l0aW9ucztcbn1cbnZhciBuZXh0S2V5ID0gMTtcbmZ1bmN0aW9uIGdldEtleXMoaXRlbXMsIHsga2V5LCBrZXlzID0ga2V5IH0sIHByZXZUcmFuc2l0aW9ucykge1xuICBpZiAoa2V5cyA9PT0gbnVsbCkge1xuICAgIGNvbnN0IHJldXNlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgdCA9IHByZXZUcmFuc2l0aW9ucyAmJiBwcmV2VHJhbnNpdGlvbnMuZmluZChcbiAgICAgICAgKHQyKSA9PiB0Mi5pdGVtID09PSBpdGVtICYmIHQyLnBoYXNlICE9PSBcImxlYXZlXCIgLyogTEVBVkUgKi8gJiYgIXJldXNlZC5oYXModDIpXG4gICAgICApO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgcmV1c2VkLmFkZCh0KTtcbiAgICAgICAgcmV0dXJuIHQua2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRLZXkrKztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXMxMS51bmQoa2V5cykgPyBpdGVtcyA6IGlzMTEuZnVuKGtleXMpID8gaXRlbXMubWFwKGtleXMpIDogdG9BcnJheTQoa2V5cyk7XG59XG5cbi8vIHNyYy9ob29rcy91c2VTY3JvbGwudHNcbmltcG9ydCB7IGVhY2ggYXMgZWFjaDgsIG9uU2Nyb2xsLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q1IH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgdXNlU2Nyb2xsID0gKHtcbiAgY29udGFpbmVyLFxuICAuLi5zcHJpbmdPcHRpb25zXG59ID0ge30pID0+IHtcbiAgY29uc3QgW3Njcm9sbFZhbHVlcywgYXBpXSA9IHVzZVNwcmluZyhcbiAgICAoKSA9PiAoe1xuICAgICAgc2Nyb2xsWDogMCxcbiAgICAgIHNjcm9sbFk6IDAsXG4gICAgICBzY3JvbGxYUHJvZ3Jlc3M6IDAsXG4gICAgICBzY3JvbGxZUHJvZ3Jlc3M6IDAsXG4gICAgICAuLi5zcHJpbmdPcHRpb25zXG4gICAgfSksXG4gICAgW11cbiAgKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDUoKCkgPT4ge1xuICAgIGNvbnN0IGNsZWFudXBTY3JvbGwgPSBvblNjcm9sbChcbiAgICAgICh7IHgsIHkgfSkgPT4ge1xuICAgICAgICBhcGkuc3RhcnQoe1xuICAgICAgICAgIHNjcm9sbFg6IHguY3VycmVudCxcbiAgICAgICAgICBzY3JvbGxYUHJvZ3Jlc3M6IHgucHJvZ3Jlc3MsXG4gICAgICAgICAgc2Nyb2xsWTogeS5jdXJyZW50LFxuICAgICAgICAgIHNjcm9sbFlQcm9ncmVzczogeS5wcm9ncmVzc1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB7IGNvbnRhaW5lcjogY29udGFpbmVyPy5jdXJyZW50IHx8IHZvaWQgMCB9XG4gICAgKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZWFjaDgoT2JqZWN0LnZhbHVlcyhzY3JvbGxWYWx1ZXMpLCAodmFsdWUpID0+IHZhbHVlLnN0b3AoKSk7XG4gICAgICBjbGVhbnVwU2Nyb2xsKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gc2Nyb2xsVmFsdWVzO1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZVJlc2l6ZS50c1xuaW1wb3J0IHsgb25SZXNpemUsIGVhY2ggYXMgZWFjaDksIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgYXMgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDYgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciB1c2VSZXNpemUgPSAoe1xuICBjb250YWluZXIsXG4gIC4uLnNwcmluZ09wdGlvbnNcbn0pID0+IHtcbiAgY29uc3QgW3NpemVWYWx1ZXMsIGFwaV0gPSB1c2VTcHJpbmcoXG4gICAgKCkgPT4gKHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgLi4uc3ByaW5nT3B0aW9uc1xuICAgIH0pLFxuICAgIFtdXG4gICk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q2KCgpID0+IHtcbiAgICBjb25zdCBjbGVhbnVwU2Nyb2xsID0gb25SZXNpemUoXG4gICAgICAoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgICAgICAgYXBpLnN0YXJ0KHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgaW1tZWRpYXRlOiBzaXplVmFsdWVzLndpZHRoLmdldCgpID09PSAwIHx8IHNpemVWYWx1ZXMuaGVpZ2h0LmdldCgpID09PSAwXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXI/LmN1cnJlbnQgfHwgdm9pZCAwIH1cbiAgICApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBlYWNoOShPYmplY3QudmFsdWVzKHNpemVWYWx1ZXMpLCAodmFsdWUpID0+IHZhbHVlLnN0b3AoKSk7XG4gICAgICBjbGVhbnVwU2Nyb2xsKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gc2l6ZVZhbHVlcztcbn07XG5cbi8vIHNyYy9ob29rcy91c2VJblZpZXcudHNcbmltcG9ydCB7IHVzZVJlZiBhcyB1c2VSZWYzLCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTIgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGlzIGFzIGlzMTIsIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgYXMgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDcgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciBkZWZhdWx0VGhyZXNob2xkT3B0aW9ucyA9IHtcbiAgYW55OiAwLFxuICBhbGw6IDFcbn07XG5mdW5jdGlvbiB1c2VJblZpZXcocHJvcHMsIGFyZ3MpIHtcbiAgY29uc3QgW2lzSW5WaWV3LCBzZXRJc0luVmlld10gPSB1c2VTdGF0ZTIoZmFsc2UpO1xuICBjb25zdCByZWYgPSB1c2VSZWYzKCk7XG4gIGNvbnN0IHByb3BzRm4gPSBpczEyLmZ1bihwcm9wcykgJiYgcHJvcHM7XG4gIGNvbnN0IHNwcmluZ3NQcm9wcyA9IHByb3BzRm4gPyBwcm9wc0ZuKCkgOiB7fTtcbiAgY29uc3QgeyB0bzogdG8yID0ge30sIGZyb20gPSB7fSwgLi4ucmVzdFNwcmluZ1Byb3BzIH0gPSBzcHJpbmdzUHJvcHM7XG4gIGNvbnN0IGludGVyc2VjdGlvbkFyZ3VtZW50cyA9IHByb3BzRm4gPyBhcmdzIDogcHJvcHM7XG4gIGNvbnN0IFtzcHJpbmdzLCBhcGldID0gdXNlU3ByaW5nKCgpID0+ICh7IGZyb20sIC4uLnJlc3RTcHJpbmdQcm9wcyB9KSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NygoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHtcbiAgICAgIHJvb3QsXG4gICAgICBvbmNlLFxuICAgICAgYW1vdW50ID0gXCJhbnlcIixcbiAgICAgIC4uLnJlc3RBcmdzXG4gICAgfSA9IGludGVyc2VjdGlvbkFyZ3VtZW50cyA/PyB7fTtcbiAgICBpZiAoIWVsZW1lbnQgfHwgb25jZSAmJiBpc0luVmlldyB8fCB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgYWN0aXZlSW50ZXJzZWN0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuICAgIGNvbnN0IG9uRW50ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAodG8yKSB7XG4gICAgICAgIGFwaS5zdGFydCh0bzIpO1xuICAgICAgfVxuICAgICAgc2V0SXNJblZpZXcodHJ1ZSk7XG4gICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgIGFwaS5zdGFydChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJc0luVmlldyhmYWxzZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9uY2UgPyB2b2lkIDAgOiBjbGVhbnVwO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlSW50ZXJzZWN0aW9uID0gKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgY29uc3Qgb25MZWF2ZSA9IGFjdGl2ZUludGVyc2VjdGlvbnMuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gQm9vbGVhbihvbkxlYXZlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBjb25zdCBuZXdPbkxlYXZlID0gb25FbnRlcigpO1xuICAgICAgICAgIGlmIChpczEyLmZ1bihuZXdPbkxlYXZlKSkge1xuICAgICAgICAgICAgYWN0aXZlSW50ZXJzZWN0aW9ucy5zZXQoZW50cnkudGFyZ2V0LCBuZXdPbkxlYXZlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgICBvbkxlYXZlKCk7XG4gICAgICAgICAgYWN0aXZlSW50ZXJzZWN0aW9ucy5kZWxldGUoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVJbnRlcnNlY3Rpb24sIHtcbiAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5jdXJyZW50IHx8IHZvaWQgMCxcbiAgICAgIHRocmVzaG9sZDogdHlwZW9mIGFtb3VudCA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KGFtb3VudCkgPyBhbW91bnQgOiBkZWZhdWx0VGhyZXNob2xkT3B0aW9uc1thbW91bnRdLFxuICAgICAgLi4ucmVzdEFyZ3NcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gIH0sIFtpbnRlcnNlY3Rpb25Bcmd1bWVudHNdKTtcbiAgaWYgKHByb3BzRm4pIHtcbiAgICByZXR1cm4gW3JlZiwgc3ByaW5nc107XG4gIH1cbiAgcmV0dXJuIFtyZWYsIGlzSW5WaWV3XTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvU3ByaW5nLnRzeFxuZnVuY3Rpb24gU3ByaW5nKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcbiAgcmV0dXJuIGNoaWxkcmVuKHVzZVNwcmluZyhwcm9wcykpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9UcmFpbC50c3hcbmltcG9ydCB7IGlzIGFzIGlzMTMgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbmZ1bmN0aW9uIFRyYWlsKHtcbiAgaXRlbXMsXG4gIGNoaWxkcmVuLFxuICAuLi5wcm9wc1xufSkge1xuICBjb25zdCB0cmFpbHMgPSB1c2VUcmFpbChpdGVtcy5sZW5ndGgsIHByb3BzKTtcbiAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjaGlsZHJlbihpdGVtLCBpbmRleCk7XG4gICAgcmV0dXJuIGlzMTMuZnVuKHJlc3VsdCkgPyByZXN1bHQodHJhaWxzW2luZGV4XSkgOiByZXN1bHQ7XG4gIH0pO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9UcmFuc2l0aW9uLnRzeFxuZnVuY3Rpb24gVHJhbnNpdGlvbih7XG4gIGl0ZW1zLFxuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIHVzZVRyYW5zaXRpb24oaXRlbXMsIHByb3BzKShjaGlsZHJlbik7XG59XG5cbi8vIHNyYy9pbnRlcnBvbGF0ZS50c1xuaW1wb3J0IHsgZGVwcmVjYXRlSW50ZXJwb2xhdGUgYXMgZGVwcmVjYXRlSW50ZXJwb2xhdGUyIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5cbi8vIHNyYy9JbnRlcnBvbGF0aW9uLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczE0LFxuICByYWYgYXMgcmFmNSxcbiAgZWFjaCBhcyBlYWNoMTAsXG4gIGlzRXF1YWwgYXMgaXNFcXVhbDIsXG4gIHRvQXJyYXkgYXMgdG9BcnJheTUsXG4gIGZyYW1lTG9vcCBhcyBmcmFtZUxvb3AzLFxuICBnZXRGbHVpZFZhbHVlIGFzIGdldEZsdWlkVmFsdWUzLFxuICBjcmVhdGVJbnRlcnBvbGF0b3IsXG4gIEdsb2JhbHMgYXMgRzYsXG4gIGNhbGxGbHVpZE9ic2VydmVycyBhcyBjYWxsRmx1aWRPYnNlcnZlcnMzLFxuICBhZGRGbHVpZE9ic2VydmVyIGFzIGFkZEZsdWlkT2JzZXJ2ZXIzLFxuICByZW1vdmVGbHVpZE9ic2VydmVyIGFzIHJlbW92ZUZsdWlkT2JzZXJ2ZXIyLFxuICBoYXNGbHVpZFZhbHVlIGFzIGhhc0ZsdWlkVmFsdWUyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuaW1wb3J0IHtcbiAgZ2V0QW5pbWF0ZWQgYXMgZ2V0QW5pbWF0ZWQzLFxuICBzZXRBbmltYXRlZCBhcyBzZXRBbmltYXRlZDIsXG4gIGdldEFuaW1hdGVkVHlwZSBhcyBnZXRBbmltYXRlZFR5cGUyLFxuICBnZXRQYXlsb2FkIGFzIGdldFBheWxvYWQyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL2FuaW1hdGVkXCI7XG52YXIgSW50ZXJwb2xhdGlvbiA9IGNsYXNzIGV4dGVuZHMgRnJhbWVWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZSwgYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgLyoqIEVxdWFscyBmYWxzZSB3aGVuIGluIHRoZSBmcmFtZWxvb3AgKi9cbiAgICB0aGlzLmlkbGUgPSB0cnVlO1xuICAgIC8qKiBUaGUgaW5wdXRzIHdoaWNoIGFyZSBjdXJyZW50bHkgYW5pbWF0aW5nICovXG4gICAgdGhpcy5fYWN0aXZlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICB0aGlzLmNhbGMgPSBjcmVhdGVJbnRlcnBvbGF0b3IoLi4uYXJncyk7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9nZXQoKTtcbiAgICBjb25zdCBub2RlVHlwZSA9IGdldEFuaW1hdGVkVHlwZTIodmFsdWUpO1xuICAgIHNldEFuaW1hdGVkMih0aGlzLCBub2RlVHlwZS5jcmVhdGUodmFsdWUpKTtcbiAgfVxuICBhZHZhbmNlKF9kdCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZ2V0KCk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmICghaXNFcXVhbDIodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgZ2V0QW5pbWF0ZWQzKHRoaXMpLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMuX29uQ2hhbmdlKHZhbHVlLCB0aGlzLmlkbGUpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaWRsZSAmJiBjaGVja0lkbGUodGhpcy5fYWN0aXZlKSkge1xuICAgICAgYmVjb21lSWRsZSh0aGlzKTtcbiAgICB9XG4gIH1cbiAgX2dldCgpIHtcbiAgICBjb25zdCBpbnB1dHMgPSBpczE0LmFycih0aGlzLnNvdXJjZSkgPyB0aGlzLnNvdXJjZS5tYXAoZ2V0Rmx1aWRWYWx1ZTMpIDogdG9BcnJheTUoZ2V0Rmx1aWRWYWx1ZTModGhpcy5zb3VyY2UpKTtcbiAgICByZXR1cm4gdGhpcy5jYWxjKC4uLmlucHV0cyk7XG4gIH1cbiAgX3N0YXJ0KCkge1xuICAgIGlmICh0aGlzLmlkbGUgJiYgIWNoZWNrSWRsZSh0aGlzLl9hY3RpdmUpKSB7XG4gICAgICB0aGlzLmlkbGUgPSBmYWxzZTtcbiAgICAgIGVhY2gxMChnZXRQYXlsb2FkMih0aGlzKSwgKG5vZGUpID0+IHtcbiAgICAgICAgbm9kZS5kb25lID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChHNi5za2lwQW5pbWF0aW9uKSB7XG4gICAgICAgIHJhZjUuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gdGhpcy5hZHZhbmNlKCkpO1xuICAgICAgICBiZWNvbWVJZGxlKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhbWVMb29wMy5zdGFydCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gT2JzZXJ2ZSBvdXIgc291cmNlcyBvbmx5IHdoZW4gd2UncmUgb2JzZXJ2ZWQuXG4gIF9hdHRhY2goKSB7XG4gICAgbGV0IHByaW9yaXR5ID0gMTtcbiAgICBlYWNoMTAodG9BcnJheTUodGhpcy5zb3VyY2UpLCAoc291cmNlKSA9PiB7XG4gICAgICBpZiAoaGFzRmx1aWRWYWx1ZTIoc291cmNlKSkge1xuICAgICAgICBhZGRGbHVpZE9ic2VydmVyMyhzb3VyY2UsIHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRnJhbWVWYWx1ZShzb3VyY2UpKSB7XG4gICAgICAgIGlmICghc291cmNlLmlkbGUpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmUuYWRkKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpb3JpdHkgPSBNYXRoLm1heChwcmlvcml0eSwgc291cmNlLnByaW9yaXR5ICsgMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMuX3N0YXJ0KCk7XG4gIH1cbiAgLy8gU3RvcCBvYnNlcnZpbmcgb3VyIHNvdXJjZXMgb25jZSB3ZSBoYXZlIG5vIG9ic2VydmVycy5cbiAgX2RldGFjaCgpIHtcbiAgICBlYWNoMTAodG9BcnJheTUodGhpcy5zb3VyY2UpLCAoc291cmNlKSA9PiB7XG4gICAgICBpZiAoaGFzRmx1aWRWYWx1ZTIoc291cmNlKSkge1xuICAgICAgICByZW1vdmVGbHVpZE9ic2VydmVyMihzb3VyY2UsIHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX2FjdGl2ZS5jbGVhcigpO1xuICAgIGJlY29tZUlkbGUodGhpcyk7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBldmVudE9ic2VydmVkKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJjaGFuZ2VcIikge1xuICAgICAgaWYgKGV2ZW50LmlkbGUpIHtcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9hY3RpdmUuYWRkKGV2ZW50LnBhcmVudCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwiaWRsZVwiKSB7XG4gICAgICB0aGlzLl9hY3RpdmUuZGVsZXRlKGV2ZW50LnBhcmVudCk7XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwicHJpb3JpdHlcIikge1xuICAgICAgdGhpcy5wcmlvcml0eSA9IHRvQXJyYXk1KHRoaXMuc291cmNlKS5yZWR1Y2UoXG4gICAgICAgIChoaWdoZXN0LCBwYXJlbnQpID0+IE1hdGgubWF4KGhpZ2hlc3QsIChpc0ZyYW1lVmFsdWUocGFyZW50KSA/IHBhcmVudC5wcmlvcml0eSA6IDApICsgMSksXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gaXNJZGxlKHNvdXJjZSkge1xuICByZXR1cm4gc291cmNlLmlkbGUgIT09IGZhbHNlO1xufVxuZnVuY3Rpb24gY2hlY2tJZGxlKGFjdGl2ZSkge1xuICByZXR1cm4gIWFjdGl2ZS5zaXplIHx8IEFycmF5LmZyb20oYWN0aXZlKS5ldmVyeShpc0lkbGUpO1xufVxuZnVuY3Rpb24gYmVjb21lSWRsZShzZWxmKSB7XG4gIGlmICghc2VsZi5pZGxlKSB7XG4gICAgc2VsZi5pZGxlID0gdHJ1ZTtcbiAgICBlYWNoMTAoZ2V0UGF5bG9hZDIoc2VsZiksIChub2RlKSA9PiB7XG4gICAgICBub2RlLmRvbmUgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNhbGxGbHVpZE9ic2VydmVyczMoc2VsZiwge1xuICAgICAgdHlwZTogXCJpZGxlXCIsXG4gICAgICBwYXJlbnQ6IHNlbGZcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBzcmMvaW50ZXJwb2xhdGUudHNcbnZhciB0byA9IChzb3VyY2UsIC4uLmFyZ3MpID0+IG5ldyBJbnRlcnBvbGF0aW9uKHNvdXJjZSwgYXJncyk7XG52YXIgaW50ZXJwb2xhdGUgPSAoc291cmNlLCAuLi5hcmdzKSA9PiAoZGVwcmVjYXRlSW50ZXJwb2xhdGUyKCksIG5ldyBJbnRlcnBvbGF0aW9uKHNvdXJjZSwgYXJncykpO1xuXG4vLyBzcmMvZ2xvYmFscy50c1xuaW1wb3J0IHtcbiAgR2xvYmFscyxcbiAgZnJhbWVMb29wIGFzIGZyYW1lTG9vcDQsXG4gIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvclxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbkdsb2JhbHMuYXNzaWduKHtcbiAgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yLFxuICB0bzogKHNvdXJjZSwgYXJncykgPT4gbmV3IEludGVycG9sYXRpb24oc291cmNlLCBhcmdzKVxufSk7XG52YXIgdXBkYXRlID0gZnJhbWVMb29wNC5hZHZhbmNlO1xuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7XG4gIGNyZWF0ZUludGVycG9sYXRvciBhcyBjcmVhdGVJbnRlcnBvbGF0b3IyLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q4LFxuICB1c2VSZWR1Y2VkTW90aW9uLFxuICBlYXNpbmdzIGFzIGVhc2luZ3MyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZXhwb3J0ICogZnJvbSBcIkByZWFjdC1zcHJpbmcvdHlwZXNcIjtcbmV4cG9ydCB7XG4gIEJhaWxTaWduYWwsXG4gIENvbnRyb2xsZXIsXG4gIEZyYW1lVmFsdWUsXG4gIEdsb2JhbHMsXG4gIEludGVycG9sYXRpb24sXG4gIFNwcmluZyxcbiAgU3ByaW5nQ29udGV4dCxcbiAgU3ByaW5nUmVmLFxuICBTcHJpbmdWYWx1ZSxcbiAgVHJhaWwsXG4gIFRyYW5zaXRpb24sXG4gIGNvbmZpZyxcbiAgY3JlYXRlSW50ZXJwb2xhdG9yMiBhcyBjcmVhdGVJbnRlcnBvbGF0b3IsXG4gIGVhc2luZ3MyIGFzIGVhc2luZ3MsXG4gIGluZmVyVG8sXG4gIGludGVycG9sYXRlLFxuICB0byxcbiAgdXBkYXRlLFxuICB1c2VDaGFpbixcbiAgdXNlSW5WaWV3LFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0OCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VSZWR1Y2VkTW90aW9uLFxuICB1c2VSZXNpemUsXG4gIHVzZVNjcm9sbCxcbiAgdXNlU3ByaW5nLFxuICB1c2VTcHJpbmdSZWYsXG4gIHVzZVNwcmluZ1ZhbHVlLFxuICB1c2VTcHJpbmdzLFxuICB1c2VUcmFpbCxcbiAgdXNlVHJhbnNpdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ19jb3JlLm1vZGVybi5tanMubWFwIl0sIm5hbWVzIjpbImVhY2giLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiaXMiLCJ0b0FycmF5IiwiZWFjaFByb3AiLCJnZXRGbHVpZFZhbHVlIiwiaXNBbmltYXRlZFN0cmluZyIsIkdsb2JhbHMiLCJHIiwiY2FsbFByb3AiLCJ2YWx1ZSIsImFyZ3MiLCJmdW4iLCJtYXRjaFByb3AiLCJrZXkiLCJpbmNsdWRlcyIsInJlc29sdmVQcm9wIiwicHJvcCIsIm9iaiIsImdldERlZmF1bHRQcm9wIiwicHJvcHMiLCJkZWZhdWx0Iiwibm9vcFRyYW5zZm9ybSIsImdldERlZmF1bHRQcm9wcyIsInRyYW5zZm9ybSIsImtleXMiLCJERUZBVUxUX1BST1BTIiwiT2JqZWN0IiwiZGVmYXVsdHMyIiwidW5kIiwiUkVTRVJWRURfUFJPUFMiLCJjb25maWciLCJmcm9tIiwidG8iLCJyZWYiLCJsb29wIiwicmVzZXQiLCJwYXVzZSIsImNhbmNlbCIsInJldmVyc2UiLCJpbW1lZGlhdGUiLCJkZWxheSIsIm9uUHJvcHMiLCJvblN0YXJ0Iiwib25DaGFuZ2UiLCJvblBhdXNlIiwib25SZXN1bWUiLCJvblJlc3QiLCJvblJlc29sdmUiLCJpdGVtcyIsInRyYWlsIiwic29ydCIsImV4cGlyZXMiLCJpbml0aWFsIiwiZW50ZXIiLCJ1cGRhdGUiLCJsZWF2ZSIsImNoaWxkcmVuIiwib25EZXN0cm95ZWQiLCJjYWxsSWQiLCJwYXJlbnRJZCIsImdldEZvcndhcmRQcm9wcyIsImZvcndhcmQiLCJjb3VudCIsImluZmVyVG8iLCJ0bzIiLCJvdXQiLCJ2YWwiLCJjb21wdXRlR29hbCIsImFyciIsIm1hcCIsImNyZWF0ZVN0cmluZ0ludGVycG9sYXRvciIsInJhbmdlIiwib3V0cHV0IiwiaGFzUHJvcHMiLCJfIiwiaXNBc3luY1RvIiwiZGV0YWNoUmVmcyIsImN0cmwiLCJkZWxldGUiLCJyZXBsYWNlUmVmIiwiYWRkIiwidXNlQ2hhaW4iLCJyZWZzIiwidGltZVN0ZXBzIiwidGltZUZyYW1lIiwicHJldkRlbGF5IiwiaSIsImNvbnRyb2xsZXJzIiwiY3VycmVudCIsImxlbmd0aCIsImlzTmFOIiwicXVldWUiLCJtZW1vaXplZERlbGF5UHJvcCIsInN0YXJ0IiwicCIsIlByb21pc2UiLCJyZXNvbHZlIiwicXVldWVzIiwicSIsInRoZW4iLCJ1cGRhdGUyIiwicHVzaCIsImFsbCIsImlzOSIsInVzZUNvbnRleHQiLCJ1c2VDb250ZXh0MiIsInVzZU1lbW8iLCJ1c2VSZWYiLCJpczgiLCJlYWNoNSIsInVzZVByZXYiLCJ1c2VPbmNlIiwidXNlRm9yY2VVcGRhdGUiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MiIsImlzNSIsInJhZiIsInJhZjMiLCJlYWNoMiIsImlzRXF1YWwiLCJ0b0FycmF5MiIsImVhY2hQcm9wMyIsImZyYW1lTG9vcCIsImZyYW1lTG9vcDIiLCJmbHVzaENhbGxzIiwiZ2V0Rmx1aWRWYWx1ZTIiLCJpc0FuaW1hdGVkU3RyaW5nMiIsIkc1IiwiY2FsbEZsdWlkT2JzZXJ2ZXJzIiwiY2FsbEZsdWlkT2JzZXJ2ZXJzMiIsImhhc0ZsdWlkVmFsdWUiLCJhZGRGbHVpZE9ic2VydmVyIiwicmVtb3ZlRmx1aWRPYnNlcnZlciIsImdldEZsdWlkT2JzZXJ2ZXJzIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkU3RyaW5nIiwiZ2V0UGF5bG9hZCIsImdldEFuaW1hdGVkIiwiZ2V0QW5pbWF0ZWQyIiwic2V0QW5pbWF0ZWQiLCJnZXRBbmltYXRlZFR5cGUiLCJpczIiLCJlYXNpbmdzIiwidGVuc2lvbiIsImZyaWN0aW9uIiwiZ2VudGxlIiwid29iYmx5Iiwic3RpZmYiLCJzbG93IiwibW9sYXNzZXMiLCJkZWZhdWx0cyIsIm1hc3MiLCJkYW1waW5nIiwiZWFzaW5nIiwibGluZWFyIiwiY2xhbXAiLCJBbmltYXRpb25Db25maWciLCJjb25zdHJ1Y3RvciIsInZlbG9jaXR5IiwiYXNzaWduIiwibWVyZ2VDb25maWciLCJjb25maWcyIiwibmV3Q29uZmlnIiwiZGVmYXVsdENvbmZpZyIsInNhbml0aXplQ29uZmlnIiwiZnJlcXVlbmN5IiwiTWF0aCIsInBvdyIsIlBJIiwiZGVjYXkiLCJkdXJhdGlvbiIsImlzVGVuc2lvbkNvbmZpZyIsImVtcHR5QXJyYXkiLCJBbmltYXRpb24iLCJjaGFuZ2VkIiwidmFsdWVzIiwidG9WYWx1ZXMiLCJmcm9tVmFsdWVzIiwiaXMzIiwiRzIiLCJzY2hlZHVsZVByb3BzIiwiZGVmYXVsdFByb3BzIiwic3RhdGUiLCJhY3Rpb25zIiwicmVqZWN0IiwidGltZW91dCIsInBhdXNlZCIsInJlc3VtZVF1ZXVlIiwicmVzdW1lIiwidGltZW91dHMiLCJ0aW1lIiwibm93Iiwic2tpcEFuaW1hdGlvbiIsImRlbGF5ZWQiLCJzZXRUaW1lb3V0IiwicGF1c2VRdWV1ZSIsImNhbmNlbElkIiwiZXJyIiwiaXM0IiwicmFmMiIsImZsdXNoIiwiZWFjaFByb3AyIiwiRzMiLCJnZXRDb21iaW5lZFJlc3VsdCIsInRhcmdldCIsInJlc3VsdHMiLCJzb21lIiwicmVzdWx0IiwiY2FuY2VsbGVkIiwiZ2V0Q2FuY2VsbGVkUmVzdWx0IiwiZ2V0IiwiZXZlcnkiLCJub29wIiwiZ2V0Tm9vcFJlc3VsdCIsImdldEZpbmlzaGVkUmVzdWx0IiwiZmluaXNoZWQiLCJydW5Bc3luYyIsImFzeW5jVG8iLCJwcmV2VG8iLCJwcm9taXNlIiwicHJldlByb21pc2UiLCJhc3luY0lkIiwicHJldmVudEJhaWwiLCJiYWlsIiwiYmFpbFByb21pc2UiLCJiYWlsSWZFbmRlZCIsImJhaWxTaWduYWwiLCJiYWlsUmVzdWx0IiwiYW5pbWF0ZSIsImFyZzEiLCJhcmcyIiwiQmFpbFNpZ25hbCIsInNraXBBbmltYXRpb25TaWduYWwiLCJTa2lwQW5pbWF0aW9uU2lnbmFsIiwic3RvcEFzeW5jIiwicHJvcHMyIiwicmVzdWx0MiIsImFuaW1hdGluZyIsInN0b3AiLCJiaW5kIiwiYmF0Y2hlZFVwZGF0ZXMiLCJpdGVtIiwidCIsImNsZWFyIiwiRXJyb3IiLCJkZXByZWNhdGVJbnRlcnBvbGF0ZSIsIkZsdWlkVmFsdWUiLCJGbHVpZFZhbHVlMiIsIkc0IiwiaXNGcmFtZVZhbHVlIiwiRnJhbWVWYWx1ZSIsIm5leHRJZCIsInByaW9yaXR5IiwiX3ByaW9yaXR5IiwiX29uUHJpb3JpdHlDaGFuZ2UiLCJub2RlIiwiZ2V0VmFsdWUiLCJpbnRlcnBvbGF0ZSIsInRvSlNPTiIsIm9ic2VydmVyQWRkZWQiLCJfYXR0YWNoIiwib2JzZXJ2ZXJSZW1vdmVkIiwiX2RldGFjaCIsIl9vbkNoYW5nZSIsImlkbGUiLCJ0eXBlIiwicGFyZW50IiwiYXJndW1lbnRzIiwiaWQiLCIkUCIsIlN5bWJvbCIsImZvciIsIkhBU19BTklNQVRFRCIsIklTX0FOSU1BVElORyIsIklTX1BBVVNFRCIsImhhc0FuaW1hdGVkIiwiaXNBbmltYXRpbmciLCJpc1BhdXNlZCIsInNldEFjdGl2ZUJpdCIsImFjdGl2ZSIsInNldFBhdXNlZEJpdCIsIlNwcmluZ1ZhbHVlIiwiX3N0YXRlIiwiZ29hbCIsImFuaW1hdGlvbiIsImxhc3RWZWxvY2l0eSIsIm5vZGUyIiwiaXNEZWxheWVkIiwiYWR2YW5jZSIsImR0IiwiYW5pbSIsInBheWxvYWQiLCJmb3JFYWNoIiwiZG9uZSIsImxhc3RQb3NpdGlvbiIsInBvc2l0aW9uIiwiZWxhcHNlZCIsImVsYXBzZWRUaW1lIiwidjAiLCJwcmVjaXNpb24iLCJtaW4iLCJhYnMiLCJfbWVtb2l6ZWREdXJhdGlvbiIsImR1cmF0aW9uUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImUiLCJleHAiLCJyZXN0VmVsb2NpdHkiLCJib3VuY2VGYWN0b3IiLCJib3VuY2UiLCJjYW5Cb3VuY2UiLCJpc0dyb3dpbmciLCJpc01vdmluZyIsImlzQm91bmNpbmciLCJzdGVwIiwibnVtU3RlcHMiLCJjZWlsIiwibiIsInNwcmluZ0ZvcmNlIiwiZGFtcGluZ0ZvcmNlIiwiYWNjZWxlcmF0aW9uIiwiTnVtYmVyIiwiY29uc29sZSIsIndhcm4iLCJzZXRWYWx1ZSIsInJvdW5kIiwiY3VyclZhbCIsImZpbmFsVmFsIiwiX3N0b3AiLCJzZXQiLCJfZm9jdXMiLCJfc2V0IiwiX3VwZGF0ZSIsImZpbmlzaCIsIl9vblN0YXJ0IiwidXAiLCJfbGFzdENhbGxJZCIsImV2ZW50T2JzZXJ2ZWQiLCJldmVudCIsIl9zdGFydCIsIl9wcmVwYXJlTm9kZSIsImlzTG9vcCIsInRlc3QiLCJtZXJnZUFjdGl2ZUZuIiwic2VuZEV2ZW50IiwiaXNGcm96ZW4iLCJjaGVja0ZpbmlzaGVkIiwiX3Jlc3VtZSIsIl9tZXJnZSIsIm5leHRQcm9wcyIsImNyZWF0ZUxvb3BVcGRhdGUiLCJoYXNUb1Byb3AiLCJoYXNGcm9tUHJvcCIsIl9sYXN0VG9JZCIsInByZXZGcm9tIiwiaGFzRnJvbUNoYW5nZWQiLCJoYXNUb0NoYW5nZWQiLCJoYXNBc3luY1RvIiwiaXNBbmltYXRhYmxlIiwibnVtIiwibm9kZVR5cGUiLCJuYW1lIiwiZ29hbFR5cGUiLCJzdGFydGVkIiwiaGFzVmFsdWVDaGFuZ2VkIiwiQUNUSVZFX0VWRU5UUyIsIl9wZW5kaW5nQ2FsbHMiLCJhcmciLCJvbGROb2RlIiwiY3JlYXRlIiwiU2V0IiwibG9vcFJldCIsIm92ZXJyaWRlcyIsImNyZWF0ZVVwZGF0ZSIsImZpbmREZWZpbmVkIiwic2l6ZSIsIkFycmF5IiwiZGVjbGFyZVVwZGF0ZSIsImlzNiIsInJhZjQiLCJlYWNoMyIsImZsdXNoMiIsInRvQXJyYXkzIiwiZWFjaFByb3A0IiwiZmx1c2hDYWxsczIiLCJhZGRGbHVpZE9ic2VydmVyMiIsIkJBVENIRURfRVZFTlRTIiwibmV4dElkMiIsIkNvbnRyb2xsZXIiLCJzcHJpbmdzIiwic3ByaW5nIiwiX2l0ZW0iLCJfZmx1c2giLCJwcmVwYXJlS2V5cyIsImZsdXNoVXBkYXRlUXVldWUiLCJfbGFzdEFzeW5jSWQiLCJpdGVyYXRvciIsIl9vbkZyYW1lIiwiX2V2ZW50cyIsIl9hY3RpdmUiLCJfY2hhbmdlZCIsIl9zdGFydGVkIiwib25TdGFydDIiLCJvbkNoYW5nZTIiLCJvblJlc3QyIiwib25GcmFtZSIsImZsdXNoMyIsIk1hcCIsImZsdXNoVXBkYXRlIiwiaGFuZGxlciIsInByb21pc2VzIiwiZ2V0U3ByaW5ncyIsInByZXBhcmVTcHJpbmdzIiwiY3JlYXRlU3ByaW5nIiwic2V0U3ByaW5ncyIsIm9ic2VydmVyIiwiUmVhY3QiLCJ1c2VNZW1vT25lIiwiU3ByaW5nQ29udGV4dCIsImluaGVyaXRlZCIsImN0eCIsIlByb3ZpZGVyIiwiY3JlYXRlRWxlbWVudCIsIm1ha2VDb250ZXh0IiwiQ29uc3VtZXIiLCJpbml0IiwiY3JlYXRlQ29udGV4dCIsIl9jb250ZXh0IiwiZWFjaDQiLCJpczciLCJkZXByZWNhdGVEaXJlY3RDYWxsIiwiU3ByaW5nUmVmIiwiU3ByaW5nUmVmMiIsIl9nZXRQcm9wcyIsImluZGV4T2YiLCJzcGxpY2UiLCJpbmRleCIsInVzZVNwcmluZ3MiLCJkZXBzIiwicHJvcHNGbiIsImxheW91dElkIiwiZm9yY2VVcGRhdGUiLCJjdHJscyIsInVwZGF0ZXMyIiwic3ByaW5nczIiLCJjYW5GbHVzaFN5bmMiLCJ1cGRhdGVzIiwicHJldkxlbmd0aCIsInNsaWNlIiwiZGVjbGFyZVVwZGF0ZXMiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjb250ZXh0IiwicHJldkNvbnRleHQiLCJoYXNDb250ZXh0IiwiY2IiLCJ4IiwidXNlU3ByaW5nIiwiaXNGbiIsInVzZVN0YXRlIiwiaW5pdFNwcmluZ1JlZiIsInVzZVNwcmluZ1JlZiIsInVzZUNvbnN0YW50IiwidXNlT25jZTIiLCJ1c2VTcHJpbmdWYWx1ZSIsInNwcmluZ1ZhbHVlIiwiZWFjaDYiLCJpczEwIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDMiLCJ1c2VUcmFpbCIsInByb3BzQXJnIiwicGFzc2VkUmVmIiwicHJvcHNBcmcyIiwiUmVhY3QyIiwidXNlQ29udGV4dDMiLCJ1c2VSZWYyIiwidXNlTWVtbzIiLCJpczExIiwidG9BcnJheTQiLCJ1c2VGb3JjZVVwZGF0ZTIiLCJ1c2VPbmNlMyIsInVzZVByZXYyIiwiZWFjaDciLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NCIsInVzZVRyYW5zaXRpb24iLCJkYXRhIiwiZXhpdEJlZm9yZUVudGVyIiwicHJvcHNSZWYiLCJwcm9wc0NvbmZpZyIsInRyYW5zaXRpb25zIiwidXNlZFRyYW5zaXRpb25zIiwicHJldlRyYW5zaXRpb25zIiwiZXhwaXJlZCIsImNsZWFyVGltZW91dCIsImV4cGlyYXRpb25JZCIsImdldEtleXMiLCJyZXVzZWQiLCJwaGFzZSIsImtleUluZGV4IiwicHJldkluZGV4IiwiYSIsImIiLCJjaGFuZ2VzIiwiZXhpdGluZ1RyYW5zaXRpb25zIiwiZm9yY2VDaGFuZ2UiLCJwcmV2UGhhc2UiLCJwcm9wc0RlbGF5IiwiaXNMZWF2ZSIsInAyIiwidHJhbnNpdGlvbnMyIiwidDIiLCJmaW5kIiwidDMiLCJleHBpcnkiLCJleHBpcnlNcyIsImluZCIsImZpbmRJbmRleCIsInJlbmRlclRyYW5zaXRpb25zIiwicmVuZGVyIiwiRnJhZ21lbnQiLCJlbGVtIiwic3RyIiwibmV4dEtleSIsImhhcyIsImVhY2g4Iiwib25TY3JvbGwiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NSIsInVzZVNjcm9sbCIsImNvbnRhaW5lciIsInNwcmluZ09wdGlvbnMiLCJzY3JvbGxWYWx1ZXMiLCJhcGkiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjcm9sbFhQcm9ncmVzcyIsInNjcm9sbFlQcm9ncmVzcyIsImNsZWFudXBTY3JvbGwiLCJ5Iiwib25SZXNpemUiLCJlYWNoOSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q2IiwidXNlUmVzaXplIiwic2l6ZVZhbHVlcyIsIndpZHRoIiwiaGVpZ2h0IiwidXNlUmVmMyIsInVzZVN0YXRlMiIsImlzMTIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NyIsImRlZmF1bHRUaHJlc2hvbGRPcHRpb25zIiwiYW55IiwidXNlSW5WaWV3IiwiaXNJblZpZXciLCJzZXRJc0luVmlldyIsInNwcmluZ3NQcm9wcyIsInJlc3RTcHJpbmdQcm9wcyIsImludGVyc2VjdGlvbkFyZ3VtZW50cyIsImVsZW1lbnQiLCJyb290Iiwib25jZSIsImFtb3VudCIsInJlc3RBcmdzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJhY3RpdmVJbnRlcnNlY3Rpb25zIiwiV2Vha01hcCIsIm9uRW50ZXIiLCJjbGVhbnVwIiwiaGFuZGxlSW50ZXJzZWN0aW9uIiwiZW50cmllcyIsImVudHJ5Iiwib25MZWF2ZSIsImlzSW50ZXJzZWN0aW5nIiwiQm9vbGVhbiIsIm5ld09uTGVhdmUiLCJ1bm9ic2VydmUiLCJ0aHJlc2hvbGQiLCJpc0FycmF5Iiwib2JzZXJ2ZSIsIlNwcmluZyIsImlzMTMiLCJUcmFpbCIsInRyYWlscyIsIlRyYW5zaXRpb24iLCJkZXByZWNhdGVJbnRlcnBvbGF0ZTIiLCJpczE0IiwicmFmNSIsImVhY2gxMCIsImlzRXF1YWwyIiwidG9BcnJheTUiLCJmcmFtZUxvb3AzIiwiZ2V0Rmx1aWRWYWx1ZTMiLCJjcmVhdGVJbnRlcnBvbGF0b3IiLCJHNiIsImNhbGxGbHVpZE9ic2VydmVyczMiLCJhZGRGbHVpZE9ic2VydmVyMyIsInJlbW92ZUZsdWlkT2JzZXJ2ZXIyIiwiaGFzRmx1aWRWYWx1ZTIiLCJnZXRBbmltYXRlZDMiLCJzZXRBbmltYXRlZDIiLCJnZXRBbmltYXRlZFR5cGUyIiwiZ2V0UGF5bG9hZDIiLCJJbnRlcnBvbGF0aW9uIiwiX2R0IiwiX2dldCIsIm9sZFZhbHVlIiwiY2hlY2tJZGxlIiwiYmVjb21lSWRsZSIsImlucHV0cyIsInNvdXJjZSIsImNhbGMiLCJtYXgiLCJyZWR1Y2UiLCJoaWdoZXN0IiwiaXNJZGxlIiwic2VsZiIsImZyYW1lTG9vcDQiLCJjcmVhdGVJbnRlcnBvbGF0b3IyIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDgiLCJ1c2VSZWR1Y2VkTW90aW9uIiwiZWFzaW5nczIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __raf: function() { return /* binding */ __raf; },\n/* harmony export */   raf: function() { return /* binding */ raf; }\n/* harmony export */ });\n// src/index.ts\nvar updateQueue = makeQueue();\nvar raf = (fn)=>schedule(fn, updateQueue);\nvar writeQueue = makeQueue();\nraf.write = (fn)=>schedule(fn, writeQueue);\nvar onStartQueue = makeQueue();\nraf.onStart = (fn)=>schedule(fn, onStartQueue);\nvar onFrameQueue = makeQueue();\nraf.onFrame = (fn)=>schedule(fn, onFrameQueue);\nvar onFinishQueue = makeQueue();\nraf.onFinish = (fn)=>schedule(fn, onFinishQueue);\nvar timeouts = [];\nraf.setTimeout = (handler, ms)=>{\n    const time = raf.now() + ms;\n    const cancel = ()=>{\n        const i = timeouts.findIndex((t)=>t.cancel == cancel);\n        if (~i) timeouts.splice(i, 1);\n        pendingCount -= ~i ? 1 : 0;\n    };\n    const timeout = {\n        time,\n        handler,\n        cancel\n    };\n    timeouts.splice(findTimeout(time), 0, timeout);\n    pendingCount += 1;\n    start();\n    return timeout;\n};\nvar findTimeout = (time)=>~(~timeouts.findIndex((t)=>t.time > time) || ~timeouts.length);\nraf.cancel = (fn)=>{\n    onStartQueue.delete(fn);\n    onFrameQueue.delete(fn);\n    onFinishQueue.delete(fn);\n    updateQueue.delete(fn);\n    writeQueue.delete(fn);\n};\nraf.sync = (fn)=>{\n    sync = true;\n    raf.batchedUpdates(fn);\n    sync = false;\n};\nraf.throttle = (fn)=>{\n    let lastArgs;\n    function queuedFn() {\n        try {\n            fn(...lastArgs);\n        } finally{\n            lastArgs = null;\n        }\n    }\n    function throttled() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        lastArgs = args;\n        raf.onStart(queuedFn);\n    }\n    throttled.handler = fn;\n    throttled.cancel = ()=>{\n        onStartQueue.delete(queuedFn);\n        lastArgs = null;\n    };\n    return throttled;\n};\nvar nativeRaf =  true ? window.requestAnimationFrame : // eslint-disable-next-line @typescript-eslint/no-empty-function\n0;\nraf.use = (impl)=>nativeRaf = impl;\nraf.now = typeof performance != \"undefined\" ? ()=>performance.now() : Date.now;\nraf.batchedUpdates = (fn)=>fn();\nraf.catch = console.error;\nraf.frameLoop = \"always\";\nraf.advance = ()=>{\n    if (raf.frameLoop !== \"demand\") {\n        console.warn(\"Cannot call the manual advancement of rafz whilst frameLoop is not set as demand\");\n    } else {\n        update();\n    }\n};\nvar ts = -1;\nvar pendingCount = 0;\nvar sync = false;\nfunction schedule(fn, queue) {\n    if (sync) {\n        queue.delete(fn);\n        fn(0);\n    } else {\n        queue.add(fn);\n        start();\n    }\n}\nfunction start() {\n    if (ts < 0) {\n        ts = 0;\n        if (raf.frameLoop !== \"demand\") {\n            nativeRaf(loop);\n        }\n    }\n}\nfunction stop() {\n    ts = -1;\n}\nfunction loop() {\n    if (~ts) {\n        nativeRaf(loop);\n        raf.batchedUpdates(update);\n    }\n}\nfunction update() {\n    const prevTs = ts;\n    ts = raf.now();\n    const count = findTimeout(ts);\n    if (count) {\n        eachSafely(timeouts.splice(0, count), (t)=>t.handler());\n        pendingCount -= count;\n    }\n    if (!pendingCount) {\n        stop();\n        return;\n    }\n    onStartQueue.flush();\n    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n    onFrameQueue.flush();\n    writeQueue.flush();\n    onFinishQueue.flush();\n}\nfunction makeQueue() {\n    let next = /* @__PURE__ */ new Set();\n    let current = next;\n    return {\n        add (fn) {\n            pendingCount += current == next && !next.has(fn) ? 1 : 0;\n            next.add(fn);\n        },\n        delete (fn) {\n            pendingCount -= current == next && next.has(fn) ? 1 : 0;\n            return next.delete(fn);\n        },\n        flush (arg) {\n            if (current.size) {\n                next = /* @__PURE__ */ new Set();\n                pendingCount -= current.size;\n                eachSafely(current, (fn)=>fn(arg) && next.add(fn));\n                pendingCount += next.size;\n                current = next;\n            }\n        }\n    };\n}\nfunction eachSafely(values, each) {\n    values.forEach((value)=>{\n        try {\n            each(value);\n        } catch (e) {\n            raf.catch(e);\n        }\n    });\n}\nvar __raf = {\n    /** The number of pending tasks */ count () {\n        return pendingCount;\n    },\n    /** Whether there's a raf update loop running */ isRunning () {\n        return ts >= 0;\n    },\n    /** Clear internal state. Never call from update loop! */ clear () {\n        ts = -1;\n        timeouts = [];\n        onStartQueue = makeQueue();\n        updateQueue = makeQueue();\n        onFrameQueue = makeQueue();\n        writeQueue = makeQueue();\n        onFinishQueue = makeQueue();\n        pendingCount = 0;\n    }\n};\n //# sourceMappingURL=react-spring_rafz.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FluidValue: function() { return /* binding */ FluidValue; },\n/* harmony export */   Globals: function() { return /* binding */ globals_exports; },\n/* harmony export */   addFluidObserver: function() { return /* binding */ addFluidObserver; },\n/* harmony export */   callFluidObserver: function() { return /* binding */ callFluidObserver; },\n/* harmony export */   callFluidObservers: function() { return /* binding */ callFluidObservers; },\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   colorToRgba: function() { return /* binding */ colorToRgba; },\n/* harmony export */   colors: function() { return /* binding */ colors2; },\n/* harmony export */   createInterpolator: function() { return /* binding */ createInterpolator; },\n/* harmony export */   createStringInterpolator: function() { return /* binding */ createStringInterpolator2; },\n/* harmony export */   defineHidden: function() { return /* binding */ defineHidden; },\n/* harmony export */   deprecateDirectCall: function() { return /* binding */ deprecateDirectCall; },\n/* harmony export */   deprecateInterpolate: function() { return /* binding */ deprecateInterpolate; },\n/* harmony export */   each: function() { return /* binding */ each; },\n/* harmony export */   eachProp: function() { return /* binding */ eachProp; },\n/* harmony export */   easings: function() { return /* binding */ easings; },\n/* harmony export */   flush: function() { return /* binding */ flush; },\n/* harmony export */   flushCalls: function() { return /* binding */ flushCalls; },\n/* harmony export */   frameLoop: function() { return /* binding */ frameLoop; },\n/* harmony export */   getFluidObservers: function() { return /* binding */ getFluidObservers; },\n/* harmony export */   getFluidValue: function() { return /* binding */ getFluidValue; },\n/* harmony export */   hasFluidValue: function() { return /* binding */ hasFluidValue; },\n/* harmony export */   hex3: function() { return /* binding */ hex3; },\n/* harmony export */   hex4: function() { return /* binding */ hex4; },\n/* harmony export */   hex6: function() { return /* binding */ hex6; },\n/* harmony export */   hex8: function() { return /* binding */ hex8; },\n/* harmony export */   hsl: function() { return /* binding */ hsl; },\n/* harmony export */   hsla: function() { return /* binding */ hsla; },\n/* harmony export */   is: function() { return /* binding */ is; },\n/* harmony export */   isAnimatedString: function() { return /* binding */ isAnimatedString; },\n/* harmony export */   isEqual: function() { return /* binding */ isEqual; },\n/* harmony export */   isSSR: function() { return /* binding */ isSSR; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   onResize: function() { return /* binding */ onResize; },\n/* harmony export */   onScroll: function() { return /* binding */ onScroll; },\n/* harmony export */   once: function() { return /* binding */ once; },\n/* harmony export */   prefix: function() { return /* binding */ prefix; },\n/* harmony export */   raf: function() { return /* reexport safe */ _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf; },\n/* harmony export */   removeFluidObserver: function() { return /* binding */ removeFluidObserver; },\n/* harmony export */   rgb: function() { return /* binding */ rgb; },\n/* harmony export */   rgba: function() { return /* binding */ rgba; },\n/* harmony export */   setFluidGetter: function() { return /* binding */ setFluidGetter; },\n/* harmony export */   toArray: function() { return /* binding */ toArray; },\n/* harmony export */   useConstant: function() { return /* binding */ useConstant; },\n/* harmony export */   useForceUpdate: function() { return /* binding */ useForceUpdate; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* binding */ useIsomorphicLayoutEffect; },\n/* harmony export */   useMemoOne: function() { return /* binding */ useMemoOne; },\n/* harmony export */   useOnce: function() { return /* binding */ useOnce; },\n/* harmony export */   usePrev: function() { return /* binding */ usePrev; },\n/* harmony export */   useReducedMotion: function() { return /* binding */ useReducedMotion; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/rafz */ \"(app-pages-browser)/./node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$();\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/globals.ts\nvar globals_exports = {};\n__export(globals_exports, {\n    assign: ()=>assign,\n    colors: ()=>colors,\n    createStringInterpolator: ()=>createStringInterpolator,\n    skipAnimation: ()=>skipAnimation,\n    to: ()=>to,\n    willAdvance: ()=>willAdvance\n});\n\n// src/helpers.ts\nfunction noop() {}\nvar defineHidden = (obj, key, value)=>Object.defineProperty(obj, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\nvar is = {\n    arr: Array.isArray,\n    obj: (a)=>!!a && a.constructor.name === \"Object\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    und: (a)=>a === void 0\n};\nfunction isEqual(a, b) {\n    if (is.arr(a)) {\n        if (!is.arr(b) || a.length !== b.length) return false;\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n    return a === b;\n}\nvar each = (obj, fn)=>obj.forEach(fn);\nfunction eachProp(obj, fn, ctx) {\n    if (is.arr(obj)) {\n        for(let i = 0; i < obj.length; i++){\n            fn.call(ctx, obj[i], \"\".concat(i));\n        }\n        return;\n    }\n    for(const key in obj){\n        if (obj.hasOwnProperty(key)) {\n            fn.call(ctx, obj[key], key);\n        }\n    }\n}\nvar toArray = (a)=>is.und(a) ? [] : is.arr(a) ? a : [\n        a\n    ];\nfunction flush(queue, iterator) {\n    if (queue.size) {\n        const items = Array.from(queue);\n        queue.clear();\n        each(items, iterator);\n    }\n}\nvar flushCalls = function(queue) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return flush(queue, (fn)=>fn(...args));\n};\nvar isSSR = ()=> false || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\n// src/globals.ts\nvar createStringInterpolator;\nvar to;\nvar colors = null;\nvar skipAnimation = false;\nvar willAdvance = noop;\nvar assign = (globals)=>{\n    if (globals.to) to = globals.to;\n    if (globals.now) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.now = globals.now;\n    if (globals.colors !== void 0) colors = globals.colors;\n    if (globals.skipAnimation != null) skipAnimation = globals.skipAnimation;\n    if (globals.createStringInterpolator) createStringInterpolator = globals.createStringInterpolator;\n    if (globals.requestAnimationFrame) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.use(globals.requestAnimationFrame);\n    if (globals.batchedUpdates) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates = globals.batchedUpdates;\n    if (globals.willAdvance) willAdvance = globals.willAdvance;\n    if (globals.frameLoop) _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.frameLoop = globals.frameLoop;\n};\n// src/FrameLoop.ts\n\nvar startQueue = /* @__PURE__ */ new Set();\nvar currentFrame = [];\nvar prevFrame = [];\nvar priority = 0;\nvar frameLoop = {\n    get idle () {\n        return !startQueue.size && !currentFrame.length;\n    },\n    /** Advance the given animation on every frame until idle. */ start (animation) {\n        if (priority > animation.priority) {\n            startQueue.add(animation);\n            _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.onStart(flushStartQueue);\n        } else {\n            startSafely(animation);\n            (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(advance);\n        }\n    },\n    /** Advance all animations by the given time. */ advance,\n    /** Call this when an animation's priority changes. */ sort (animation) {\n        if (priority) {\n            _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(()=>frameLoop.sort(animation));\n        } else {\n            const prevIndex = currentFrame.indexOf(animation);\n            if (~prevIndex) {\n                currentFrame.splice(prevIndex, 1);\n                startUnsafely(animation);\n            }\n        }\n    },\n    /**\n   * Clear all animations. For testing purposes.\n   *\n   * ☠️ Never call this from within the frameloop.\n   */ clear () {\n        currentFrame = [];\n        startQueue.clear();\n    }\n};\nfunction flushStartQueue() {\n    startQueue.forEach(startSafely);\n    startQueue.clear();\n    (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(advance);\n}\nfunction startSafely(animation) {\n    if (!currentFrame.includes(animation)) startUnsafely(animation);\n}\nfunction startUnsafely(animation) {\n    currentFrame.splice(findIndex(currentFrame, (other)=>other.priority > animation.priority), 0, animation);\n}\nfunction advance(dt) {\n    const nextFrame = prevFrame;\n    for(let i = 0; i < currentFrame.length; i++){\n        const animation = currentFrame[i];\n        priority = animation.priority;\n        if (!animation.idle) {\n            willAdvance(animation);\n            animation.advance(dt);\n            if (!animation.idle) {\n                nextFrame.push(animation);\n            }\n        }\n    }\n    priority = 0;\n    prevFrame = currentFrame;\n    prevFrame.length = 0;\n    currentFrame = nextFrame;\n    return currentFrame.length > 0;\n}\nfunction findIndex(arr, test) {\n    const index = arr.findIndex(test);\n    return index < 0 ? arr.length : index;\n}\n// src/clamp.ts\nvar clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\n// src/colors.ts\nvar colors2 = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n};\n// src/colorMatchers.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call() {\n    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++){\n        parts[_key] = arguments[_key];\n    }\n    return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nvar rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nvar rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nvar hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nvar hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nvar hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex6 = /^#([0-9a-fA-F]{6})$/;\nvar hex8 = /^#([0-9a-fA-F]{8})$/;\n// src/normalizeColor.ts\nfunction normalizeColor(color) {\n    let match;\n    if (typeof color === \"number\") {\n        return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n    }\n    if (match = hex6.exec(color)) return parseInt(match[1] + \"ff\", 16) >>> 0;\n    if (colors && colors[color] !== void 0) {\n        return colors[color];\n    }\n    if (match = rgb.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        255) >>> // a\n        0;\n    }\n    if (match = rgba.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        parse1(match[4])) >>> // a\n        0;\n    }\n    if (match = hex3.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        \"ff\", // a\n        16) >>> 0;\n    }\n    if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n    if (match = hex4.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        match[4] + match[4], // a\n        16) >>> 0;\n    }\n    if (match = hsl.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | 255) >>> // a\n        0;\n    }\n    if (match = hsla.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | parse1(match[4])) >>> // a\n        0;\n    }\n    return null;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n    const int = parseInt(str, 10);\n    if (int < 0) return 0;\n    if (int > 255) return 255;\n    return int;\n}\nfunction parse360(str) {\n    const int = parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n    const num = parseFloat(str);\n    if (num < 0) return 0;\n    if (num > 1) return 255;\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    const int = parseFloat(str);\n    if (int < 0) return 0;\n    if (int > 100) return 1;\n    return int / 100;\n}\n// src/colorToRgba.ts\nfunction colorToRgba(input) {\n    let int32Color = normalizeColor(input);\n    if (int32Color === null) return input;\n    int32Color = int32Color || 0;\n    const r = (int32Color & 4278190080) >>> 24;\n    const g = (int32Color & 16711680) >>> 16;\n    const b = (int32Color & 65280) >>> 8;\n    const a = (int32Color & 255) / 255;\n    return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n}\n// src/createInterpolator.ts\nvar createInterpolator = (range, output, extrapolate)=>{\n    if (is.fun(range)) {\n        return range;\n    }\n    if (is.arr(range)) {\n        return createInterpolator({\n            range,\n            output,\n            extrapolate\n        });\n    }\n    if (is.str(range.output[0])) {\n        return createStringInterpolator(range);\n    }\n    const config = range;\n    const outputRange = config.output;\n    const inputRange = config.range || [\n        0,\n        1\n    ];\n    const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n    const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n    const easing = config.easing || ((t)=>t);\n    return (input)=>{\n        const range2 = findRange(input, inputRange);\n        return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n    };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n    let result = map ? map(input) : input;\n    if (result < inputMin) {\n        if (extrapolateLeft === \"identity\") return result;\n        else if (extrapolateLeft === \"clamp\") result = inputMin;\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === \"identity\") return result;\n        else if (extrapolateRight === \"clamp\") result = inputMax;\n    }\n    if (outputMin === outputMax) return outputMin;\n    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n    if (inputMin === -Infinity) result = -result;\n    else if (inputMax === Infinity) result = result - inputMin;\n    else result = (result - inputMin) / (inputMax - inputMin);\n    result = easing(result);\n    if (outputMin === -Infinity) result = -result;\n    else if (outputMax === Infinity) result = result + outputMin;\n    else result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    for(var i = 1; i < inputRange.length - 1; ++i)if (inputRange[i] >= input) break;\n    return i - 1;\n}\n// src/easings.ts\nvar steps = function(steps2) {\n    let direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"end\";\n    return (progress2)=>{\n        progress2 = direction === \"end\" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);\n        const expanded = progress2 * steps2;\n        const rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clamp(0, 1, rounded / steps2);\n    };\n};\nvar c1 = 1.70158;\nvar c2 = c1 * 1.525;\nvar c3 = c1 + 1;\nvar c4 = 2 * Math.PI / 3;\nvar c5 = 2 * Math.PI / 4.5;\nvar bounceOut = (x)=>{\n    const n1 = 7.5625;\n    const d1 = 2.75;\n    if (x < 1 / d1) {\n        return n1 * x * x;\n    } else if (x < 2 / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n};\nvar easings = {\n    linear: (x)=>x,\n    easeInQuad: (x)=>x * x,\n    easeOutQuad: (x)=>1 - (1 - x) * (1 - x),\n    easeInOutQuad: (x)=>x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,\n    easeInCubic: (x)=>x * x * x,\n    easeOutCubic: (x)=>1 - Math.pow(1 - x, 3),\n    easeInOutCubic: (x)=>x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,\n    easeInQuart: (x)=>x * x * x * x,\n    easeOutQuart: (x)=>1 - Math.pow(1 - x, 4),\n    easeInOutQuart: (x)=>x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,\n    easeInQuint: (x)=>x * x * x * x * x,\n    easeOutQuint: (x)=>1 - Math.pow(1 - x, 5),\n    easeInOutQuint: (x)=>x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,\n    easeInSine: (x)=>1 - Math.cos(x * Math.PI / 2),\n    easeOutSine: (x)=>Math.sin(x * Math.PI / 2),\n    easeInOutSine: (x)=>-(Math.cos(Math.PI * x) - 1) / 2,\n    easeInExpo: (x)=>x === 0 ? 0 : Math.pow(2, 10 * x - 10),\n    easeOutExpo: (x)=>x === 1 ? 1 : 1 - Math.pow(2, -10 * x),\n    easeInOutExpo: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,\n    easeInCirc: (x)=>1 - Math.sqrt(1 - Math.pow(x, 2)),\n    easeOutCirc: (x)=>Math.sqrt(1 - Math.pow(x - 1, 2)),\n    easeInOutCirc: (x)=>x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,\n    easeInBack: (x)=>c3 * x * x * x - c1 * x * x,\n    easeOutBack: (x)=>1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),\n    easeInOutBack: (x)=>x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,\n    easeInElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),\n    easeOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,\n    easeInOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,\n    easeInBounce: (x)=>1 - bounceOut(1 - x),\n    easeOutBounce: bounceOut,\n    easeInOutBounce: (x)=>x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n    steps\n};\n// src/fluids.ts\nvar $get = Symbol.for(\"FluidValue.get\");\nvar $observers = Symbol.for(\"FluidValue.observers\");\nvar hasFluidValue = (arg)=>Boolean(arg && arg[$get]);\nvar getFluidValue = (arg)=>arg && arg[$get] ? arg[$get]() : arg;\nvar getFluidObservers = (target)=>target[$observers] || null;\nfunction callFluidObserver(observer2, event) {\n    if (observer2.eventObserved) {\n        observer2.eventObserved(event);\n    } else {\n        observer2(event);\n    }\n}\nfunction callFluidObservers(target, event) {\n    const observers = target[$observers];\n    if (observers) {\n        observers.forEach((observer2)=>{\n            callFluidObserver(observer2, event);\n        });\n    }\n}\nvar FluidValue = class {\n    constructor(get){\n        if (!get && !(get = this.get)) {\n            throw Error(\"Unknown getter\");\n        }\n        setFluidGetter(this, get);\n    }\n};\n$get, $observers;\nvar setFluidGetter = (target, get)=>setHidden(target, $get, get);\nfunction addFluidObserver(target, observer2) {\n    if (target[$get]) {\n        let observers = target[$observers];\n        if (!observers) {\n            setHidden(target, $observers, observers = /* @__PURE__ */ new Set());\n        }\n        if (!observers.has(observer2)) {\n            observers.add(observer2);\n            if (target.observerAdded) {\n                target.observerAdded(observers.size, observer2);\n            }\n        }\n    }\n    return observer2;\n}\nfunction removeFluidObserver(target, observer2) {\n    const observers = target[$observers];\n    if (observers && observers.has(observer2)) {\n        const count = observers.size - 1;\n        if (count) {\n            observers.delete(observer2);\n        } else {\n            target[$observers] = null;\n        }\n        if (target.observerRemoved) {\n            target.observerRemoved(count, observer2);\n        }\n    }\n}\nvar setHidden = (target, key, value)=>Object.defineProperty(target, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\n// src/regexs.ts\nvar numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nvar unitRegex = new RegExp(\"(\".concat(numberRegex.source, \")(%|[a-z]+)\"), \"i\");\nvar rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n// src/variableToRgba.ts\nvar variableToRgba = (input)=>{\n    const [token, fallback] = parseCSSVariable(input);\n    if (!token || isSSR()) {\n        return input;\n    }\n    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);\n    if (value) {\n        return value.trim();\n    } else if (fallback && fallback.startsWith(\"--\")) {\n        const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);\n        if (value2) {\n            return value2;\n        } else {\n            return input;\n        }\n    } else if (fallback && cssVariableRegex.test(fallback)) {\n        return variableToRgba(fallback);\n    } else if (fallback) {\n        return fallback;\n    }\n    return input;\n};\nvar parseCSSVariable = (current)=>{\n    const match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n};\n// src/stringInterpolation.ts\nvar namedColorRegex;\nvar rgbaRound = (_, p1, p2, p3, p4)=>\"rgba(\".concat(Math.round(p1), \", \").concat(Math.round(p2), \", \").concat(Math.round(p3), \", \").concat(p4, \")\");\nvar createStringInterpolator2 = (config)=>{\n    if (!namedColorRegex) namedColorRegex = colors ? // match color names, ignore partial matches\n    new RegExp(\"(\".concat(Object.keys(colors).join(\"|\"), \")(?!\\\\w)\"), \"g\") : // never match\n    /^\\b$/;\n    const output = config.output.map((value)=>{\n        return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);\n    });\n    const keyframes = output.map((value)=>value.match(numberRegex).map(Number));\n    const outputRanges = keyframes[0].map((_, i)=>keyframes.map((values)=>{\n            if (!(i in values)) {\n                throw Error('The arity of each \"output\" value must be equal');\n            }\n            return values[i];\n        }));\n    const interpolators = outputRanges.map((output2)=>createInterpolator({\n            ...config,\n            output: output2\n        }));\n    return (input)=>{\n        var _output_find;\n        const missingUnit = !unitRegex.test(output[0]) && ((_output_find = output.find((value)=>unitRegex.test(value))) === null || _output_find === void 0 ? void 0 : _output_find.replace(numberRegex, \"\"));\n        let i = 0;\n        return output[0].replace(numberRegex, ()=>\"\".concat(interpolators[i++](input)).concat(missingUnit || \"\")).replace(rgbaRegex, rgbaRound);\n    };\n};\n// src/deprecations.ts\nvar prefix = \"react-spring: \";\nvar once = (fn)=>{\n    const func = fn;\n    let called = false;\n    if (typeof func != \"function\") {\n        throw new TypeError(\"\".concat(prefix, \"once requires a function parameter\"));\n    }\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!called) {\n            func(...args);\n            called = true;\n        }\n    };\n};\nvar warnInterpolate = once(console.warn);\nfunction deprecateInterpolate() {\n    warnInterpolate(\"\".concat(prefix, 'The \"interpolate\" function is deprecated in v9 (use \"to\" instead)'));\n}\nvar warnDirectCall = once(console.warn);\nfunction deprecateDirectCall() {\n    warnDirectCall(\"\".concat(prefix, 'Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions'));\n}\n// src/isAnimatedString.ts\nfunction isAnimatedString(value) {\n    return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR\n    !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));\n}\n// src/dom-events/scroll/index.ts\n\n// src/dom-events/resize/resizeElement.ts\nvar observer;\nvar resizeHandlers = /* @__PURE__ */ new WeakMap();\nvar handleObservation = (entries)=>entries.forEach((param)=>{\n        let { target, contentRect } = param;\n        var _resizeHandlers_get;\n        return (_resizeHandlers_get = resizeHandlers.get(target)) === null || _resizeHandlers_get === void 0 ? void 0 : _resizeHandlers_get.forEach((handler)=>handler(contentRect));\n    });\nfunction resizeElement(handler, target) {\n    if (!observer) {\n        if (typeof ResizeObserver !== \"undefined\") {\n            observer = new ResizeObserver(handleObservation);\n        }\n    }\n    let elementHandlers = resizeHandlers.get(target);\n    if (!elementHandlers) {\n        elementHandlers = /* @__PURE__ */ new Set();\n        resizeHandlers.set(target, elementHandlers);\n    }\n    elementHandlers.add(handler);\n    if (observer) {\n        observer.observe(target);\n    }\n    return ()=>{\n        const elementHandlers2 = resizeHandlers.get(target);\n        if (!elementHandlers2) return;\n        elementHandlers2.delete(handler);\n        if (!elementHandlers2.size && observer) {\n            observer.unobserve(target);\n        }\n    };\n}\n// src/dom-events/resize/resizeWindow.ts\nvar listeners = /* @__PURE__ */ new Set();\nvar cleanupWindowResizeHandler;\nvar createResizeHandler = ()=>{\n    const handleResize = ()=>{\n        listeners.forEach((callback)=>callback({\n                width: window.innerWidth,\n                height: window.innerHeight\n            }));\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return ()=>{\n        window.removeEventListener(\"resize\", handleResize);\n    };\n};\nvar resizeWindow = (callback)=>{\n    listeners.add(callback);\n    if (!cleanupWindowResizeHandler) {\n        cleanupWindowResizeHandler = createResizeHandler();\n    }\n    return ()=>{\n        listeners.delete(callback);\n        if (!listeners.size && cleanupWindowResizeHandler) {\n            cleanupWindowResizeHandler();\n            cleanupWindowResizeHandler = void 0;\n        }\n    };\n};\n// src/dom-events/resize/index.ts\nvar onResize = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (container === document.documentElement) {\n        return resizeWindow(callback);\n    } else {\n        return resizeElement(callback, container);\n    }\n};\n// src/progress.ts\nvar progress = (min, max, value)=>max - min === 0 ? 1 : (value - min) / (max - min);\n// src/dom-events/scroll/ScrollHandler.ts\nvar SCROLL_KEYS = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nvar ScrollHandler = class {\n    constructor(callback, container){\n        this.createAxis = ()=>({\n                current: 0,\n                progress: 0,\n                scrollLength: 0\n            });\n        this.updateAxis = (axisName)=>{\n            const axis = this.info[axisName];\n            const { length, position } = SCROLL_KEYS[axisName];\n            axis.current = this.container[\"scroll\".concat(position)];\n            axis.scrollLength = this.container[\"scroll\".concat(length)] - this.container[\"client\".concat(length)];\n            axis.progress = progress(0, axis.scrollLength, axis.current);\n        };\n        this.update = ()=>{\n            this.updateAxis(\"x\");\n            this.updateAxis(\"y\");\n        };\n        this.sendEvent = ()=>{\n            this.callback(this.info);\n        };\n        this.advance = ()=>{\n            this.update();\n            this.sendEvent();\n        };\n        this.callback = callback;\n        this.container = container;\n        this.info = {\n            time: 0,\n            x: this.createAxis(),\n            y: this.createAxis()\n        };\n    }\n};\n// src/dom-events/scroll/index.ts\nvar scrollListeners = /* @__PURE__ */ new WeakMap();\nvar resizeListeners = /* @__PURE__ */ new WeakMap();\nvar onScrollHandlers = /* @__PURE__ */ new WeakMap();\nvar getTarget = (container)=>container === document.documentElement ? window : container;\nvar onScroll = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let containerHandlers = onScrollHandlers.get(container);\n    if (!containerHandlers) {\n        containerHandlers = /* @__PURE__ */ new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    const containerHandler = new ScrollHandler(callback, container);\n    containerHandlers.add(containerHandler);\n    if (!scrollListeners.has(container)) {\n        const listener = ()=>{\n            containerHandlers === null || containerHandlers === void 0 ? void 0 : containerHandlers.forEach((handler)=>handler.advance());\n            return true;\n        };\n        scrollListeners.set(container, listener);\n        const target = getTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, onResize(listener, {\n                container\n            }));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const animateScroll = scrollListeners.get(container);\n    (0,_react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf)(animateScroll);\n    return ()=>{\n        _react_spring_rafz__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(animateScroll);\n        const containerHandlers2 = onScrollHandlers.get(container);\n        if (!containerHandlers2) return;\n        containerHandlers2.delete(containerHandler);\n        if (containerHandlers2.size) return;\n        const listener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (listener) {\n            var _resizeListeners_get;\n            getTarget(container).removeEventListener(\"scroll\", listener);\n            window.removeEventListener(\"resize\", listener);\n            (_resizeListeners_get = resizeListeners.get(container)) === null || _resizeListeners_get === void 0 ? void 0 : _resizeListeners_get();\n        }\n    };\n};\n// src/hooks/useConstant.ts\n\nfunction useConstant(init) {\n    _s();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n_s(useConstant, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n// src/hooks/useForceUpdate.ts\n\n// src/hooks/useIsMounted.ts\n\n// src/hooks/useIsomorphicLayoutEffect.ts\n\nvar useIsomorphicLayoutEffect = isSSR() ? react__WEBPACK_IMPORTED_MODULE_1__.useEffect : react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect;\n// src/hooks/useIsMounted.ts\nvar useIsMounted = ()=>{\n    _s1();\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n};\n_s1(useIsMounted, \"GqP4G6sWCYbmz6Eh2Z3j0cot7Cw=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useForceUpdate.ts\nfunction useForceUpdate() {\n    _s2();\n    const update = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)()[1];\n    const isMounted = useIsMounted();\n    return ()=>{\n        if (isMounted.current) {\n            update(Math.random());\n        }\n    };\n}\n_s2(useForceUpdate, \"dAwzAW7N5iazLr46M/UqCRwjpnw=\", false, function() {\n    return [\n        useIsMounted\n    ];\n});\n// src/hooks/useMemoOne.ts\n\nfunction useMemoOne(getResult, inputs) {\n    _s3();\n    const [initial] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>({\n            inputs,\n            result: getResult()\n        }));\n    const committed = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const prevCache = committed.current;\n    let cache = prevCache;\n    if (cache) {\n        const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n        if (!useCache) {\n            cache = {\n                inputs,\n                result: getResult()\n            };\n        }\n    } else {\n        cache = initial;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        committed.current = cache;\n        if (prevCache == initial) {\n            initial.inputs = initial.result = void 0;\n        }\n    }, [\n        cache\n    ]);\n    return cache.result;\n}\n_s3(useMemoOne, \"E8Xkzq53aNWRw5eQWq1UgxrUZ2I=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\nfunction areInputsEqual(next, prev) {\n    if (next.length !== prev.length) {\n        return false;\n    }\n    for(let i = 0; i < next.length; i++){\n        if (next[i] !== prev[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/hooks/useOnce.ts\n\nvar useOnce = (effect)=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(effect, emptyDeps);\n};\n_s4(useOnce, \"OaUcBvmIE4tjZkb4wJgVrFeSKZM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\nvar emptyDeps = [];\n// src/hooks/usePrev.ts\n\nfunction usePrev(value) {\n    _s5();\n    const prevRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        prevRef.current = value;\n    });\n    return prevRef.current;\n}\n_s5(usePrev, \"I0hJAHPQfpBUlJyIK2lT9vxbY4Y=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect\n    ];\n});\n// src/hooks/useReducedMotion.ts\n\nvar useReducedMotion = ()=>{\n    _s6();\n    const [reducedMotion, setReducedMotion] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    useIsomorphicLayoutEffect(()=>{\n        const mql = window.matchMedia(\"(prefers-reduced-motion)\");\n        const handleMediaChange = (e)=>{\n            setReducedMotion(e.matches);\n            assign({\n                skipAnimation: e.matches\n            });\n        };\n        handleMediaChange(mql);\n        if (mql.addEventListener) {\n            mql.addEventListener(\"change\", handleMediaChange);\n        } else {\n            mql.addListener(handleMediaChange);\n        }\n        return ()=>{\n            if (mql.removeEventListener) {\n                mql.removeEventListener(\"change\", handleMediaChange);\n            } else {\n                mql.removeListener(handleMediaChange);\n            }\n        };\n    }, []);\n    return reducedMotion;\n};\n_s6(useReducedMotion, \"4F50ZPZIooo/aDgecWivihMvS7g=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        useIsomorphicLayoutEffect\n    ];\n});\n// src/index.ts\n\n //# sourceMappingURL=react-spring_shared.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* binding */ Any; }\n/* harmony export */ });\n// src/utils.ts\nvar Any = class {\n};\n //# sourceMappingURL=react-spring_types.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3R5cGVzL2Rpc3QvcmVhY3Qtc3ByaW5nX3R5cGVzLm1vZGVybi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWU7QUFDZixJQUFJQSxNQUFNO0FBQ1Y7QUFHRSxDQUNGLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXNwcmluZy90eXBlcy9kaXN0L3JlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzP2FiYjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzLnRzXG52YXIgQW55ID0gY2xhc3Mge1xufTtcbmV4cG9ydCB7XG4gIEFueVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6WyJBbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Any; },\n/* harmony export */   BailSignal: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.BailSignal; },\n/* harmony export */   Controller: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Controller; },\n/* harmony export */   FrameValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Interpolation; },\n/* harmony export */   Spring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Spring; },\n/* harmony export */   SpringContext: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringContext; },\n/* harmony export */   SpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringRef; },\n/* harmony export */   SpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringValue; },\n/* harmony export */   Trail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Trail; },\n/* harmony export */   Transition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Transition; },\n/* harmony export */   a: function() { return /* binding */ animated; },\n/* harmony export */   animated: function() { return /* binding */ animated; },\n/* harmony export */   config: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.inferTo; },\n/* harmony export */   interpolate: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.interpolate; },\n/* harmony export */   to: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.to; },\n/* harmony export */   update: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.update; },\n/* harmony export */   useChain: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useChain; },\n/* harmony export */   useInView: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useResize; },\n/* harmony export */   useScroll: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useScroll; },\n/* harmony export */   useSpring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpring; },\n/* harmony export */   useSpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringValue; },\n/* harmony export */   useSprings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSprings; },\n/* harmony export */   useTrail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTrail; },\n/* harmony export */   useTransition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/core */ \"(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n// src/index.ts\n\n\n\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n    if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n    if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + \"px\";\n    return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n    if (!instance.nodeType || !instance.setAttribute) {\n        return false;\n    }\n    const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n    const { className, style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;\n    const values = Object.values(attributes);\n    const names = Object.keys(attributes).map((name)=>isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, // Attributes are written in dash case\n        (n)=>\"-\" + n.toLowerCase())));\n    if (children !== void 0) {\n        instance.textContent = children;\n    }\n    for(const name in style){\n        if (style.hasOwnProperty(name)) {\n            const value = dangerousStyleValue(name, style[name]);\n            if (isCustomPropRE.test(name)) {\n                instance.style.setProperty(name, value);\n            } else {\n                instance.style[name] = value;\n            }\n        }\n    }\n    names.forEach((name, i)=>{\n        instance.setAttribute(name, values[i]);\n    });\n    if (className !== void 0) {\n        instance.className = className;\n    }\n    if (scrollTop !== void 0) {\n        instance.scrollTop = scrollTop;\n    }\n    if (scrollLeft !== void 0) {\n        instance.scrollLeft = scrollLeft;\n    }\n    if (viewBox !== void 0) {\n        instance.setAttribute(\"viewBox\", viewBox);\n    }\n}\nvar isUnitlessNumber = {\n    animationIterationCount: true,\n    borderImageOutset: true,\n    borderImageSlice: true,\n    borderImageWidth: true,\n    boxFlex: true,\n    boxFlexGroup: true,\n    boxOrdinalGroup: true,\n    columnCount: true,\n    columns: true,\n    flex: true,\n    flexGrow: true,\n    flexPositive: true,\n    flexShrink: true,\n    flexNegative: true,\n    flexOrder: true,\n    gridRow: true,\n    gridRowEnd: true,\n    gridRowSpan: true,\n    gridRowStart: true,\n    gridColumn: true,\n    gridColumnEnd: true,\n    gridColumnSpan: true,\n    gridColumnStart: true,\n    fontWeight: true,\n    lineClamp: true,\n    lineHeight: true,\n    opacity: true,\n    order: true,\n    orphans: true,\n    tabSize: true,\n    widows: true,\n    zIndex: true,\n    zoom: true,\n    // SVG-related properties\n    fillOpacity: true,\n    floodOpacity: true,\n    stopOpacity: true,\n    strokeDasharray: true,\n    strokeDashoffset: true,\n    strokeMiterlimit: true,\n    strokeOpacity: true,\n    strokeWidth: true\n};\nvar prefixKey = (prefix, key)=>prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\n    \"Webkit\",\n    \"Ms\",\n    \"Moz\",\n    \"O\"\n];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop)=>{\n    prefixes.forEach((prefix)=>acc[prefixKey(prefix, prop)] = acc[prop]);\n    return acc;\n}, isUnitlessNumber);\n// src/AnimatedStyle.ts\n\n\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(value) ? value.every((v)=>isValueIdentity(v, id)) : _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.AnimatedObject {\n    constructor({ x, y, z, ...style }){\n        const inputs = [];\n        const transforms = [];\n        if (x || y || z) {\n            inputs.push([\n                x || 0,\n                y || 0,\n                z || 0\n            ]);\n            transforms.push((xyz)=>[\n                    \"translate3d(\".concat(xyz.map((v)=>addUnit(v, \"px\")).join(\",\"), \")\"),\n                    // prettier-ignore\n                    isValueIdentity(xyz, 0)\n                ]);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.eachProp)(style, (value, key)=>{\n            if (key === \"transform\") {\n                inputs.push([\n                    value || \"\"\n                ]);\n                transforms.push((transform)=>[\n                        transform,\n                        transform === \"\"\n                    ]);\n            } else if (domTransforms.test(key)) {\n                delete style[key];\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.und(value)) return;\n                const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n                inputs.push((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.toArray)(value));\n                transforms.push(key === \"rotate3d\" ? (param)=>{\n                    let [x2, y2, z2, deg] = param;\n                    return [\n                        \"rotate3d(\".concat(x2, \",\").concat(y2, \",\").concat(z2, \",\").concat(addUnit(deg, unit), \")\"),\n                        isValueIdentity(deg, 0)\n                    ];\n                } : (input)=>[\n                        \"\".concat(key, \"(\").concat(input.map((v)=>addUnit(v, unit)).join(\",\"), \")\"),\n                        isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n                    ]);\n            }\n        });\n        if (inputs.length) {\n            style.transform = new FluidTransform(inputs, transforms);\n        }\n        super(style);\n    }\n};\nvar FluidTransform = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.FluidValue {\n    get() {\n        return this._value || (this._value = this._get());\n    }\n    _get() {\n        let transform = \"\";\n        let identity = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input, i)=>{\n            const arg1 = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue)(input[0]);\n            const [t, id] = this.transforms[i](_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(arg1) ? arg1 : input.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue));\n            transform += \" \" + t;\n            identity = identity && id;\n        });\n        return identity ? \"none\" : transform;\n    }\n    // Start observing our inputs once we have an observer.\n    observerAdded(count) {\n        if (count == 1) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.addFluidObserver)(value, this)));\n    }\n    // Stop observing our inputs once we have no observers.\n    observerRemoved(count) {\n        if (count == 0) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.removeFluidObserver)(value, this)));\n    }\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            this._value = null;\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.callFluidObservers)(this, event);\n    }\n    constructor(inputs, transforms){\n        super();\n        this.inputs = inputs;\n        this.transforms = transforms;\n        this._value = null;\n    }\n};\n// src/primitives.ts\nvar primitives = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\n// src/index.ts\n\n_react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    batchedUpdates: react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates,\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.createStringInterpolator,\n    colors: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.colors\n});\nvar host = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.createHost)(primitives, {\n    applyAnimatedValues,\n    createAnimatedStyle: (style)=>new AnimatedStyle(style),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getComponentProps: (param)=>{\n        let { scrollTop, scrollLeft, ...props } = param;\n        return props;\n    }\n});\nvar animated = host.animated;\n //# sourceMappingURL=react-spring_web.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3dlYi9kaXN0L3JlYWN0LXNwcmluZ193ZWIubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZUFBZTtBQUM4QjtBQUNPO0FBQ29CO0FBQ3BCO0FBRXBELDZCQUE2QjtBQUM3QixJQUFJSyxpQkFBaUI7QUFDckIsU0FBU0Msb0JBQW9CQyxJQUFJLEVBQUVDLEtBQUs7SUFDdEMsSUFBSUEsU0FBUyxRQUFRLE9BQU9BLFVBQVUsYUFBYUEsVUFBVSxJQUMzRCxPQUFPO0lBQ1QsSUFBSSxPQUFPQSxVQUFVLFlBQVlBLFVBQVUsS0FBSyxDQUFDSCxlQUFlSSxJQUFJLENBQUNGLFNBQVMsQ0FBRUcsQ0FBQUEsaUJBQWlCQyxjQUFjLENBQUNKLFNBQVNHLGdCQUFnQixDQUFDSCxLQUFLLEdBQzdJLE9BQU9DLFFBQVE7SUFDakIsT0FBTyxDQUFDLEtBQUtBLEtBQUksRUFBR0ksSUFBSTtBQUMxQjtBQUNBLElBQUlDLGlCQUFpQixDQUFDO0FBQ3RCLFNBQVNDLG9CQUFvQkMsUUFBUSxFQUFFQyxLQUFLO0lBQzFDLElBQUksQ0FBQ0QsU0FBU0UsUUFBUSxJQUFJLENBQUNGLFNBQVNHLFlBQVksRUFBRTtRQUNoRCxPQUFPO0lBQ1Q7SUFDQSxNQUFNQyxrQkFBa0JKLFNBQVNLLFFBQVEsS0FBSyxZQUFZTCxTQUFTTSxVQUFVLElBQUlOLFNBQVNNLFVBQVUsQ0FBQ0QsUUFBUSxLQUFLO0lBQ2xILE1BQU0sRUFDSkUsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxVQUFVLEVBQ1ZDLE9BQU8sRUFDUCxHQUFHQyxZQUNKLEdBQUdaO0lBQ0osTUFBTWEsU0FBU0MsT0FBT0QsTUFBTSxDQUFDRDtJQUM3QixNQUFNRyxRQUFRRCxPQUFPRSxJQUFJLENBQUNKLFlBQVlLLEdBQUcsQ0FDdkMsQ0FB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O2VBQUtBOztBQUM5RDtBQUNBLElBQUkwSSxXQUFXSCxLQUFLRyxRQUFRO0FBSTFCLENBQ0Ysb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3dlYi9kaXN0L3JlYWN0LXNwcmluZ193ZWIubW9kZXJuLm1qcz84N2MyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgR2xvYmFscyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL2NvcmVcIjtcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yLCBjb2xvcnMgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbmltcG9ydCB7IGNyZWF0ZUhvc3QgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9hbmltYXRlZFwiO1xuXG4vLyBzcmMvYXBwbHlBbmltYXRlZFZhbHVlcy50c1xudmFyIGlzQ3VzdG9tUHJvcFJFID0gL14tLS87XG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT09IFwiXCIpXG4gICAgcmV0dXJuIFwiXCI7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgIT09IDAgJiYgIWlzQ3VzdG9tUHJvcFJFLnRlc3QobmFtZSkgJiYgIShpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pKVxuICAgIHJldHVybiB2YWx1ZSArIFwicHhcIjtcbiAgcmV0dXJuIChcIlwiICsgdmFsdWUpLnRyaW0oKTtcbn1cbnZhciBhdHRyaWJ1dGVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gYXBwbHlBbmltYXRlZFZhbHVlcyhpbnN0YW5jZSwgcHJvcHMpIHtcbiAgaWYgKCFpbnN0YW5jZS5ub2RlVHlwZSB8fCAhaW5zdGFuY2Uuc2V0QXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGlzRmlsdGVyRWxlbWVudCA9IGluc3RhbmNlLm5vZGVOYW1lID09PSBcImZpbHRlclwiIHx8IGluc3RhbmNlLnBhcmVudE5vZGUgJiYgaW5zdGFuY2UucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gXCJmaWx0ZXJcIjtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBzdHlsZSxcbiAgICBjaGlsZHJlbixcbiAgICBzY3JvbGxUb3AsXG4gICAgc2Nyb2xsTGVmdCxcbiAgICB2aWV3Qm94LFxuICAgIC4uLmF0dHJpYnV0ZXNcbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKGF0dHJpYnV0ZXMpO1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLm1hcChcbiAgICAobmFtZSkgPT4gaXNGaWx0ZXJFbGVtZW50IHx8IGluc3RhbmNlLmhhc0F0dHJpYnV0ZShuYW1lKSA/IG5hbWUgOiBhdHRyaWJ1dGVDYWNoZVtuYW1lXSB8fCAoYXR0cmlidXRlQ2FjaGVbbmFtZV0gPSBuYW1lLnJlcGxhY2UoXG4gICAgICAvKFtBLVpdKS9nLFxuICAgICAgLy8gQXR0cmlidXRlcyBhcmUgd3JpdHRlbiBpbiBkYXNoIGNhc2VcbiAgICAgIChuKSA9PiBcIi1cIiArIG4udG9Mb3dlckNhc2UoKVxuICAgICkpXG4gICk7XG4gIGlmIChjaGlsZHJlbiAhPT0gdm9pZCAwKSB7XG4gICAgaW5zdGFuY2UudGV4dENvbnRlbnQgPSBjaGlsZHJlbjtcbiAgfVxuICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGUpIHtcbiAgICBpZiAoc3R5bGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCBzdHlsZVtuYW1lXSk7XG4gICAgICBpZiAoaXNDdXN0b21Qcm9wUkUudGVzdChuYW1lKSkge1xuICAgICAgICBpbnN0YW5jZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuYW1lcy5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XG4gICAgaW5zdGFuY2Uuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlc1tpXSk7XG4gIH0pO1xuICBpZiAoY2xhc3NOYW1lICE9PSB2b2lkIDApIHtcbiAgICBpbnN0YW5jZS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIH1cbiAgaWYgKHNjcm9sbFRvcCAhPT0gdm9pZCAwKSB7XG4gICAgaW5zdGFuY2Uuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICB9XG4gIGlmIChzY3JvbGxMZWZ0ICE9PSB2b2lkIDApIHtcbiAgICBpbnN0YW5jZS5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgfVxuICBpZiAodmlld0JveCAhPT0gdm9pZCAwKSB7XG4gICAgaW5zdGFuY2Uuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCB2aWV3Qm94KTtcbiAgfVxufVxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBjb2x1bW5zOiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd0VuZDogdHJ1ZSxcbiAgZ3JpZFJvd1NwYW46IHRydWUsXG4gIGdyaWRSb3dTdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZ3JpZENvbHVtblNwYW46IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIGZsb29kT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcbn07XG52YXIgcHJlZml4S2V5ID0gKHByZWZpeCwga2V5KSA9PiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xudmFyIHByZWZpeGVzID0gW1wiV2Via2l0XCIsIFwiTXNcIiwgXCJNb3pcIiwgXCJPXCJdO1xuaXNVbml0bGVzc051bWJlciA9IE9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gIHByZWZpeGVzLmZvckVhY2goKHByZWZpeCkgPT4gYWNjW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGFjY1twcm9wXSk7XG4gIHJldHVybiBhY2M7XG59LCBpc1VuaXRsZXNzTnVtYmVyKTtcblxuLy8gc3JjL0FuaW1hdGVkU3R5bGUudHNcbmltcG9ydCB7IEFuaW1hdGVkT2JqZWN0IH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvYW5pbWF0ZWRcIjtcbmltcG9ydCB7XG4gIGlzLFxuICBlYWNoLFxuICB0b0FycmF5LFxuICBlYWNoUHJvcCxcbiAgRmx1aWRWYWx1ZSxcbiAgZ2V0Rmx1aWRWYWx1ZSxcbiAgY2FsbEZsdWlkT2JzZXJ2ZXJzLFxuICBoYXNGbHVpZFZhbHVlLFxuICBhZGRGbHVpZE9ic2VydmVyLFxuICByZW1vdmVGbHVpZE9ic2VydmVyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xudmFyIGRvbVRyYW5zZm9ybXMgPSAvXihtYXRyaXh8dHJhbnNsYXRlfHNjYWxlfHJvdGF0ZXxza2V3KS87XG52YXIgcHhUcmFuc2Zvcm1zID0gL14odHJhbnNsYXRlKS87XG52YXIgZGVnVHJhbnNmb3JtcyA9IC9eKHJvdGF0ZXxza2V3KS87XG52YXIgYWRkVW5pdCA9ICh2YWx1ZSwgdW5pdCkgPT4gaXMubnVtKHZhbHVlKSAmJiB2YWx1ZSAhPT0gMCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlO1xudmFyIGlzVmFsdWVJZGVudGl0eSA9ICh2YWx1ZSwgaWQpID0+IGlzLmFycih2YWx1ZSkgPyB2YWx1ZS5ldmVyeSgodikgPT4gaXNWYWx1ZUlkZW50aXR5KHYsIGlkKSkgOiBpcy5udW0odmFsdWUpID8gdmFsdWUgPT09IGlkIDogcGFyc2VGbG9hdCh2YWx1ZSkgPT09IGlkO1xudmFyIEFuaW1hdGVkU3R5bGUgPSBjbGFzcyBleHRlbmRzIEFuaW1hdGVkT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoeyB4LCB5LCB6LCAuLi5zdHlsZSB9KSB7XG4gICAgY29uc3QgaW5wdXRzID0gW107XG4gICAgY29uc3QgdHJhbnNmb3JtcyA9IFtdO1xuICAgIGlmICh4IHx8IHkgfHwgeikge1xuICAgICAgaW5wdXRzLnB1c2goW3ggfHwgMCwgeSB8fCAwLCB6IHx8IDBdKTtcbiAgICAgIHRyYW5zZm9ybXMucHVzaCgoeHl6KSA9PiBbXG4gICAgICAgIGB0cmFuc2xhdGUzZCgke3h5ei5tYXAoKHYpID0+IGFkZFVuaXQodiwgXCJweFwiKSkuam9pbihcIixcIil9KWAsXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBpc1ZhbHVlSWRlbnRpdHkoeHl6LCAwKVxuICAgICAgXSk7XG4gICAgfVxuICAgIGVhY2hQcm9wKHN0eWxlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICBpbnB1dHMucHVzaChbdmFsdWUgfHwgXCJcIl0pO1xuICAgICAgICB0cmFuc2Zvcm1zLnB1c2goKHRyYW5zZm9ybSkgPT4gW3RyYW5zZm9ybSwgdHJhbnNmb3JtID09PSBcIlwiXSk7XG4gICAgICB9IGVsc2UgaWYgKGRvbVRyYW5zZm9ybXMudGVzdChrZXkpKSB7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtrZXldO1xuICAgICAgICBpZiAoaXMudW5kKHZhbHVlKSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHVuaXQgPSBweFRyYW5zZm9ybXMudGVzdChrZXkpID8gXCJweFwiIDogZGVnVHJhbnNmb3Jtcy50ZXN0KGtleSkgPyBcImRlZ1wiIDogXCJcIjtcbiAgICAgICAgaW5wdXRzLnB1c2godG9BcnJheSh2YWx1ZSkpO1xuICAgICAgICB0cmFuc2Zvcm1zLnB1c2goXG4gICAgICAgICAga2V5ID09PSBcInJvdGF0ZTNkXCIgPyAoW3gyLCB5MiwgejIsIGRlZ10pID0+IFtcbiAgICAgICAgICAgIGByb3RhdGUzZCgke3gyfSwke3kyfSwke3oyfSwke2FkZFVuaXQoZGVnLCB1bml0KX0pYCxcbiAgICAgICAgICAgIGlzVmFsdWVJZGVudGl0eShkZWcsIDApXG4gICAgICAgICAgXSA6IChpbnB1dCkgPT4gW1xuICAgICAgICAgICAgYCR7a2V5fSgke2lucHV0Lm1hcCgodikgPT4gYWRkVW5pdCh2LCB1bml0KSkuam9pbihcIixcIil9KWAsXG4gICAgICAgICAgICBpc1ZhbHVlSWRlbnRpdHkoaW5wdXQsIGtleS5zdGFydHNXaXRoKFwic2NhbGVcIikgPyAxIDogMClcbiAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IG5ldyBGbHVpZFRyYW5zZm9ybShpbnB1dHMsIHRyYW5zZm9ybXMpO1xuICAgIH1cbiAgICBzdXBlcihzdHlsZSk7XG4gIH1cbn07XG52YXIgRmx1aWRUcmFuc2Zvcm0gPSBjbGFzcyBleHRlbmRzIEZsdWlkVmFsdWUge1xuICBjb25zdHJ1Y3RvcihpbnB1dHMsIHRyYW5zZm9ybXMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5wdXRzID0gaW5wdXRzO1xuICAgIHRoaXMudHJhbnNmb3JtcyA9IHRyYW5zZm9ybXM7XG4gICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICB9XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgfHwgKHRoaXMuX3ZhbHVlID0gdGhpcy5fZ2V0KCkpO1xuICB9XG4gIF9nZXQoKSB7XG4gICAgbGV0IHRyYW5zZm9ybSA9IFwiXCI7XG4gICAgbGV0IGlkZW50aXR5ID0gdHJ1ZTtcbiAgICBlYWNoKHRoaXMuaW5wdXRzLCAoaW5wdXQsIGkpID0+IHtcbiAgICAgIGNvbnN0IGFyZzEgPSBnZXRGbHVpZFZhbHVlKGlucHV0WzBdKTtcbiAgICAgIGNvbnN0IFt0LCBpZF0gPSB0aGlzLnRyYW5zZm9ybXNbaV0oXG4gICAgICAgIGlzLmFycihhcmcxKSA/IGFyZzEgOiBpbnB1dC5tYXAoZ2V0Rmx1aWRWYWx1ZSlcbiAgICAgICk7XG4gICAgICB0cmFuc2Zvcm0gKz0gXCIgXCIgKyB0O1xuICAgICAgaWRlbnRpdHkgPSBpZGVudGl0eSAmJiBpZDtcbiAgICB9KTtcbiAgICByZXR1cm4gaWRlbnRpdHkgPyBcIm5vbmVcIiA6IHRyYW5zZm9ybTtcbiAgfVxuICAvLyBTdGFydCBvYnNlcnZpbmcgb3VyIGlucHV0cyBvbmNlIHdlIGhhdmUgYW4gb2JzZXJ2ZXIuXG4gIG9ic2VydmVyQWRkZWQoY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gMSlcbiAgICAgIGVhY2goXG4gICAgICAgIHRoaXMuaW5wdXRzLFxuICAgICAgICAoaW5wdXQpID0+IGVhY2goXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgKHZhbHVlKSA9PiBoYXNGbHVpZFZhbHVlKHZhbHVlKSAmJiBhZGRGbHVpZE9ic2VydmVyKHZhbHVlLCB0aGlzKVxuICAgICAgICApXG4gICAgICApO1xuICB9XG4gIC8vIFN0b3Agb2JzZXJ2aW5nIG91ciBpbnB1dHMgb25jZSB3ZSBoYXZlIG5vIG9ic2VydmVycy5cbiAgb2JzZXJ2ZXJSZW1vdmVkKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IDApXG4gICAgICBlYWNoKFxuICAgICAgICB0aGlzLmlucHV0cyxcbiAgICAgICAgKGlucHV0KSA9PiBlYWNoKFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICh2YWx1ZSkgPT4gaGFzRmx1aWRWYWx1ZSh2YWx1ZSkgJiYgcmVtb3ZlRmx1aWRPYnNlcnZlcih2YWx1ZSwgdGhpcylcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfVxuICBldmVudE9ic2VydmVkKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJjaGFuZ2VcIikge1xuICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICBjYWxsRmx1aWRPYnNlcnZlcnModGhpcywgZXZlbnQpO1xuICB9XG59O1xuXG4vLyBzcmMvcHJpbWl0aXZlcy50c1xudmFyIHByaW1pdGl2ZXMgPSBbXG4gIFwiYVwiLFxuICBcImFiYnJcIixcbiAgXCJhZGRyZXNzXCIsXG4gIFwiYXJlYVwiLFxuICBcImFydGljbGVcIixcbiAgXCJhc2lkZVwiLFxuICBcImF1ZGlvXCIsXG4gIFwiYlwiLFxuICBcImJhc2VcIixcbiAgXCJiZGlcIixcbiAgXCJiZG9cIixcbiAgXCJiaWdcIixcbiAgXCJibG9ja3F1b3RlXCIsXG4gIFwiYm9keVwiLFxuICBcImJyXCIsXG4gIFwiYnV0dG9uXCIsXG4gIFwiY2FudmFzXCIsXG4gIFwiY2FwdGlvblwiLFxuICBcImNpdGVcIixcbiAgXCJjb2RlXCIsXG4gIFwiY29sXCIsXG4gIFwiY29sZ3JvdXBcIixcbiAgXCJkYXRhXCIsXG4gIFwiZGF0YWxpc3RcIixcbiAgXCJkZFwiLFxuICBcImRlbFwiLFxuICBcImRldGFpbHNcIixcbiAgXCJkZm5cIixcbiAgXCJkaWFsb2dcIixcbiAgXCJkaXZcIixcbiAgXCJkbFwiLFxuICBcImR0XCIsXG4gIFwiZW1cIixcbiAgXCJlbWJlZFwiLFxuICBcImZpZWxkc2V0XCIsXG4gIFwiZmlnY2FwdGlvblwiLFxuICBcImZpZ3VyZVwiLFxuICBcImZvb3RlclwiLFxuICBcImZvcm1cIixcbiAgXCJoMVwiLFxuICBcImgyXCIsXG4gIFwiaDNcIixcbiAgXCJoNFwiLFxuICBcImg1XCIsXG4gIFwiaDZcIixcbiAgXCJoZWFkXCIsXG4gIFwiaGVhZGVyXCIsXG4gIFwiaGdyb3VwXCIsXG4gIFwiaHJcIixcbiAgXCJodG1sXCIsXG4gIFwiaVwiLFxuICBcImlmcmFtZVwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwiaW5zXCIsXG4gIFwia2JkXCIsXG4gIFwia2V5Z2VuXCIsXG4gIFwibGFiZWxcIixcbiAgXCJsZWdlbmRcIixcbiAgXCJsaVwiLFxuICBcImxpbmtcIixcbiAgXCJtYWluXCIsXG4gIFwibWFwXCIsXG4gIFwibWFya1wiLFxuICBcIm1lbnVcIixcbiAgXCJtZW51aXRlbVwiLFxuICBcIm1ldGFcIixcbiAgXCJtZXRlclwiLFxuICBcIm5hdlwiLFxuICBcIm5vc2NyaXB0XCIsXG4gIFwib2JqZWN0XCIsXG4gIFwib2xcIixcbiAgXCJvcHRncm91cFwiLFxuICBcIm9wdGlvblwiLFxuICBcIm91dHB1dFwiLFxuICBcInBcIixcbiAgXCJwYXJhbVwiLFxuICBcInBpY3R1cmVcIixcbiAgXCJwcmVcIixcbiAgXCJwcm9ncmVzc1wiLFxuICBcInFcIixcbiAgXCJycFwiLFxuICBcInJ0XCIsXG4gIFwicnVieVwiLFxuICBcInNcIixcbiAgXCJzYW1wXCIsXG4gIFwic2NyaXB0XCIsXG4gIFwic2VjdGlvblwiLFxuICBcInNlbGVjdFwiLFxuICBcInNtYWxsXCIsXG4gIFwic291cmNlXCIsXG4gIFwic3BhblwiLFxuICBcInN0cm9uZ1wiLFxuICBcInN0eWxlXCIsXG4gIFwic3ViXCIsXG4gIFwic3VtbWFyeVwiLFxuICBcInN1cFwiLFxuICBcInRhYmxlXCIsXG4gIFwidGJvZHlcIixcbiAgXCJ0ZFwiLFxuICBcInRleHRhcmVhXCIsXG4gIFwidGZvb3RcIixcbiAgXCJ0aFwiLFxuICBcInRoZWFkXCIsXG4gIFwidGltZVwiLFxuICBcInRpdGxlXCIsXG4gIFwidHJcIixcbiAgXCJ0cmFja1wiLFxuICBcInVcIixcbiAgXCJ1bFwiLFxuICBcInZhclwiLFxuICBcInZpZGVvXCIsXG4gIFwid2JyXCIsXG4gIC8vIFNWR1xuICBcImNpcmNsZVwiLFxuICBcImNsaXBQYXRoXCIsXG4gIFwiZGVmc1wiLFxuICBcImVsbGlwc2VcIixcbiAgXCJmb3JlaWduT2JqZWN0XCIsXG4gIFwiZ1wiLFxuICBcImltYWdlXCIsXG4gIFwibGluZVwiLFxuICBcImxpbmVhckdyYWRpZW50XCIsXG4gIFwibWFza1wiLFxuICBcInBhdGhcIixcbiAgXCJwYXR0ZXJuXCIsXG4gIFwicG9seWdvblwiLFxuICBcInBvbHlsaW5lXCIsXG4gIFwicmFkaWFsR3JhZGllbnRcIixcbiAgXCJyZWN0XCIsXG4gIFwic3RvcFwiLFxuICBcInN2Z1wiLFxuICBcInRleHRcIixcbiAgXCJ0c3BhblwiXG5dO1xuXG4vLyBzcmMvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJAcmVhY3Qtc3ByaW5nL2NvcmVcIjtcbkdsb2JhbHMuYXNzaWduKHtcbiAgYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLFxuICBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IsXG4gIGNvbG9yc1xufSk7XG52YXIgaG9zdCA9IGNyZWF0ZUhvc3QocHJpbWl0aXZlcywge1xuICBhcHBseUFuaW1hdGVkVmFsdWVzLFxuICBjcmVhdGVBbmltYXRlZFN0eWxlOiAoc3R5bGUpID0+IG5ldyBBbmltYXRlZFN0eWxlKHN0eWxlKSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBnZXRDb21wb25lbnRQcm9wczogKHsgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0LCAuLi5wcm9wcyB9KSA9PiBwcm9wc1xufSk7XG52YXIgYW5pbWF0ZWQgPSBob3N0LmFuaW1hdGVkO1xuZXhwb3J0IHtcbiAgYW5pbWF0ZWQgYXMgYSxcbiAgYW5pbWF0ZWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1zcHJpbmdfd2ViLm1vZGVybi5tanMubWFwIl0sIm5hbWVzIjpbIkdsb2JhbHMiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImNyZWF0ZVN0cmluZ0ludGVycG9sYXRvciIsImNvbG9ycyIsImNyZWF0ZUhvc3QiLCJpc0N1c3RvbVByb3BSRSIsImRhbmdlcm91c1N0eWxlVmFsdWUiLCJuYW1lIiwidmFsdWUiLCJ0ZXN0IiwiaXNVbml0bGVzc051bWJlciIsImhhc093blByb3BlcnR5IiwidHJpbSIsImF0dHJpYnV0ZUNhY2hlIiwiYXBwbHlBbmltYXRlZFZhbHVlcyIsImluc3RhbmNlIiwicHJvcHMiLCJub2RlVHlwZSIsInNldEF0dHJpYnV0ZSIsImlzRmlsdGVyRWxlbWVudCIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsImNsYXNzTmFtZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0Iiwidmlld0JveCIsImF0dHJpYnV0ZXMiLCJ2YWx1ZXMiLCJPYmplY3QiLCJuYW1lcyIsImtleXMiLCJtYXAiLCJoYXNBdHRyaWJ1dGUiLCJyZXBsYWNlIiwibiIsInRvTG93ZXJDYXNlIiwidGV4dENvbnRlbnQiLCJzZXRQcm9wZXJ0eSIsImZvckVhY2giLCJpIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4S2V5IiwicHJlZml4Iiwia2V5IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJwcmVmaXhlcyIsInJlZHVjZSIsImFjYyIsInByb3AiLCJBbmltYXRlZE9iamVjdCIsImlzIiwiZWFjaCIsInRvQXJyYXkiLCJlYWNoUHJvcCIsIkZsdWlkVmFsdWUiLCJnZXRGbHVpZFZhbHVlIiwiY2FsbEZsdWlkT2JzZXJ2ZXJzIiwiaGFzRmx1aWRWYWx1ZSIsImFkZEZsdWlkT2JzZXJ2ZXIiLCJyZW1vdmVGbHVpZE9ic2VydmVyIiwiZG9tVHJhbnNmb3JtcyIsInB4VHJhbnNmb3JtcyIsImRlZ1RyYW5zZm9ybXMiLCJhZGRVbml0IiwidW5pdCIsIm51bSIsImlzVmFsdWVJZGVudGl0eSIsImlkIiwiYXJyIiwiZXZlcnkiLCJ2IiwicGFyc2VGbG9hdCIsIkFuaW1hdGVkU3R5bGUiLCJjb25zdHJ1Y3RvciIsIngiLCJ5IiwieiIsImlucHV0cyIsInRyYW5zZm9ybXMiLCJwdXNoIiwieHl6Iiwiam9pbiIsInRyYW5zZm9ybSIsInVuZCIsIngyIiwieTIiLCJ6MiIsImRlZyIsImlucHV0Iiwic3RhcnRzV2l0aCIsImxlbmd0aCIsIkZsdWlkVHJhbnNmb3JtIiwiZ2V0IiwiX3ZhbHVlIiwiX2dldCIsImlkZW50aXR5IiwiYXJnMSIsInQiLCJvYnNlcnZlckFkZGVkIiwiY291bnQiLCJvYnNlcnZlclJlbW92ZWQiLCJldmVudE9ic2VydmVkIiwiZXZlbnQiLCJ0eXBlIiwicHJpbWl0aXZlcyIsImFzc2lnbiIsImJhdGNoZWRVcGRhdGVzIiwiaG9zdCIsImNyZWF0ZUFuaW1hdGVkU3R5bGUiLCJnZXRDb21wb25lbnRQcm9wcyIsImFuaW1hdGVkIiwiYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2FAnimations%2FAnimatedContent.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FblogSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FfooterSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FheroSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnavbarSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FnewsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FprojectSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FskillsSection.tsx&modules=%2FUsers%2Fcsh%2FProjet%2FcshStudio%2FcshStudio%2Fsrc%2Fcomponents%2FvaleursSection.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);